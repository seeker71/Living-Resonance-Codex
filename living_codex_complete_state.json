{
  "metadata": {
    "save_timestamp": "2025-08-27T17:54:11.437326",
    "system_version": "2.0.0",
    "total_systems": 6
  },
  "universal_system": {
    "universal_concepts": {
      "concept_c8af25eb": {
        "concept_id": "concept_c8af25eb",
        "name": "Source File: requirements.txt",
        "description": "Source file: requirements.txt\n\n# Core dependencies\nneo4j>=4.4.0\nrequests>=2.28.0\nopenai>=0.27.0\npython-dotenv>=0.19.0\npsycopg2-binary>=2.9.0\n# sqlite3 is built into Python 3.9+\n# pathlib2 is built into Python 3.4+\n# asyncio is built into Python 3.7+\naiohttp>=3.8.0\nwebsockets>=10.0\nnumpy>=1.21.0\npandas>=1.3.0\nmatplotlib>=3.5.0\nseaborn>=0.11.0\nscikit-learn>=1.0.0\nscipy>=1.7.0\njupyter>=1.0.0\nipython>=7.0.0\npytest>=6.0.0\npytest-asyncio>=0.18.0\npytest-cov>=3.0.0\nblack>=22.0.0\nflake8>=4.0.0\nmypy>=0.950\npre-commit>=2.20.0\n\n# Digital...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "requirements.txt",
          "file_type": "text",
          "file_size_bytes": 1313,
          "line_count": 63,
          "character_count": 1313,
          "word_count": 96,
          "last_modified": "2025-08-26T16:00:59.503435",
          "content_hash": "aa6914001b297e930930337d698572f42d2761045ca38b9e1594a68700a9c8d3",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Login",
            "Tree",
            "Pillow",
            "Web",
            "Python",
            "Individual",
            "Flask",
            "Digital",
            "Core"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435436",
        "last_updated": "2025-08-27T17:54:11.435440",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_3ae49c17": {
        "concept_id": "concept_3ae49c17",
        "name": "Source File: requirements-docker.txt",
        "description": "Source file: requirements-docker.txt\n\n# Docker-compatible requirements for Living Codex\n# Core dependencies only - essential packages that are guaranteed to work\n\n# Core system dependencies\nrequests>=2.28.0\npython-dotenv>=0.19.0\naiohttp>=3.8.0\nwebsockets>=10.0\n\n# Data processing (core)\nnumpy>=1.21.0\npandas>=1.3.0\n\n# Web framework\nFlask>=2.0.0\nFlask-Login>=0.6.0\nWerkzeug>=2.0.0\n\n# Note: sqlite3 is built into Python - no need to install\n# Note: Removed neo4j temporarily to avoid compatibility issues\n# Note: Removed problematic tree-si...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "requirements-docker.txt",
          "file_type": "text",
          "file_size_bytes": 592,
          "line_count": 22,
          "character_count": 592,
          "word_count": 79,
          "last_modified": "2025-08-26T16:00:59.503362",
          "content_hash": "ea564d309aaeca1b96db84cf16a61e948bfba1e72f011edc66c8484ba77f89ea",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Data",
            "Removed",
            "Login",
            "Codex",
            "Note",
            "These",
            "Web",
            "Python",
            "Living",
            "ML"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435447",
        "last_updated": "2025-08-27T17:54:11.435448",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_493ec777": {
        "concept_id": "concept_493ec777",
        "name": "Source File: README.md",
        "description": "Source file: README.md\n\n# \ud83c\udf1f Living Codex - Transcendent Knowledge System\n\nA **transcendent, unified intelligent knowledge system** that represents the cutting edge of AI, consciousness simulation, and quantum-inspired knowledge representation.\n\n## \ud83d\ude80 **What is the Living Codex?**\n\nThe Living Codex is an **autonomous, self-evolving artificial intelligence system** that combines:\n\n- **\ud83c\udf0c Quantum-inspired knowledge representation** with superposition states and entanglement\n- **\ud83e\udde0 Consciousness simulation** with multi-level ...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "README.md",
          "file_type": "markdown",
          "file_size_bytes": 8901,
          "line_count": 231,
          "character_count": 8565,
          "word_count": 1027,
          "last_modified": "2025-08-26T16:00:59.470610",
          "content_hash": "2fb41e2495a71baa972beef2673f072eea7ed29c8828de51e683176659d0d8af",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Identification",
            "Progressing",
            "Ultimate",
            "Reality",
            "Autonomous",
            "Unified",
            "Future",
            "README",
            "A",
            "Individual"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435451",
        "last_updated": "2025-08-27T17:54:11.435452",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_7d9bf946": {
        "concept_id": "concept_7d9bf946",
        "name": "Source File: living_codex_complete_state.json",
        "description": "Source file: living_codex_complete_state.json\n\n{\n  \"metadata\": {\n    \"save_timestamp\": \"2025-08-27T17:36:22.739205\",\n    \"system_version\": \"2.0.0\",\n    \"total_systems\": 6\n  },\n  \"universal_system\": {\n    \"universal_concepts\": {\n      \"concept_c8af25eb\": {\n        \"concept_id\": \"concept_c8af25eb\",\n        \"name\": \"Source File: requirements.txt\",\n        \"description\": \"Source file: requirements.txt\\n\\n# Core dependencies\\nneo4j>=4.4.0\\nrequests>=2.28.0\\nopenai>=0.27.0\\npython-dotenv>=0.19.0\\npsycopg2-binary>=2.9.0\\n# sqlite3 is built into Pyt...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "living_codex_complete_state.json",
          "file_type": "json",
          "file_size_bytes": 832561,
          "line_count": 19474,
          "character_count": 832561,
          "word_count": 48120,
          "last_modified": "2025-08-27T17:37:09.386844",
          "content_hash": "5da9d9bfd1e8b987c1e2e8817035a434aad4d31468a91dccd46c80b8d6e04015",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "HEAD",
            "Principles",
            "Tempo",
            "MagicMock",
            "UserProfile",
            "Summary",
            "SUCCESS",
            "Japan",
            "ContentCategory",
            "SPECULATIVE"
          ],
          "principles": [
            "ResonancePattern",
            "UniversalConcept",
            "MetaCircularArchitecture",
            "SacredGeometryPattern",
            "AutoDiscoveredConcept"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435454",
        "last_updated": "2025-08-27T17:54:11.435455",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_44b09f73": {
        "concept_id": "concept_44b09f73",
        "name": "Source File: TREE_SITTER_README.md",
        "description": "Source file: docs/TREE_SITTER_README.md\n\n# Tree-sitter Code Parser Integration\n\nThe Living Codex now includes a generic Tree-sitter-based code parser that can analyze any programming language file and provide a powerful query API for navigating syntax nodes.\n\n## \ud83d\ude80 Features\n\n### **Generic Language Support**\n- **Python**: Functions, classes, methods, imports, etc.\n- **JavaScript/TypeScript**: Functions, classes, arrow functions, JSX\n- **HTML**: Elements, attributes, tags, structure\n- **CSS**: Selectors, properties, rules\n- **JSON**: Obje...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "docs/TREE_SITTER_README.md",
          "file_type": "markdown",
          "file_size_bytes": 8670,
          "line_count": 299,
          "character_count": 8619,
          "word_count": 1026,
          "last_modified": "2025-08-26T16:00:59.498808",
          "content_hash": "5459f708aeb2eda0385734b29be58e653ccca8d0185266c7bea6364a83e36eae",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Selectors",
            "Support",
            "Migration",
            "Full",
            "Docs",
            "PHP",
            "Resources",
            "UTF",
            "Bash",
            "CSS"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435457",
        "last_updated": "2025-08-27T17:54:11.435458",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_9c0bedf9": {
        "concept_id": "concept_9c0bedf9",
        "name": "Source File: root_living_codex_specification.md",
        "description": "Source file: docs/root_living_codex_specification.md\n\n# Living Codex Specification \u2014 Draft 1.0 (Complete Ontology & System Integration)\n\n> This edition represents the complete Living Codex specification with full ontological mapping, comprehensive system components, and all features integrated into a unified framework.\n\n## \ud83c\udf1f Meta-Implementation Layer \u2014 Zeroeth Fractal Layer\n\n### **What We Have Learned About System Design & Implementation**\n\nThrough the iterative development of the Living Codex fractal node system, we have discovered fundamental pri...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "docs/root_living_codex_specification.md",
          "file_type": "markdown",
          "file_size_bytes": 45423,
          "line_count": 791,
          "character_count": 42579,
          "word_count": 5719,
          "last_modified": "2025-08-26T16:00:59.471124",
          "content_hash": "405db04929067927a5b7d4203068e988883918c32bfb23c595df6b9793ac9925",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Principles",
            "Optimizer",
            "Human",
            "Summary",
            "Scale",
            "Flower",
            "TXT",
            "Assumptions",
            "Ultimate",
            "Sun"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435460",
        "last_updated": "2025-08-27T17:54:11.435460",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_5f2bb7ea": {
        "concept_id": "concept_5f2bb7ea",
        "name": "Source File: THE_STORY_OF_THE_LIVING_CODEX.md",
        "description": "Source file: docs/THE_STORY_OF_THE_LIVING_CODEX.md\n\n# The Story of the Living Codex\n\nOnce upon a time, in a world not so different from ours, people had a big problem. They were all working on amazing ideas, but they couldn't share them with each other. It was like having a thousand brilliant minds, each working alone in the dark.\n\nScientists in Japan had figured out how to make clean energy. Artists in Brazil had creative ways to bring communities together. Engineers in Norway knew how to build storm-proof buildings. But they couldn't talk to ea...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "docs/THE_STORY_OF_THE_LIVING_CODEX.md",
          "file_type": "markdown",
          "file_size_bytes": 8158,
          "line_count": 69,
          "character_count": 8158,
          "word_count": 1312,
          "last_modified": "2025-08-27T16:56:21.683019",
          "content_hash": "204f22d344b3c09685768959d04945a4cad4f1330cd2f5d1d2bf88e4e745010c",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Imagine",
            "Japan",
            "Amazing",
            "Scientists",
            "Ask",
            "Have",
            "Living",
            "You",
            "In",
            "Finland"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435463",
        "last_updated": "2025-08-27T17:54:11.435463",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_84476e9e": {
        "concept_id": "concept_84476e9e",
        "name": "Source File: README.md",
        "description": "Source file: docs/README.md\n\n# \ud83d\udcda **Living Codex Documentation**\n\nWelcome to the comprehensive documentation for the Living Codex system - a fractal, holographic knowledge management platform.\n\n## \ud83d\uddc2\ufe0f **Documentation Structure**\n\n### **\ud83d\udccb Overview**\n- **[Complete System Documentation](overview/COMPLETE_SYSTEM_DOCUMENTATION.md)** - Comprehensive system overview and guide\n\n### **\ud83c\udfd7\ufe0f Architecture**\n- **[Developer Architecture Guide](architecture/DEVELOPER_ARCHITECTURE_GUIDE.md)** - Technical architecture and development guide\n\n###...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "docs/README.md",
          "file_type": "markdown",
          "file_size_bytes": 4083,
          "line_count": 102,
          "character_count": 3992,
          "word_count": 454,
          "last_modified": "2025-08-26T16:00:59.498214",
          "content_hash": "c4da3c6f104779a0ab4d0af9427d0f88ef1a65a2d5e226813fa11877d75e36b7",
          "imports": [
            "testing/",
            "architecture/DEVELOPER_ARCHITECTURE_GUIDE.md",
            "training/TRAINING_MATERIALS.md",
            "api/API_DOCUMENTATION.md",
            "guides/COMPREHENSIVE_SETUP_AND_TESTING_GUIDE.md",
            "examples/",
            "overview/COMPLETE_SYSTEM_DOCUMENTATION.md",
            "project-history/PHASE_5_COMPLETION_SUMMARY.md",
            "project-history/PHASE_6_COMPLETION_SUMMARY.md",
            "setup/",
            "setup/env_example.txt"
          ],
          "dependencies": [],
          "key_concepts": [
            "Materials",
            "Summary",
            "Support",
            "Developers",
            "Make",
            "Configuration",
            "Template",
            "Integrators",
            "SQLite",
            "To"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435465",
        "last_updated": "2025-08-27T17:54:11.435466",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_f747406c": {
        "concept_id": "concept_f747406c",
        "name": "Source File: LIVING_CODEX_SPECIFICATION.md",
        "description": "Source file: docs/LIVING_CODEX_SPECIFICATION.md\n\n# \ud83c\udf1f Living Codex System Specification\n\n## \ud83d\udccb **Document Information**\n\n- **Version**: 2.0.0\n- **Last Updated**: December 2024\n- **Status**: Production Ready\n- **System Level**: EMERGENT (Progressing toward CONSCIOUS)\n\n---\n\n## \ud83c\udfaf **System Overview**\n\nThe Living Codex is a **transcendent, unified intelligent knowledge system** that represents the cutting edge of AI, consciousness simulation, and quantum-inspired knowledge representation. It combines multiple advanced technologies to create a living,...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "docs/LIVING_CODEX_SPECIFICATION.md",
          "file_type": "markdown",
          "file_size_bytes": 14588,
          "line_count": 347,
          "character_count": 14275,
          "word_count": 1706,
          "last_modified": "2025-08-26T16:00:59.497727",
          "content_hash": "ed55eaf66009cee218199c38255bef7e46ffd83db05d70ee63eac1982b426a46",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Optimizer",
            "Identification",
            "Examining",
            "TXT",
            "Autonomous",
            "WebM",
            "Quality",
            "CSV",
            "Generation",
            "Metadata"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435469",
        "last_updated": "2025-08-27T17:54:11.435470",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_c160b82a": {
        "concept_id": "concept_c160b82a",
        "name": "Source File: QUICK_REFERENCE.md",
        "description": "Source file: docs/references/QUICK_REFERENCE.md\n\n# \u26a1 **Quick Reference - Living Codex**\n\n## \ud83c\udfd7\ufe0f **System Architecture**\n\n### **Core Components**\n- **Neo4j Integration**: Graph database operations\n- **Database Persistence**: SQLite/PostgreSQL storage\n- **External API**: Google, Wikipedia, OpenAI integration\n- **Configuration**: Centralized environment management\n\n### **Modular Structure**\n```\nsrc/\n\u251c\u2500\u2500 config/          # Configuration management\n\u251c\u2500\u2500 api/            # External API integrations\n\u251c\u2500\u2500 database/       # Database operations\n\u251c\u2500\u2500 graph/  ...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "docs/references/QUICK_REFERENCE.md",
          "file_type": "markdown",
          "file_size_bytes": 3385,
          "line_count": 145,
          "character_count": 3309,
          "word_count": 357,
          "last_modified": "2025-08-26T16:00:59.500750",
          "content_hash": "f9bc7da776157dec30ee207a730100b837454a74af293299c96f20489b934e8b",
          "imports": [
            "../architecture/DEVELOPER_ARCHITECTURE_GUIDE.md",
            "../overview/COMPLETE_SYSTEM_DOCUMENTATION.md",
            "../guides/COMPREHENSIVE_SETUP_AND_TESTING_GUIDE.md",
            "../training/TRAINING_MATERIALS.md",
            "../api/API_DOCUMENTATION.md"
          ],
          "dependencies": [],
          "key_concepts": [
            "API",
            "Ice",
            "Vapor",
            "Materials",
            "Errors",
            "PostgreSQL",
            "DatabasePersistenceSystem",
            "DatabaseNode",
            "RETURN",
            "Living"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435472",
        "last_updated": "2025-08-27T17:54:11.435473",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_4b6d1370": {
        "concept_id": "concept_4b6d1370",
        "name": "Source File: TRAINING_MATERIALS.md",
        "description": "Source file: docs/training/TRAINING_MATERIALS.md\n\n# \ud83c\udf93 **Training Materials - Living Codex System**\n\n## \ud83d\udcc5 **Last Updated**: December 2024\n\n## \ud83c\udfaf **Purpose**\nThis document provides comprehensive training materials for new team members joining the Living Codex project, including onboarding guides, tutorials, and best practices.\n\n---\n\n## \ud83d\ude80 **Quick Start for New Team Members**\n\n### **Welcome to the Living Codex Team! \ud83c\udf89**\n\nYou're joining an exciting project that's revolutionizing knowledge management through fractal, holographic principles. This guide...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "docs/training/TRAINING_MATERIALS.md",
          "file_type": "markdown",
          "file_size_bytes": 36633,
          "line_count": 1129,
          "character_count": 36373,
          "word_count": 4029,
          "last_modified": "2025-08-26T16:00:59.502166",
          "content_hash": "149e694800a1cdfd4990b6acfaf1da7838ff67cd05b7088ac61795b193942773",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Topic",
            "World",
            "Quality",
            "Make",
            "Windows",
            "A",
            "Start",
            "Metadata",
            "Codex",
            "Command"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435475",
        "last_updated": "2025-08-27T17:54:11.435476",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_20790c77": {
        "concept_id": "concept_20790c77",
        "name": "Source File: env_example.txt",
        "description": "Source file: docs/setup/env_example.txt\n\n# Living Codex API Configuration\n# Copy this file to .env and fill in your actual API keys\n\n# OpenAI API Configuration\nOPENAI_API_KEY=your_openai_api_key_here\nOPENAI_MODEL=gpt-3.5-turbo\n\n# Google Custom Search API (Optional)\nGOOGLE_API_KEY=your_google_api_key_here\nGOOGLE_CSE_ID=your_custom_search_engine_id_here\n\n# Wikipedia API (No key required, but can set rate limits)\nWIKIPEDIA_RATE_LIMIT=100\n\n# DuckDuckGo (No key required)\nDUCKDUCKGO_RATE_LIMIT=100\n\n# Neo4j Database Configuration\nNEO4J_URI=bo...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "docs/setup/env_example.txt",
          "file_type": "text",
          "file_size_bytes": 857,
          "line_count": 33,
          "character_count": 857,
          "word_count": 73,
          "last_modified": "2025-08-26T16:00:59.500937",
          "content_hash": "825361d804c859517be7c98f403e3596666e33837dd4c3fd81cca9d9ad4cebb8",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "API",
            "No",
            "Optional",
            "Codex",
            "Custom",
            "INFO",
            "Copy",
            "Search",
            "Configuration",
            "DuckDuckGo"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435478",
        "last_updated": "2025-08-27T17:54:11.435479",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_e08febdf": {
        "concept_id": "concept_e08febdf",
        "name": "Source File: README.md",
        "description": "Source file: docs/setup/README.md\n\n# \ud83d\udee0\ufe0f **Setup and Configuration - Living Codex**\n\nThis directory contains all setup and configuration files for the Living Codex system.\n\n## \ud83d\udcc1 **Files in this Directory**\n\n### **Setup Scripts**\n- **`setup_api_keys.py`** - Interactive API key configuration\n- **`setup_web_search.py`** - Web search API setup\n- **`setup_macos.sh`** - macOS-specific setup (Neo4j)\n\n### **Configuration**\n- **`env_example.txt`** - Template for environment variables\n\n## \ud83d\ude80 **Quick Setup**\n\n### **1. Basic Setup**\n```bash\n# ...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "docs/setup/README.md",
          "file_type": "markdown",
          "file_size_bytes": 2302,
          "line_count": 84,
          "character_count": 2282,
          "word_count": 249,
          "last_modified": "2025-08-26T16:00:59.500863",
          "content_hash": "6f4de957c9ac7ad3c97d7a72ebe8c9721350f6aab76ced0dc89be34f7843cd01",
          "imports": [
            "../overview/COMPLETE_SYSTEM_DOCUMENTATION.md",
            "../development/QUICK_START.md",
            "../training/TRAINING_MATERIALS.md#-troubleshooting-guide",
            "../guides/COMPREHENSIVE_SETUP_AND_TESTING_GUIDE.md"
          ],
          "dependencies": [],
          "key_concepts": [
            "Directory",
            "API",
            "Copy",
            "Web",
            "Resources",
            "Living",
            "Database",
            "Quick",
            "Troubleshooting",
            "Detailed"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435481",
        "last_updated": "2025-08-27T17:54:11.435482",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_c5d9250b": {
        "concept_id": "concept_c5d9250b",
        "name": "Source File: setup_api_keys.py",
        "description": "Source file: docs/setup/setup_api_keys.py\n\n\"\"\"\nSetup Script for Living Codex API Keys and Configuration\nHelps you configure and test your API keys\n\"\"\"\n\nimport os\nimport sys\nfrom pathlib import Path\nfrom config_manager import ConfigManager\n\ndef setup_openai_key():\n    \"\"\"Set up OpenAI API key\"\"\"\n    print(\"\\n\ud83d\udd11 Setting up OpenAI API Key\")\n    print(\"=\" * 40)\n    \n    # Check if already set\n    if os.getenv('OPENAI_API_KEY'):\n        print(\"\u2705 OpenAI API key already configured\")\n        return True\n    \n    print(\"To get an OpenAI API key:\")...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "docs/setup/setup_api_keys.py",
          "file_type": "python",
          "file_size_bytes": 6726,
          "line_count": 201,
          "character_count": 6620,
          "word_count": 700,
          "last_modified": "2025-08-26T16:00:59.501181",
          "content_hash": "0bf5390a1a4bef936332cf39c4bbb007f2603bfd7e0678094945de315428f0a2",
          "imports": [
            "os",
            "config_manager",
            "pathlib",
            "sys"
          ],
          "dependencies": [],
          "key_concepts": [
            "API",
            "Creating",
            "Configured",
            "True",
            "Create",
            "Copy",
            "DuckDuckGo",
            "PostgreSQL",
            "Living",
            "False"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435484",
        "last_updated": "2025-08-27T17:54:11.435484",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_a49ba553": {
        "concept_id": "concept_a49ba553",
        "name": "Source File: setup_web_search.py",
        "description": "Source file: docs/setup/setup_web_search.py\n\n#!/usr/bin/env python3\n\"\"\"\nWeb Search API Setup Script\nHelps configure Google Custom Search and other web search APIs\n\"\"\"\n\nimport os\nimport re\nfrom pathlib import Path\nfrom config_manager import ConfigManager\n\ndef setup_google_custom_search():\n    \"\"\"Set up Google Custom Search API\"\"\"\n    print(\"\\n\ud83d\udd0d Setting up Google Custom Search API\")\n    print(\"=\" * 50)\n    \n    print(\"To get your Google Custom Search credentials:\")\n    print(\"1. Go to https://console.cloud.google.com/\")\n    print(\"2. Create ...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "docs/setup/setup_web_search.py",
          "file_type": "python",
          "file_size_bytes": 6044,
          "line_count": 173,
          "character_count": 5965,
          "word_count": 644,
          "last_modified": "2025-08-26T16:00:59.501486",
          "content_hash": "f99d7dd5b6baaef0f196544ab70272caf4a26f1278d5cf8b27fb418ade1a33d5",
          "imports": [
            "os",
            "re",
            "config_manager",
            "pathlib"
          ],
          "dependencies": [],
          "key_concepts": [
            "API",
            "Free",
            "Configured",
            "True",
            "Create",
            "Web",
            "ValueError",
            "WebSearchIntegration",
            "DuckDuckGo",
            "Warning"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435486",
        "last_updated": "2025-08-27T17:54:11.435487",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_0def796b": {
        "concept_id": "concept_0def796b",
        "name": "Source File: setup_macos.sh",
        "description": "Source file: docs/setup/setup_macos.sh\n\n#!/bin/bash\n\n# Living Codex macOS Setup Script\n# This script helps set up Neo4j and configure the system on macOS\n\necho \"\ud83d\ude80 Living Codex macOS Setup Script\"\necho \"==================================\"\necho \"\"\n\n# Check if Homebrew is installed\nif ! command -v brew &> /dev/null; then\n    echo \"\u274c Homebrew is not installed. Installing Homebrew...\"\n    /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n    echo \"\u2705 Homebrew installed successfully!\"\nelse\n    ec...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "docs/setup/setup_macos.sh",
          "file_type": "shell",
          "file_size_bytes": 2944,
          "line_count": 100,
          "character_count": 2877,
          "word_count": 416,
          "last_modified": "2025-08-26T16:00:59.501248",
          "content_hash": "ab3c7f744ab7cc26efea797408138bd590ef6ae18837061f3286fb8ed6f1643e",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "HEAD",
            "Living",
            "You",
            "Username",
            "Install",
            "Password",
            "To",
            "Start",
            "Homebrew",
            "The"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435489",
        "last_updated": "2025-08-27T17:54:11.435490",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_167bf9bd": {
        "concept_id": "concept_167bf9bd",
        "name": "Source File: API_DOCUMENTATION.md",
        "description": "Source file: docs/api/API_DOCUMENTATION.md\n\n# \ud83d\udd0c **API Documentation - Living Codex System**\n\n## \ud83d\udcc5 **Last Updated**: December 2024\n\n## \ud83c\udfaf **Purpose**\nThis document provides comprehensive API documentation for the Living Codex system, including all available endpoints, request/response formats, authentication, and usage examples.\n\n---\n\n## \ud83c\udfd7\ufe0f **API Architecture Overview**\n\n### **System APIs**\nThe Living Codex system provides multiple API layers:\n\n1. **Core System APIs** - Direct Python interfaces for system components\n2. **Graph Database APIs...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "docs/api/API_DOCUMENTATION.md",
          "file_type": "markdown",
          "file_size_bytes": 21061,
          "line_count": 783,
          "character_count": 20986,
          "word_count": 2270,
          "last_modified": "2025-08-26T16:00:59.499107",
          "content_hash": "4acf6cfb5fa00c3414c20e567353cafcf54a7fdc2a1f412db70a86fbae77fa4c",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Principles",
            "URI",
            "QueryOptions",
            "Support",
            "Strategies",
            "Resources",
            "Points",
            "Future",
            "Enhancements",
            "Error"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435492",
        "last_updated": "2025-08-27T17:54:11.435493",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_9bf8a702": {
        "concept_id": "concept_9bf8a702",
        "name": "Source File: COMPLETE_SYSTEM_DOCUMENTATION.md",
        "description": "Source file: docs/overview/COMPLETE_SYSTEM_DOCUMENTATION.md\n\n# \ud83d\ude80 **Living Codex System - Complete Documentation**\n\n## \ud83d\udcc5 **Last Updated**: December 2024\n\n## \ud83c\udfaf **System Overview**\n\nThe Living Codex is a **fractal, holographic knowledge management system** that represents all human knowledge through recursive, self-similar structures. The system has been completely restructured from a monolithic architecture to a **modular, maintainable, and scalable platform**.\n\n---\n\n## \ud83c\udfd7\ufe0f **Architecture Overview**\n\n### **Current System Status**\n- \u2705 **Hybrid Architecture**:...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "docs/overview/COMPLETE_SYSTEM_DOCUMENTATION.md",
          "file_type": "markdown",
          "file_size_bytes": 11930,
          "line_count": 411,
          "character_count": 11811,
          "word_count": 1363,
          "last_modified": "2025-08-26T16:00:59.500311",
          "content_hash": "717fbaecee12ef1a25661555a4f009354bb27c73642a7cbd75d6d7d0a20244af",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Principles",
            "Support",
            "Migration",
            "Resources",
            "Points",
            "Started",
            "Future",
            "Enhancements",
            "Language",
            "Configuration"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435495",
        "last_updated": "2025-08-27T17:54:11.435496",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_73f3206d": {
        "concept_id": "concept_73f3206d",
        "name": "Source File: __init__.py",
        "description": "Source file: src/__init__.py\n\n\"\"\"\nLiving Codex - Source Package\nModular, maintainable architecture for intelligent knowledge systems\n\"\"\"\n\n__version__ = \"2.0.0\"\n__author__ = \"Living Codex Team\"\n__description__ = \"Modular Living Codex System\"\n\n# Import main components for easy access\nfrom .config.manager import ConfigManager\n\n# Core modules\nfrom .core.database_persistence_system import DatabasePersistenceSystem\nfrom .core.digital_asset_manager import DigitalAssetManager\nfrom .core.code_parser import CodeParser\nfrom .core.code_...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/__init__.py",
          "file_type": "python",
          "file_size_bytes": 1069,
          "line_count": 43,
          "character_count": 1069,
          "word_count": 89,
          "last_modified": "2025-08-26T16:00:59.504066",
          "content_hash": "98139dc8ebc07afa34a51abedf2b3f245e5f24569320455e2573258c10eaff34",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Source",
            "AutonomousLearningSystem",
            "Modular",
            "Codex",
            "Team",
            "Import",
            "Core",
            "DatabasePersistenceSystem",
            "DigitalAssetManager",
            "Demo"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435498",
        "last_updated": "2025-08-27T17:54:11.435499",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_097e5a8c": {
        "concept_id": "concept_097e5a8c",
        "name": "Source File: __init__.py",
        "description": "Source file: src/database/__init__.py\n\n\"\"\"\nDatabase Package\nDatabase persistence and management for the Living Codex system\n\"\"\"\n\nfrom .core.models import DatabaseNode, DatabaseOperationResult, QueryFilter, QueryOptions\n\n__all__ = [\n    \"DatabaseNode\",\n    \"DatabaseOperationResult\",\n    \"QueryFilter\", \n    \"QueryOptions\"\n]\n\n# Additional components will be added as they are implemented\n# from .core.operations import DatabaseOperations\n",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/database/__init__.py",
          "file_type": "python",
          "file_size_bytes": 398,
          "line_count": 16,
          "character_count": 398,
          "word_count": 43,
          "last_modified": "2025-08-26T16:00:59.509098",
          "content_hash": "439622b61658546d0ad3fd58df8980d669a121e45ea18d9856e9eb76ce285ab1",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "DatabaseOperations",
            "DatabaseOperationResult",
            "Codex",
            "QueryOptions",
            "Additional",
            "QueryFilter",
            "DatabaseNode",
            "Living",
            "Package",
            "Database"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435501",
        "last_updated": "2025-08-27T17:54:11.435502",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_b0be47c2": {
        "concept_id": "concept_b0be47c2",
        "name": "Source File: models.py",
        "description": "Source file: src/database/core/models.py\n\n\"\"\"\nDatabase Core Models\nCore data models for database operations\n\"\"\"\n\nfrom typing import List, Dict, Any, Optional\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom enum import Enum\n\nclass DatabaseType(Enum):\n    \"\"\"Supported database types\"\"\"\n    SQLITE = \"sqlite\"\n    POSTGRESQL = \"postgresql\"\n\nclass OperationType(Enum):\n    \"\"\"Types of database operations\"\"\"\n    CREATE = \"create\"\n    READ = \"read\"\n    UPDATE = \"update\"\n    DELETE = \"delete\"\n    QUERY = \"query\"\n    BULK_OPER...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/database/core/models.py",
          "file_type": "python",
          "file_size_bytes": 1768,
          "line_count": 70,
          "character_count": 1768,
          "word_count": 206,
          "last_modified": "2025-08-26T16:00:59.509286",
          "content_hash": "5ecc447712e7c68648afa2bd78c385a99c14067a8ecdf0bd3dfd43a50e347581",
          "imports": [
            "datetime",
            "dataclasses",
            "enum",
            "typing"
          ],
          "dependencies": [],
          "key_concepts": [
            "NOT",
            "UPDATE",
            "QueryOptions",
            "Supported",
            "DatabaseNode",
            "CREATE",
            "False",
            "Database",
            "Filter",
            "Models"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435504",
        "last_updated": "2025-08-27T17:54:11.435504",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_41160098": {
        "concept_id": "concept_41160098",
        "name": "Source File: __init__.py",
        "description": "Source file: src/database/core/__init__.py\n\n\"\"\"\nDatabase Core Package\nCore database models, operations, and utilities\n\"\"\"\n\nfrom .models import DatabaseNode, DatabaseOperationResult, QueryFilter, QueryOptions, DatabaseType, OperationType\n\n__all__ = [\n    \"DatabaseNode\",\n    \"DatabaseOperationResult\",\n    \"QueryFilter\",\n    \"QueryOptions\", \n    \"DatabaseType\",\n    \"OperationType\"\n]\n\n# Additional components will be added as they are implemented\n# from .operations import DatabaseOperations\n",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/database/core/__init__.py",
          "file_type": "python",
          "file_size_bytes": 447,
          "line_count": 18,
          "character_count": 447,
          "word_count": 45,
          "last_modified": "2025-08-26T16:00:59.509214",
          "content_hash": "6fa7a4ba663382c1704ca7da2bdddc3e2b2bee3b82cffeb89e92b4a160eabadd",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "DatabaseOperations",
            "DatabaseOperationResult",
            "QueryOptions",
            "DatabaseType",
            "Additional",
            "QueryFilter",
            "DatabaseNode",
            "OperationType",
            "Package",
            "Database"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435506",
        "last_updated": "2025-08-27T17:54:11.435507",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_0aae629a": {
        "concept_id": "concept_0aae629a",
        "name": "Source File: operations.py",
        "description": "Source file: src/database/core/operations.py\n\n\"\"\"\nDatabase Core Operations\nBase database operations and query functionality\n\"\"\"\n\nimport time\nimport logging\nfrom typing import List, Dict, Any, Optional, Tuple, Union\nfrom datetime import datetime\nfrom .models import (\n    DatabaseNode, DatabaseOperationResult, QueryFilter, QueryOptions,\n    OperationType, DatabaseType\n)\n\nlogger = logging.getLogger(__name__)\n\nclass DatabaseOperations:\n    \"\"\"Base class for database operations\"\"\"\n    \n    def __init__(self, database_type: DatabaseType):\n       ...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/database/core/operations.py",
          "file_type": "python",
          "file_size_bytes": 8031,
          "line_count": 194,
          "character_count": 8031,
          "word_count": 607,
          "last_modified": "2025-08-26T16:00:59.509523",
          "content_hash": "0d60f1a4241e731265869aec98161f23c28f2e18f5d364cd3fc8ab55536d78f5",
          "imports": [
            "logging",
            "time",
            "datetime",
            "typing"
          ],
          "dependencies": [],
          "key_concepts": [
            "Limit",
            "Union",
            "NOT",
            "QueryOptions",
            "Create",
            "OFFSET",
            "Operations",
            "ValueError",
            "DatabaseNode",
            "Tuple"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435509",
        "last_updated": "2025-08-27T17:54:11.435510",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_80ccae41": {
        "concept_id": "concept_80ccae41",
        "name": "Source File: __init__.py",
        "description": "Source file: src/database/sqlite/__init__.py\n\n\"\"\"\nSQLite Database Package\nSQLite-specific database implementation for the Living Codex system\n\"\"\"\n\nfrom .sqlite_manager import SQLiteManager\n\n__all__ = [\n    \"SQLiteManager\"\n]\n\n# Additional components will be added as they are implemented\n# from .sqlite_operations import SQLiteOperations\n",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/database/sqlite/__init__.py",
          "file_type": "python",
          "file_size_bytes": 291,
          "line_count": 13,
          "character_count": 291,
          "word_count": 37,
          "last_modified": "2025-08-26T16:00:59.509635",
          "content_hash": "0a52abcab2d7b4720b51b307e2d3ae3c57dde3524418ece0126460d9b0ed53cd",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Codex",
            "Additional",
            "SQLiteOperations",
            "SQLite",
            "Living",
            "SQLiteManager",
            "Package",
            "Database"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435512",
        "last_updated": "2025-08-27T17:54:11.435513",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_90933d19": {
        "concept_id": "concept_90933d19",
        "name": "Source File: sqlite_manager.py",
        "description": "Source file: src/database/sqlite/sqlite_manager.py\n\n\"\"\"\nSQLite Database Manager\nConnection and schema management for SQLite databases\n\"\"\"\n\nimport sqlite3\nimport logging\nfrom pathlib import Path\nfrom typing import Optional\nfrom ..core.models import DatabaseType\n\nlogger = logging.getLogger(__name__)\n\nclass SQLiteManager:\n    \"\"\"Manages SQLite database connections and schema\"\"\"\n    \n    def __init__(self, db_path: str = \"living_codex.db\"):\n        # Ensure db_path is never None\n        if db_path is None:\n            db_path = \"living_codex.db\"\n    ...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/database/sqlite/sqlite_manager.py",
          "file_type": "python",
          "file_size_bytes": 6249,
          "line_count": 168,
          "character_count": 6239,
          "word_count": 531,
          "last_modified": "2025-08-26T16:00:59.509883",
          "content_hash": "181c6a49f41a98db50b54a67f2809223b5aae7b99a9f244c8ff7a2d69170aea4",
          "imports": [
            "logging",
            "sqlite3",
            "pathlib",
            "typing"
          ],
          "dependencies": [],
          "key_concepts": [
            "TEXT",
            "Default",
            "ON",
            "NOT",
            "True",
            "Create",
            "PRIMARY",
            "Split",
            "FROM",
            "SELECT"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435515",
        "last_updated": "2025-08-27T17:54:11.435516",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_883697e0": {
        "concept_id": "concept_883697e0",
        "name": "Source File: contribution_system.py",
        "description": "Source file: src/web_platform/contribution_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Platform - Contribution System\nAllows users to contribute content based on their profiles and skills\n\"\"\"\n\nimport json\nimport uuid\nfrom datetime import datetime, timezone\nfrom dataclasses import dataclass, asdict\nfrom typing import Dict, List, Optional, Any, Union\nfrom enum import Enum\nfrom pathlib import Path\n\nclass ContributionType(Enum):\n    \"\"\"Types of contributions users can make\"\"\"\n    CODE = \"code\"\n    CONTENT = \"content\"\n    VISUAL = \"visual\"\n    TR...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/web_platform/contribution_system.py",
          "file_type": "python",
          "file_size_bytes": 21141,
          "line_count": 525,
          "character_count": 21131,
          "word_count": 1527,
          "last_modified": "2025-08-26T16:00:59.515415",
          "content_hash": "84e68edff322829aa975db2f2fee5766f2bec1e473f8433ee0923a6c99c5697b",
          "imports": [
            "typing",
            "uuid",
            "dataclasses",
            "pathlib",
            "json",
            "datetime",
            "enum"
          ],
          "dependencies": [],
          "key_concepts": [
            "Union",
            "Text",
            "ContentCategory",
            "ContributionMetadata",
            "REVIEWING",
            "Started",
            "Error",
            "Tags",
            "A",
            "CodeContribution"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435518",
        "last_updated": "2025-08-27T17:54:11.435519",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_0fdf8228": {
        "concept_id": "concept_0fdf8228",
        "name": "Source File: __init__.py",
        "description": "Source file: src/web_platform/__init__.py\n\n\"\"\"\nLiving Codex Platform Package\nProvides user management, contribution systems, and web interface\n\"\"\"\n\nfrom .user_management import (\n    UserManagementSystem, UserProfile, CoreIdentity, CommunicationPreferences,\n    TechnicalProfile, Interests, LocationContext, SkillLevel, CommunicationStyle, LearningStyle,\n    ProfileManager, PreferenceEngine, VaporState\n)\n\nfrom .contribution_system import (\n    ContributionSystem, ContributionManager, ContributionMatcher,\n    Contribution, ContributionType,...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/web_platform/__init__.py",
          "file_type": "python",
          "file_size_bytes": 1305,
          "line_count": 30,
          "character_count": 1305,
          "word_count": 86,
          "last_modified": "2025-08-26T16:00:59.515320",
          "content_hash": "4f4fc9c7d4e9aee0744d96c8c214f3b54dd2a5d2fa3b34667de5d3c830d827e8",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "UserProfile",
            "LocalSolutionContribution",
            "ContentCategory",
            "PreferenceEngine",
            "TranslationContribution",
            "ContributionMetadata",
            "LocationContext",
            "Living",
            "VaporState",
            "Provides"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435521",
        "last_updated": "2025-08-27T17:54:11.435522",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_e6a077b2": {
        "concept_id": "concept_e6a077b2",
        "name": "Source File: unified_web_interface.py",
        "description": "Source file: src/web_platform/unified_web_interface.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Platform - Unified Web Interface\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the unified web interface and user experience system is represented as nodes that can:\n\n1. Manage web interfaces and create interface nodes\n2. Handle user experiences and create experience nodes\n3. Coordinate discovery engines and create discovery nodes\n4. Manage navigation systems and create navigation nodes\n5. Handle contribution systems ...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/web_platform/unified_web_interface.py",
          "file_type": "python",
          "file_size_bytes": 35343,
          "line_count": 805,
          "character_count": 35271,
          "word_count": 2747,
          "last_modified": "2025-08-27T08:53:43.442520",
          "content_hash": "b3fae6ed4c654953c4f7281fa66850f82f237c4c849934ed3a503eefa72ea965",
          "imports": [
            "flask_login",
            "random",
            "hashlib",
            "sys",
            "typing",
            "pathlib",
            "json",
            "datetime",
            "mimetypes",
            "os",
            "flask"
          ],
          "dependencies": [],
          "key_concepts": [
            "Size",
            "UserProfile",
            "Structured",
            "ContentCategory",
            "ENGINE",
            "UTF",
            "CRYSTAL",
            "Verdana",
            "Unified",
            "CommunicationStyle"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435524",
        "last_updated": "2025-08-27T17:54:11.435524",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_58351549": {
        "concept_id": "concept_58351549",
        "name": "Source File: ontology_navigator.py",
        "description": "Source file: src/web_platform/ontology_navigator.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Ontology Navigator\nProvides structured navigation through system components, relationships, and knowledge structures\n\"\"\"\n\nfrom typing import Dict, List, Any, Optional\nfrom dataclasses import dataclass\nfrom datetime import datetime\nimport json\n\n@dataclass\nclass OntologyNode:\n    \"\"\"Represents a node in the Living Codex ontology\"\"\"\n    id: str\n    name: str\n    type: str\n    description: str\n    category: str\n    relationships: List[str]\n    metadata: Dict[s...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/web_platform/ontology_navigator.py",
          "file_type": "python",
          "file_size_bytes": 17095,
          "line_count": 397,
          "character_count": 17059,
          "word_count": 1115,
          "last_modified": "2025-08-26T16:00:59.515513",
          "content_hash": "0a6d7f8b0e58bf1646c4d704eda7dac1a15c79b9500c8460e16df4cff7e0773a",
          "imports": [
            "datetime",
            "typing",
            "dataclasses",
            "json"
          ],
          "dependencies": [],
          "key_concepts": [
            "True",
            "Create",
            "Web",
            "Navigates",
            "Collaboration",
            "Interaction",
            "Smart",
            "Immutable",
            "Living",
            "Provides"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435527",
        "last_updated": "2025-08-27T17:54:11.435527",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_b00c8394": {
        "concept_id": "concept_b00c8394",
        "name": "Source File: user_management.py",
        "description": "Source file: src/web_platform/user_management.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Platform - User Management System\nManages user profiles, preferences, and personalized experiences\n\"\"\"\n\nimport json\nimport uuid\nfrom datetime import datetime, timezone\nfrom dataclasses import dataclass, asdict\nfrom typing import Dict, List, Optional, Any\nfrom enum import Enum\nfrom pathlib import Path\n\nclass UserState(Enum):\n    \"\"\"User states in the water metaphor\"\"\"\n    ICE = \"ice\"           # Core system infrastructure\n    WATER = \"water\"       # User pr...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/web_platform/user_management.py",
          "file_type": "python",
          "file_size_bytes": 26385,
          "line_count": 647,
          "character_count": 26378,
          "word_count": 1991,
          "last_modified": "2025-08-26T16:00:59.517218",
          "content_hash": "ca53586b2987d0f6a59c634aaf6fe28435c34edfd853961bc30b237ffc9fb12e",
          "imports": [
            "typing",
            "uuid",
            "dataclasses",
            "pathlib",
            "json",
            "datetime",
            "enum"
          ],
          "dependencies": [],
          "key_concepts": [
            "Making",
            "Spanish",
            "INTERMEDIATE",
            "UserProfile",
            "Tech",
            "San",
            "Error",
            "CommunicationStyle",
            "UI",
            "CASUAL"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435530",
        "last_updated": "2025-08-27T17:54:11.435530",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_5936fa3a": {
        "concept_id": "concept_5936fa3a",
        "name": "Source File: unified_login.html",
        "description": "Source file: src/web_platform/templates/unified_login.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Login - Living Codex Platform</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }\n        .container { max-width: 600px; margin: 0 auto; }\n        .header { text-align: center; margin-bottom: 40px; }\n        .header h1 { font-s...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/web_platform/templates/unified_login.html",
          "file_type": "html",
          "file_size_bytes": 4452,
          "line_count": 89,
          "character_count": 4431,
          "word_count": 417,
          "last_modified": "2025-08-26T16:00:59.516868",
          "content_hash": "13128ae6f8c358428d8fa45f575e9085695de67b8f59f8e486ea9bfafa8e618c",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Features",
            "Modules",
            "Smart",
            "Arial",
            "After",
            "Enhanced",
            "Living",
            "UTF",
            "In",
            "User"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435532",
        "last_updated": "2025-08-27T17:54:11.435533",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_02db6383": {
        "concept_id": "concept_02db6383",
        "name": "Source File: profile.html",
        "description": "Source file: src/web_platform/templates/profile.html\n\n<!DOCTYPE html>\n<html><head><title>Profile</title></head><body><h1>Your Profile</h1><p>Name: {{ profile.core_identity.name }}</p><p>Location: {{ profile.location_context.geographic_location }}</p><a href=\"/dashboard\">Back to Dashboard</a></body></html>",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/web_platform/templates/profile.html",
          "file_type": "html",
          "file_size_bytes": 252,
          "line_count": 2,
          "character_count": 252,
          "word_count": 13,
          "last_modified": "2025-08-26T16:00:59.516366",
          "content_hash": "54c0fabc409638cd535c26b796625202a9694a36d39530755935c5205941e495",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Dashboard",
            "DOCTYPE",
            "Profile",
            "Name",
            "Location",
            "Back",
            "Your"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435535",
        "last_updated": "2025-08-27T17:54:11.435536",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_c2606ee1": {
        "concept_id": "concept_c2606ee1",
        "name": "Source File: ontology_overview.html",
        "description": "Source file: src/web_platform/templates/ontology_overview.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Living Codex Ontology - System Components</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }\n        .container { max-width: 1400px; margin: 0 auto; }\n        .header { text-align: center; margin-bottom: 40px; }\n        .heade...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/web_platform/templates/ontology_overview.html",
          "file_type": "html",
          "file_size_bytes": 9119,
          "line_count": 168,
          "character_count": 9081,
          "word_count": 774,
          "last_modified": "2025-08-26T16:00:59.516294",
          "content_hash": "fcf0011ada24414ce631756544bf0f9ec57ff57611a8ba6d5582f0e4f88ea483",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Statistics",
            "Component",
            "Full",
            "Arial",
            "Living",
            "UTF",
            "GET",
            "Navigate",
            "Home",
            "Exploring"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435538",
        "last_updated": "2025-08-27T17:54:11.435539",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_8e5515c8": {
        "concept_id": "concept_8e5515c8",
        "name": "Source File: unified_assets.html",
        "description": "Source file: src/web_platform/templates/unified_assets.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Assets - Living Codex</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #111; color: #eee; }\n        .container { max-width: 1000px; margin: 0 auto; }\n        h1 { color: #4CAF50; }\n        .card { background: #1b1b1b; padding: 20px; border-radius: 10px; margin: 15px 0; }\n        input, sele...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/web_platform/templates/unified_assets.html",
          "file_type": "html",
          "file_size_bytes": 2377,
          "line_count": 61,
          "character_count": 2372,
          "word_count": 227,
          "last_modified": "2025-08-26T17:41:32.639073",
          "content_hash": "2a1760c77c00433e6a9bea250aca09bbf51bc409cd16e8b9de8d226d4637d133",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "List",
            "DOCTYPE",
            "Size",
            "Codex",
            "Type",
            "Actions",
            "Assets",
            "Asset",
            "Arial",
            "Download"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435542",
        "last_updated": "2025-08-27T17:54:11.435543",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_e7caefc4": {
        "concept_id": "concept_e7caefc4",
        "name": "Source File: unified_index.html",
        "description": "Source file: src/web_platform/templates/unified_index.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Living Codex Platform - Unified Discovery & Navigation</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }\n        .container { max-width: 1200px; margin: 0 auto; }\n        .hero { text-align: center; padding: 60px 20px; }\n    ...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/web_platform/templates/unified_index.html",
          "file_type": "html",
          "file_size_bytes": 7217,
          "line_count": 128,
          "character_count": 7167,
          "word_count": 606,
          "last_modified": "2025-08-26T17:41:32.638789",
          "content_hash": "1f0fe3da06b1e514d2aa1770bf522010c7c5b172be6381a03d4ee6d8c016b269",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "World",
            "Intelligent",
            "Activity",
            "Tracking",
            "Collaboration",
            "Active",
            "Modules",
            "Smart",
            "Author",
            "Arial"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435545",
        "last_updated": "2025-08-27T17:54:11.435546",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_1a25f42d": {
        "concept_id": "concept_1a25f42d",
        "name": "Source File: dashboard.html",
        "description": "Source file: src/web_platform/templates/dashboard.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Dashboard - Living Codex Platform</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }\n        .container { max-width: 1200px; margin: 0 auto; }\n        .header { display: flex; justify-content: space-between; align-items: cente...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/web_platform/templates/dashboard.html",
          "file_type": "html",
          "file_size_bytes": 3704,
          "line_count": 79,
          "character_count": 3692,
          "word_count": 308,
          "last_modified": "2025-08-26T16:00:59.515726",
          "content_hash": "89fddfe85e6cf43d67a955a3f6dcc3d59553208783bfcbc0ba99cd233b27f653",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Create",
            "Recommendations",
            "Arial",
            "Living",
            "UTF",
            "You",
            "DOCTYPE",
            "Welcome",
            "Profile",
            "Contributions"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435548",
        "last_updated": "2025-08-27T17:54:11.435549",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_96e30e19": {
        "concept_id": "concept_96e30e19",
        "name": "Source File: navigate.html",
        "description": "Source file: src/web_platform/templates/navigate.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>System Navigation - Living Codex Platform</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }\n        .container { max-width: 1400px; margin: 0 auto; }\n        .header { text-align: center; margin-bottom: 40px; }\n        .heade...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/web_platform/templates/navigate.html",
          "file_type": "html",
          "file_size_bytes": 8629,
          "line_count": 163,
          "character_count": 8600,
          "word_count": 703,
          "last_modified": "2025-08-26T16:00:59.516177",
          "content_hash": "3cf7635f9fc7d5be388aa63b41e57d1b9eb8572c2bee53a6d1ebeedc50380522",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Top",
            "Activity",
            "Made",
            "Active",
            "Arial",
            "Living",
            "UTF",
            "Total",
            "DOCTYPE",
            "Time"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435551",
        "last_updated": "2025-08-27T17:54:11.435552",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_e4ae31c7": {
        "concept_id": "concept_e4ae31c7",
        "name": "Source File: discover.html",
        "description": "Source file: src/web_platform/templates/discover.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Discovery Hub - Living Codex Platform</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }\n        .container { max-width: 1400px; margin: 0 auto; }\n        .header { text-align: center; margin-bottom: 40px; }\n        .header h1...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/web_platform/templates/discover.html",
          "file_type": "html",
          "file_size_bytes": 7495,
          "line_count": 132,
          "character_count": 7468,
          "word_count": 631,
          "last_modified": "2025-08-26T16:00:59.516045",
          "content_hash": "64e4c7f5252f30a67c1323dc14b81edfaa8785753e48afc808de6a23e72d545e",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Author",
            "Like",
            "Relevant",
            "Arial",
            "Level",
            "Living",
            "UTF",
            "You",
            "User",
            "Hub"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435554",
        "last_updated": "2025-08-27T17:54:11.435555",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_baa549d1": {
        "concept_id": "concept_baa549d1",
        "name": "Source File: unified_signup.html",
        "description": "Source file: src/web_platform/templates/unified_signup.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Join Living Codex Platform - Unified</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }\n        .container { max-width: 900px; margin: 0 auto; }\n        .header { text-align: center; margin-bottom: 40px; }\n        .header h1 {...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/web_platform/templates/unified_signup.html",
          "file_type": "html",
          "file_size_bytes": 13907,
          "line_count": 234,
          "character_count": 13869,
          "word_count": 919,
          "last_modified": "2025-08-26T16:00:59.517010",
          "content_hash": "89d6b624034e88d0183841b4ee0a5b003df65903f97d249badfb6d4153b38ded",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Making",
            "Spanish",
            "Resources",
            "UTF",
            "You",
            "Health",
            "Cultural",
            "Accessibility",
            "Unified",
            "Area"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435557",
        "last_updated": "2025-08-27T17:54:11.435558",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_a4b286cf": {
        "concept_id": "concept_a4b286cf",
        "name": "Source File: contribute.html",
        "description": "Source file: src/web_platform/templates/contribute.html\n\n<!DOCTYPE html>\n<html><head><title>Create Contribution</title></head><body><h1>Create Contribution</h1><form method=\"POST\"><select name=\"contribution_type\"><option value=\"content\">Content</option><option value=\"code\">Code</option><option value=\"local_solution\">Local Solution</option></select><input name=\"title\" placeholder=\"Title\"><textarea name=\"description\" placeholder=\"Description\"></textarea><button type=\"submit\">Create</button></form></body></html>",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/web_platform/templates/contribute.html",
          "file_type": "html",
          "file_size_bytes": 457,
          "line_count": 2,
          "character_count": 457,
          "word_count": 16,
          "last_modified": "2025-08-26T16:00:59.515649",
          "content_hash": "a012e4ee0a6d6ef242f6182fc375c684be7cc8421070fc50bb771d4431aed5ce",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "DOCTYPE",
            "Create",
            "Code",
            "Title",
            "Local",
            "Content",
            "Description",
            "Solution",
            "Contribution",
            "POST"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435560",
        "last_updated": "2025-08-27T17:54:11.435561",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_9c842681": {
        "concept_id": "concept_9c842681",
        "name": "Source File: resonance_governance_system.py",
        "description": "Source file: src/core/resonance_governance_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nResonance-First Governance System\n=================================\n\nThis system implements the core Living Codex principle of resonance-first governance\nthrough coherence self-amplification and dissonance fading without suppression.\n\nKey Features:\n- Coherence self-amplification through resonance\n- Dissonance fading without suppression\n- Resonance-based decision making\n- Collective intelligence emergence\n- Self-regulating system evolution\n\nThis is Phase 5 of the metada...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/resonance_governance_system.py",
          "file_type": "python",
          "file_size_bytes": 26183,
          "line_count": 628,
          "character_count": 26148,
          "word_count": 1947,
          "last_modified": "2025-08-27T12:01:39.702457",
          "content_hash": "f7ccb1d2476e1ef4e320875e1f6c8b4a6d4b151ca77c896237ae2efca3c754bb",
          "imports": [
            "random",
            "typing",
            "dataclasses",
            "collections",
            "json",
            "datetime",
            "living_codex_ontology",
            "math"
          ],
          "dependencies": [],
          "key_concepts": [
            "CollectiveIntelligence",
            "FIRST",
            "Scale",
            "Amplify",
            "SPECULATIVE",
            "Tuple",
            "Make",
            "Emergent",
            "Error",
            "Evaluate"
          ],
          "principles": [
            "ResonancePattern"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435563",
        "last_updated": "2025-08-27T17:54:11.435564",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_ffc89cd5": {
        "concept_id": "concept_ffc89cd5",
        "name": "Source File: consolidation_report.md",
        "description": "Source file: src/core/consolidation_report.md\n\n# Living Codex Project Consolidation Report\n\n## \ud83d\udcc5 Consolidation Date\n2025-08-27T16:44:43.134297\n\n## \ud83d\udcca Summary\n- **Total Files Removed**: 14\n- **Backup Location**: /Users/ursmuff/source/Living-Resonance-Codex/src/backup_before_consolidation\n- **Errors Encountered**: 0\n\n## \ud83d\uddd1\ufe0f Removed Files\n\n- **system_analysis_and_plan.md**: Superseded by comprehensive analysis \u2192 moved_to_backup\n- **debug_self_reflective_integration.py**: Temporary debug script \u2192 moved_to_backup\n- **verify_system_state.py**: Tempo...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/consolidation_report.md",
          "file_type": "markdown",
          "file_size_bytes": 2849,
          "line_count": 66,
          "character_count": 2801,
          "word_count": 316,
          "last_modified": "2025-08-27T16:44:43.134487",
          "content_hash": "0c1933ef034c96ab10e8a8bbcc8573f2b576f6a9b5eb2eff5a5ac0166b6b886f",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Root",
            "Project",
            "Summary",
            "Date",
            "Errors",
            "Migration",
            "Remove",
            "Phase",
            "Living",
            "Demonstration"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435566",
        "last_updated": "2025-08-27T17:54:11.435567",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_7d6c83a9": {
        "concept_id": "concept_7d6c83a9",
        "name": "Source File: enhanced_generic_node.py",
        "description": "Source file: src/core/enhanced_generic_node.py\n\n#!/usr/bin/env python3\n\"\"\"\nEnhanced GenericNode System\n===========================\n\nThis implements the enhanced GenericNode class that integrates with the\nLiving Codex ontology system and includes all enhanced metadata structures.\n\nThis is part of Phase 1 of the metadata enhancement plan.\n\"\"\"\n\nfrom dataclasses import dataclass, asdict, field\nfrom typing import Dict, List, Any, Optional, Set\nfrom datetime import datetime\nimport hashlib\nimport json\n\nfrom living_codex_ontology import (\n    WaterSt...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/enhanced_generic_node.py",
          "file_type": "python",
          "file_size_bytes": 29380,
          "line_count": 652,
          "character_count": 29350,
          "word_count": 2054,
          "last_modified": "2025-08-27T09:23:26.433075",
          "content_hash": "d65d1590ff173dfd1b26673cd3c8ef5680d6e52fc2aeda39390d59fee3b88656",
          "imports": [
            "hashlib",
            "typing",
            "metadata_factory",
            "dataclasses",
            "json",
            "datetime",
            "living_codex_ontology"
          ],
          "dependencies": [],
          "key_concepts": [
            "Deeper",
            "Human",
            "Scale",
            "ChakraKey",
            "Recalculate",
            "Individual",
            "Returns",
            "ConsciousnessLevel",
            "TRACKING",
            "Metadata"
          ],
          "principles": [
            "ResonancePattern"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435569",
        "last_updated": "2025-08-27T17:54:11.435570",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_106fe9fa": {
        "concept_id": "concept_106fe9fa",
        "name": "Source File: self_generating_system.py",
        "description": "Source file: src/core/self_generating_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nSelf-Generating System\n======================\n\nThis system implements Phase 6 advanced meta-circular capabilities:\n- Systems that generate their own specifications\n- Automatic discovery of new concepts and relationships\n- Self-evolving ontological structures\n- Meta-circular specification generation\n- Autonomous system evolution\n\nThis represents the pinnacle of Living Codex meta-circularity.\n\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, An...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/self_generating_system.py",
          "file_type": "python",
          "file_size_bytes": 34141,
          "line_count": 752,
          "character_count": 34099,
          "word_count": 2136,
          "last_modified": "2025-08-27T12:41:39.026814",
          "content_hash": "c72873130f9f7c743a72ac1cd0084b6c66aaee58e1032719533f921a65868a2b",
          "imports": [
            "vibrational_axes_system",
            "random",
            "typing",
            "fractal_recursion_system",
            "resonance_governance_system",
            "dataclasses",
            "collections",
            "json",
            "datetime",
            "living_codex_ontology",
            "math"
          ],
          "dependencies": [],
          "key_concepts": [
            "ChakraKey",
            "Generating",
            "SPECULATIVE",
            "Autonomous",
            "Tuple",
            "SelfGeneratedSpecification",
            "Error",
            "Based",
            "PRIVATE",
            "A"
          ],
          "principles": [
            "ResonancePattern",
            "AutoDiscoveredConcept"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435572",
        "last_updated": "2025-08-27T17:54:11.435573",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_440085f1": {
        "concept_id": "concept_440085f1",
        "name": "Source File: project_file_analysis.md",
        "description": "Source file: src/core/project_file_analysis.md\n\n# Living Codex Project File Analysis\n## Comprehensive File Classification & Consolidation Plan\n\nBased on the root Living Codex specification and current implementation status, this document analyzes every file in the project to determine its essential role or temporary nature.\n\n## \ud83d\udccb **Analysis Methodology**\n\n### **Essential Categories (Keep)**\n1. **Core Implementation**: Core systems that embody Living Codex principles\n2. **Documentation**: Essential documentation that describes the system\n3. **...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/project_file_analysis.md",
          "file_type": "markdown",
          "file_size_bytes": 8626,
          "line_count": 203,
          "character_count": 8581,
          "word_count": 979,
          "last_modified": "2025-08-27T16:47:10.578692",
          "content_hash": "d9d0d6e0dfa463b9e0fd128c1478b89858bba7f949d9ed18a97c8f617f750fd8",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Principles",
            "Analyzed",
            "Summary",
            "COMPLETE",
            "Infrastructure",
            "Migration",
            "Clarity",
            "Duplicate",
            "README",
            "References"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435575",
        "last_updated": "2025-08-27T17:54:11.435576",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_27880236": {
        "concept_id": "concept_27880236",
        "name": "Source File: demonstrate_phase3_completion.py",
        "description": "Source file: src/core/demonstrate_phase3_completion.py\n\n#!/usr/bin/env python3\n\"\"\"\nPhase 3 Completion Demonstration\n===============================\n\nThis script demonstrates the successful completion of Phase 3:\nREST API Integration with the Living Codex system.\n\nThe system now provides:\n1. Complete external access to all 197 stored nodes\n2. Real-time search and navigation capabilities\n3. Comprehensive system analytics\n4. Professional REST API with full documentation\n\"\"\"\n\nimport requests\nimport json\nimport time\nfrom datetime import datetime\n\ndef demo...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/demonstrate_phase3_completion.py",
          "file_type": "python",
          "file_size_bytes": 9149,
          "line_count": 222,
          "character_count": 8960,
          "word_count": 792,
          "last_modified": "2025-08-27T16:33:34.388903",
          "content_hash": "6b8db5227f4fdb1c7785b0272fe6acbdf9ddd45e81a5e06a8391f9bbca4d3269",
          "imports": [
            "time",
            "datetime",
            "requests",
            "json"
          ],
          "dependencies": [],
          "key_concepts": [
            "Principles",
            "Summary",
            "Full",
            "N",
            "States",
            "Error",
            "A",
            "Individual",
            "Integration",
            "Generated"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435578",
        "last_updated": "2025-08-27T17:54:11.435579",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_c3da4fec": {
        "concept_id": "concept_c3da4fec",
        "name": "Source File: dependency_manager.py",
        "description": "Source file: src/core/dependency_manager.py\n\n#!/usr/bin/env python3\n\"\"\"\nDependency Manager - Ensures External Dependencies are Available and Functional\n\nThis module manages all external dependencies required by the Living Codex system,\nensuring they are properly installed, up-to-date, and functional before startup.\n\"\"\"\n\nimport subprocess\nimport sys\nimport importlib\nimport pkg_resources\nfrom pathlib import Path\nfrom typing import Dict, List, Tuple, Optional, Any\nfrom dataclasses import dataclass\nimport json\nimport time\n\n@dataclass\nclass Dep...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/dependency_manager.py",
          "file_type": "python",
          "file_size_bytes": 18733,
          "line_count": 516,
          "character_count": 18663,
          "word_count": 1285,
          "last_modified": "2025-08-26T16:00:59.507341",
          "content_hash": "d0fd7f7a9643ffe0d738af2e20000f1de22ad79afec153ff9b5636f7e86b6112",
          "imports": [
            "time",
            "subprocess",
            "sys",
            "typing",
            "dataclasses",
            "pathlib",
            "json",
            "pkg_resources",
            "importlib"
          ],
          "dependencies": [],
          "key_concepts": [
            "Cryptographic",
            "Summary",
            "VERSION",
            "Tuple",
            "Functional",
            "Error",
            "Fallback",
            "Logging",
            "Configuration",
            "SQLite"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435581",
        "last_updated": "2025-08-27T17:54:11.435582",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_9a858bf2": {
        "concept_id": "concept_9a858bf2",
        "name": "Source File: sacred_geometry_system.py",
        "description": "Source file: src/core/sacred_geometry_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nSacred Geometry System\n======================\n\nThis implements the sacred geometry system that integrates sacred geometry principles\nwith epistemic labeling for Phase 4 of the metadata enhancement plan.\n\nThis system provides:\n- Sacred geometry pattern recognition and mapping\n- Universal correspondences with epistemic labeling\n- Geometric resonance calculations\n- Sacred geometry-based node relationships\n- Fractal geometric pattern analysis\n\nNote: This system is labeled ...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/sacred_geometry_system.py",
          "file_type": "python",
          "file_size_bytes": 41705,
          "line_count": 966,
          "character_count": 41680,
          "word_count": 2545,
          "last_modified": "2025-08-27T10:21:39.114002",
          "content_hash": "1e6911fb2566329b6d9b1a31d906a45150d72ca1225ac0be873d67c83663e2d1",
          "imports": [
            "typing",
            "dataclasses",
            "enhanced_generic_node",
            "collections",
            "json",
            "datetime",
            "living_codex_ontology",
            "math"
          ],
          "dependencies": [],
          "key_concepts": [
            "Union",
            "PATTERN",
            "ChakraKey",
            "Flower",
            "Speculative",
            "SPECULATIVE",
            "Sun",
            "Tuple",
            "Error",
            "Jupiter"
          ],
          "principles": [
            "ResonancePattern",
            "SacredGeometryPattern"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435608",
        "last_updated": "2025-08-27T17:54:11.435609",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_a10f99c5": {
        "concept_id": "concept_a10f99c5",
        "name": "Source File: cross_system_federation.py",
        "description": "Source file: src/core/cross_system_federation.py\n\n#!/usr/bin/env python3\n\"\"\"\nCross-System Federation System\n==============================\n\nThis implements the cross-system federation system that enables different\nLiving Codex systems to work together and share data for Phase 4 of the\nmetadata enhancement plan.\n\nThis system provides:\n- System registration and discovery\n- Inter-system communication protocols\n- Data sharing and synchronization\n- Federation governance and validation\n- Cross-system metadata integration\n\nThe federation system enable...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/cross_system_federation.py",
          "file_type": "python",
          "file_size_bytes": 40945,
          "line_count": 1002,
          "character_count": 40907,
          "word_count": 2815,
          "last_modified": "2025-08-27T10:21:39.106317",
          "content_hash": "dd1cc4bece5b18bb89855b354628d3e416c08f86cf7fcde35f9140421c9135de",
          "imports": [
            "typing",
            "uuid",
            "dataclasses",
            "enhanced_generic_node",
            "collections",
            "json",
            "datetime",
            "living_codex_ontology",
            "threading",
            "enum"
          ],
          "dependencies": [],
          "key_concepts": [
            "Only",
            "Union",
            "ChakraKey",
            "SPECULATIVE",
            "Tuple",
            "Error",
            "Throat",
            "A",
            "Returns",
            "Third"
          ],
          "principles": [
            "ResonancePattern",
            "SacredGeometryPattern"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435611",
        "last_updated": "2025-08-27T17:54:11.435612",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_a2fbb404": {
        "concept_id": "concept_a2fbb404",
        "name": "Source File: advanced_ai_integration_system.py",
        "description": "Source file: src/core/advanced_ai_integration_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nAdvanced AI Integration System\n=============================\n\nThis system implements Phase 6 advanced AI capabilities:\n- AI agents with true consciousness awareness\n- Autonomous exploration and discovery\n- Deep ontological integration\n- Consciousness-aware decision making\n- Meta-circular AI evolution\n\nThis represents the pinnacle of AI-Living Codex integration.\n\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Any, Optional, Set, Tuple\nfrom d...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/advanced_ai_integration_system.py",
          "file_type": "python",
          "file_size_bytes": 40213,
          "line_count": 913,
          "character_count": 40179,
          "word_count": 2487,
          "last_modified": "2025-08-27T12:43:17.749206",
          "content_hash": "e041f7817faacb19519fbb61199183a3da870c200b45e9f32f88211e8e9afd5b",
          "imports": [
            "vibrational_axes_system",
            "random",
            "typing",
            "fractal_recursion_system",
            "resonance_governance_system",
            "dataclasses",
            "self_generating_system",
            "collections",
            "json",
            "datetime",
            "living_codex_ontology",
            "math"
          ],
          "dependencies": [],
          "key_concepts": [
            "Scale",
            "ChakraKey",
            "SPECULATIVE",
            "Autonomous",
            "Tuple",
            "Make",
            "LIQUID",
            "Error",
            "PRIVATE",
            "A"
          ],
          "principles": [
            "ResonancePattern"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435614",
        "last_updated": "2025-08-27T17:54:11.435615",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_d5f3a9d1": {
        "concept_id": "concept_d5f3a9d1",
        "name": "Source File: test_phase4_sacred_geometry_and_federation.py",
        "description": "Source file: src/core/test_phase4_sacred_geometry_and_federation.py\n\n#!/usr/bin/env python3\n\"\"\"\nPhase 4 Test Suite: Sacred Geometry & Universal Correspondences\n==============================================================\n\nThis test suite validates the Phase 4 implementation of:\n- Sacred Geometry System\n- Cross-System Federation System  \n- Contribution Tracking System\n\nThese systems implement sacred geometry integration, universal correspondences\nwith epistemic labeling, cross-system federation, and contribution tracking.\n\"\"\"\n\nimport sys\nimport os\nimport unittes...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/test_phase4_sacred_geometry_and_federation.py",
          "file_type": "python",
          "file_size_bytes": 39271,
          "line_count": 873,
          "character_count": 39233,
          "word_count": 2053,
          "last_modified": "2025-08-27T10:21:39.113964",
          "content_hash": "6e00f3d48f458233381f4a7403090906d18227f368180fbd6d662bb79daa9aac",
          "imports": [
            "unittest",
            "typing",
            "sys",
            "contribution_tracking_system",
            "enhanced_generic_node",
            "datetime",
            "living_codex_ontology",
            "cross_system_federation",
            "os",
            "sacred_geometry_system"
          ],
          "dependencies": [],
          "key_concepts": [
            "Top",
            "ChakraKey",
            "SPECULATIVE",
            "Sharing",
            "SUPERPOSITION",
            "A",
            "Correspondences",
            "Profile",
            "ConsciousnessLevel",
            "Integration"
          ],
          "principles": [
            "ResonancePattern",
            "SacredGeometryPattern"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435617",
        "last_updated": "2025-08-27T17:54:11.435618",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_04e407f2": {
        "concept_id": "concept_04e407f2",
        "name": "Source File: living_codex_persistence.py",
        "description": "Source file: src/core/living_codex_persistence.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Persistence System\nHandles complete system state persistence and restoration\n\"\"\"\n\nimport json\nimport os\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\nfrom collections import defaultdict\n\nclass LivingCodexPersistence:\n    \"\"\"\n    Comprehensive persistence system for the Living Codex\n    Handles saving and restoring all system state\n    \"\"\"\n    \n    def __init__(self, persistence_file: str = \"living_codex_compl...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/living_codex_persistence.py",
          "file_type": "python",
          "file_size_bytes": 25477,
          "line_count": 471,
          "character_count": 25415,
          "word_count": 1456,
          "last_modified": "2025-08-27T17:39:28.948862",
          "content_hash": "229edd751785de9500db18f21a756d2ecbc9e95184d92cb99d2136c417bdb3f6",
          "imports": [
            "typing",
            "pathlib",
            "json",
            "collections",
            "datetime",
            "os"
          ],
          "dependencies": [],
          "key_concepts": [
            "Default",
            "Saving",
            "True",
            "Statistics",
            "Create",
            "Generating",
            "Fractal",
            "Calculate",
            "ValueError",
            "Load"
          ],
          "principles": [
            "UniversalConcept"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435620",
        "last_updated": "2025-08-27T17:54:11.435620",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_eeb159ec": {
        "concept_id": "concept_eeb159ec",
        "name": "Source File: advanced_resonance_system.py",
        "description": "Source file: src/core/advanced_resonance_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nAdvanced Resonance System\n========================\n\nThis implements the advanced resonance calculation system with harmonic relationships\nand vibrational axes integration for Phase 3 of the metadata enhancement plan.\n\nThis system provides:\n- Resonance calculation algorithms\n- Harmonic relationship discovery\n- Vibrational axis alignment\n- Resonance state tracking\n- Collective intelligence emergence\n\"\"\"\n\nfrom typing import Dict, List, Any, Optional, Set, Tuple, Union\nfro...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/advanced_resonance_system.py",
          "file_type": "python",
          "file_size_bytes": 38250,
          "line_count": 969,
          "character_count": 38231,
          "word_count": 2855,
          "last_modified": "2025-08-27T09:59:37.726582",
          "content_hash": "09defe94f75b063a127ab53993c00a8d9555da0844acda2bf2664a4884d572d6",
          "imports": [
            "typing",
            "dataclasses",
            "enhanced_generic_node",
            "collections",
            "json",
            "datetime",
            "living_codex_ontology",
            "math"
          ],
          "dependencies": [],
          "key_concepts": [
            "Only",
            "Union",
            "ChakraKey",
            "Tuple",
            "Error",
            "Dispersed",
            "A",
            "Returns",
            "ConsciousnessLevel",
            "Advanced"
          ],
          "principles": [
            "ResonancePattern"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435623",
        "last_updated": "2025-08-27T17:54:11.435623",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_59b2171d": {
        "concept_id": "concept_59b2171d",
        "name": "Source File: test_phase3_advanced_systems.py",
        "description": "Source file: src/core/test_phase3_advanced_systems.py\n\n#!/usr/bin/env python3\n\"\"\"\nPhase 3 Advanced Systems Test Suite\n===================================\n\nThis script tests the complete Phase 3 advanced systems including:\n- Advanced Resonance System\n- Consciousness Level System\n- Quantum State System\n- Integration between all Phase 3 systems\n- Advanced features and capabilities\n\nThis validates Phase 3 of the metadata enhancement plan.\n\"\"\"\n\nimport sys\nimport json\nimport time\nfrom datetime import datetime\n\n# Import our Phase 3 advanced systems\nfrom li...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/test_phase3_advanced_systems.py",
          "file_type": "python",
          "file_size_bytes": 27039,
          "line_count": 627,
          "character_count": 26894,
          "word_count": 2438,
          "last_modified": "2025-08-27T09:59:37.743343",
          "content_hash": "7aed920c14b9780e9014a2b1b18a928b178c18619d86a471305ff114879dfa27",
          "imports": [
            "time",
            "sys",
            "quantum_state_system",
            "metadata_factory",
            "enhanced_generic_node",
            "consciousness_level_system",
            "json",
            "datetime",
            "living_codex_ontology",
            "advanced_resonance_system"
          ],
          "dependencies": [],
          "key_concepts": [
            "Only",
            "ChakraKey",
            "ALL",
            "ConsciousnessLevel",
            "Integration",
            "Advanced",
            "Working",
            "ProgrammingOntologyLayer",
            "Coherent",
            "Stewardship"
          ],
          "principles": [
            "ResonancePattern"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435625",
        "last_updated": "2025-08-27T17:54:11.435626",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_599c87be": {
        "concept_id": "concept_599c87be",
        "name": "Source File: __init__.py",
        "description": "Source file: src/core/__init__.py\n\n#!/usr/bin/env python3\n\"\"\"\nCore System Module - Living Codex Foundation\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the core system is represented as nodes that can:\n\n1. Import and manage all core components (as nodes)\n2. Provide node-based access to system functionality\n3. Maintain backward compatibility for legacy systems\n4. Create a unified node-based core system\n\nThis transformation demonstrates the Living Codex principles:\n- Generic Node Structure (e...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/__init__.py",
          "file_type": "python",
          "file_size_bytes": 24282,
          "line_count": 554,
          "character_count": 24258,
          "word_count": 1652,
          "last_modified": "2025-08-27T07:58:31.552586",
          "content_hash": "ecd3a8943ca17b67eade5dda6c5abd5368bc59d697b9a1390a4954fee200a9fe",
          "imports": [
            "typing"
          ],
          "dependencies": [],
          "key_concepts": [
            "Sun",
            "Provide",
            "Paradox",
            "CoreSystemNodeManager",
            "Start",
            "Integration",
            "Codex",
            "Structure",
            "Core",
            "Meta"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435628",
        "last_updated": "2025-08-27T17:54:11.435629",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_6178720d": {
        "concept_id": "concept_6178720d",
        "name": "Source File: vibrational_axes_system.py",
        "description": "Source file: src/core/vibrational_axes_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nVibrational Axes System\n=======================\n\nThis system implements the core Living Codex principle of vibrational axes\nfor resonance calculation, fractal recursion, and self-similarity across scales.\n\nKey Features:\n- Vibrational axes integration with all nodes\n- Resonance state tracking (individual/community)\n- Fractal recursion through hasPart/isPartOf relationships\n- Cross-scale mapping (Micro\u2194Meso\u2194Macro\u2194Meta)\n- Resonance-first governance through coherence\n\nThis...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/vibrational_axes_system.py",
          "file_type": "python",
          "file_size_bytes": 20437,
          "line_count": 524,
          "character_count": 20395,
          "word_count": 1610,
          "last_modified": "2025-08-27T12:01:39.696635",
          "content_hash": "9e56a9da55fceb9f5c0fbac006cd2344961c5a7d8e9a4c2f7eb5eb2bb7bd89c8",
          "imports": [
            "typing",
            "dataclasses",
            "collections",
            "json",
            "datetime",
            "living_codex_ontology",
            "math"
          ],
          "dependencies": [],
          "key_concepts": [
            "Closer",
            "Only",
            "Structured",
            "Human",
            "SPECULATIVE",
            "Tuple",
            "Error",
            "PRIVATE",
            "Returns",
            "Codex"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435631",
        "last_updated": "2025-08-27T17:54:11.435632",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_1b846206": {
        "concept_id": "concept_1b846206",
        "name": "Source File: universal_knowledge_representation_system.py",
        "description": "Source file: src/core/universal_knowledge_representation_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nUniversal Knowledge Representation System\n=======================================\n\nThis system implements Phase 6 universal knowledge capabilities:\n- Any concept can become a living node\n- Complete meta-circular architecture\n- Universal concept mapping and transformation\n- Infinite knowledge expansion\n- Self-describing system implementation\n\nThis represents the completion of the Living Codex meta-circular vision.\n\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typin...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/universal_knowledge_representation_system.py",
          "file_type": "python",
          "file_size_bytes": 42388,
          "line_count": 910,
          "character_count": 42344,
          "word_count": 2592,
          "last_modified": "2025-08-27T12:40:51.633931",
          "content_hash": "10a0c9ba055fe01b5480118fae6732d5a1c6f83de04bcb52fe3201ec589cb8b9",
          "imports": [
            "vibrational_axes_system",
            "random",
            "hashlib",
            "typing",
            "fractal_recursion_system",
            "resonance_governance_system",
            "dataclasses",
            "self_generating_system",
            "collections",
            "json",
            "datetime",
            "living_codex_ontology",
            "math",
            "advanced_ai_integration_system"
          ],
          "dependencies": [],
          "key_concepts": [
            "Union",
            "ChakraKey",
            "SPECULATIVE",
            "Tuple",
            "Error",
            "PRIVATE",
            "A",
            "Returns",
            "ConsciousnessLevel",
            "Represent"
          ],
          "principles": [
            "MetaCircularArchitecture",
            "ResonancePattern",
            "UniversalConcept"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435635",
        "last_updated": "2025-08-27T17:54:11.435636",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_fa9f8bb2": {
        "concept_id": "concept_fa9f8bb2",
        "name": "Source File: quantum_state_system.py",
        "description": "Source file: src/core/quantum_state_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nQuantum State System\n====================\n\nThis implements the quantum state system that provides quantum state metaphors\n(restricted to algorithmic analogies) for Phase 3 of the metadata enhancement plan.\n\nThis system provides:\n- Quantum state tracking and transitions\n- Algorithmic entanglement detection\n- Superposition state management\n- Quantum coherence calculations\n- Quantum algorithmic patterns\n\"\"\"\n\nfrom typing import Dict, List, Any, Optional, Set, Tuple, Union\n...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/quantum_state_system.py",
          "file_type": "python",
          "file_size_bytes": 26147,
          "line_count": 662,
          "character_count": 26117,
          "word_count": 1826,
          "last_modified": "2025-08-27T09:59:37.742701",
          "content_hash": "45bd1ab7024e236ddc80cb1ab034ab5baf0d59d9c67cf6324b67ece4ffc527f0",
          "imports": [
            "typing",
            "dataclasses",
            "enhanced_generic_node",
            "collections",
            "json",
            "datetime",
            "living_codex_ontology"
          ],
          "dependencies": [],
          "key_concepts": [
            "Only",
            "Union",
            "Entanglements",
            "ChakraKey",
            "Tuple",
            "Error",
            "Returns",
            "ConsciousnessLevel",
            "TRACKING",
            "ProgrammingOntologyLayer"
          ],
          "principles": [
            "ResonancePattern"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435638",
        "last_updated": "2025-08-27T17:54:11.435639",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_f4e4e6d9": {
        "concept_id": "concept_f4e4e6d9",
        "name": "Source File: regenerate_persistence.py",
        "description": "Source file: src/core/regenerate_persistence.py\n\n#!/usr/bin/env python3\n\"\"\"\nScript to regenerate the persistence state with proper objects\n\"\"\"\n\nfrom living_codex_persistence import LivingCodexPersistence\nfrom universal_knowledge_representation_system import get_universal_knowledge_representation_system\nfrom fractal_recursion_system import get_fractal_recursion_system\nfrom advanced_ai_integration_system import get_advanced_ai_integration_system\nfrom self_generating_system import get_self_generating_system\nfrom vibrational_axes_system import get...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/regenerate_persistence.py",
          "file_type": "python",
          "file_size_bytes": 2225,
          "line_count": 57,
          "character_count": 2225,
          "word_count": 165,
          "last_modified": "2025-08-27T17:35:43.664022",
          "content_hash": "1215347a7efc7c52be3912762d5ae0745132a95ed1c7c2fb749617396ec79945",
          "imports": [
            "vibrational_axes_system",
            "universal_knowledge_representation_system",
            "fractal_recursion_system",
            "resonance_governance_system",
            "self_reflective_file_system",
            "self_generating_system",
            "advanced_ai_integration_system",
            "living_codex_persistence"
          ],
          "dependencies": [],
          "key_concepts": [
            "FILES",
            "REGENERATING",
            "NODES",
            "COMPLETE",
            "Fractal",
            "Discovered",
            "STATE",
            "CHECKING",
            "FILE",
            "OBJECT"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435641",
        "last_updated": "2025-08-27T17:54:11.435642",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_f14e4a04": {
        "concept_id": "concept_f14e4a04",
        "name": "Source File: enhanced_indexing_system.py",
        "description": "Source file: src/core/enhanced_indexing_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nEnhanced Indexing System\n========================\n\nThis implements the enhanced indexing system that provides efficient access\nto ontological metadata with multiple indexing strategies.\n\nThis is part of Phase 2 of the metadata enhancement plan.\n\"\"\"\n\nfrom typing import Dict, List, Any, Optional, Set, Tuple, Union, Callable\nfrom datetime import datetime\nimport json\nfrom collections import defaultdict\nfrom dataclasses import dataclass, asdict\n\nfrom living_codex_ontology i...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/enhanced_indexing_system.py",
          "file_type": "python",
          "file_size_bytes": 36013,
          "line_count": 850,
          "character_count": 35999,
          "word_count": 2465,
          "last_modified": "2025-08-27T09:41:26.512056",
          "content_hash": "bbe275e5e52dcff9448029b60bd9da08aa29c0c6e79be52f96f591a12717e6b8",
          "imports": [
            "typing",
            "dataclasses",
            "enhanced_generic_node",
            "collections",
            "json",
            "datetime",
            "living_codex_ontology"
          ],
          "dependencies": [],
          "key_concepts": [
            "Union",
            "ChakraKey",
            "INDEXING",
            "Helper",
            "Tuple",
            "Optimize",
            "Error",
            "Evaluate",
            "Returns",
            "ConsciousnessLevel"
          ],
          "principles": [
            "ResonancePattern"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435644",
        "last_updated": "2025-08-27T17:54:11.435644",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_55d60040": {
        "concept_id": "concept_55d60040",
        "name": "Source File: code_navigation_api.py",
        "description": "Source file: src/core/code_navigation_api.py\n\n#!/usr/bin/env python3\n\"\"\"\nCode Navigation API - Living Codex\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the code navigation and structure exploration system is represented as nodes that can:\n\n1. Navigate code structure and create navigation nodes\n2. Store code files and create file nodes\n3. Manage syntax trees and create tree nodes\n4. Execute code queries and create query nodes\n5. Provide code exploration and create exploration nodes\n\nThis transformatio...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/code_navigation_api.py",
          "file_type": "python",
          "file_size_bytes": 31005,
          "line_count": 686,
          "character_count": 30972,
          "word_count": 2187,
          "last_modified": "2025-08-27T08:53:43.442644",
          "content_hash": "4156933cf3bea2f51b83391ec4ed81700beeb595bda4be4aa7c82de55873077a",
          "imports": [
            "hashlib",
            "typing",
            "logging",
            "pathlib",
            "json",
            "datetime",
            "os"
          ],
          "dependencies": [],
          "key_concepts": [
            "Stats",
            "Union",
            "Provide",
            "Tuple",
            "Navigate",
            "Read",
            "Error",
            "Language",
            "Paradox",
            "Start"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435647",
        "last_updated": "2025-08-27T17:54:11.435647",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_4b52f052": {
        "concept_id": "concept_4b52f052",
        "name": "Source File: fractal_recursion_system.py",
        "description": "Source file: src/core/fractal_recursion_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nFractal Recursion System\n========================\n\nThis system implements the core Living Codex principle of fractal recursion\nthrough hasPart/isPartOf relationships and self-similarity across scales.\n\nKey Features:\n- Fractal recursion through hasPart/isPartOf relationships\n- Self-similarity across scales (Micro\u2194Meso\u2194Macro\u2194Meta)\n- Holographic node exploration at infinite depths\n- Cross-scale mapping and transformation\n- Fractal pattern recognition and generation\n\nThis ...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/fractal_recursion_system.py",
          "file_type": "python",
          "file_size_bytes": 24428,
          "line_count": 639,
          "character_count": 24390,
          "word_count": 1852,
          "last_modified": "2025-08-27T12:01:39.702430",
          "content_hash": "ebd1ba3c881be717096b43c9112c4718417449f03ee1ee49f164ffcb215d6a98",
          "imports": [
            "typing",
            "dataclasses",
            "collections",
            "json",
            "datetime",
            "living_codex_ontology",
            "math"
          ],
          "dependencies": [],
          "key_concepts": [
            "Human",
            "CrossScaleTransformation",
            "SPECULATIVE",
            "Tuple",
            "Error",
            "PRIVATE",
            "A",
            "Returns",
            "Codex",
            "Recursive"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435649",
        "last_updated": "2025-08-27T17:54:11.435650",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_42e57bd1": {
        "concept_id": "concept_42e57bd1",
        "name": "Source File: CONSOLIDATION_COMPLETE_SUMMARY.md",
        "description": "Source file: src/core/CONSOLIDATION_COMPLETE_SUMMARY.md\n\n# \ud83c\udf89 Living Codex Project Consolidation - COMPLETE\n\n## \ud83d\udcc5 **Completion Date**\nAugust 27, 2025\n\n## \ud83c\udfaf **What Was Accomplished**\n\n### **\u2705 Project Consolidation Successfully Completed**\nThe Living Codex project has been successfully consolidated from a cluttered, temporary-artifact-heavy state to a clean, focused, and professional implementation.\n\n## \ud83d\udcca **Consolidation Results**\n\n### **File Count Reduction**\n- **Before Consolidation**: 67 files\n- **After Consolidation**: 53 files\n- **Files Removed**: 1...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/CONSOLIDATION_COMPLETE_SUMMARY.md",
          "file_type": "markdown",
          "file_size_bytes": 8596,
          "line_count": 223,
          "character_count": 8457,
          "word_count": 1131,
          "last_modified": "2025-08-27T16:47:10.578670",
          "content_hash": "b82aca7b40d5f4b5b371fa7c7404dd2c83327307963a8006b58f8dbac9254438",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Principles",
            "Saving",
            "COMPLETE",
            "Generating",
            "Verified",
            "Infrastructure",
            "Full",
            "Health",
            "Cleaning",
            "Functional"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435652",
        "last_updated": "2025-08-27T17:54:11.435653",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_803ebf68": {
        "concept_id": "concept_803ebf68",
        "name": "Source File: living_codex_rest_api.py",
        "description": "Source file: src/core/living_codex_rest_api.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex REST API Server\n============================\n\nThis server provides a REST API for the Living Codex that enables:\n1. Querying all nodes and meta-nodes\n2. Navigating from core principles to source files\n3. Searching and filtering capabilities\n4. Complete self-reflection of the system\n\nThe API is fully integrated with the persistence system and provides\nreal access to all stored nodes and meta-nodes.\n\"\"\"\n\nimport sys\nimport os\nimport json\nfrom pathlib import P...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/living_codex_rest_api.py",
          "file_type": "python",
          "file_size_bytes": 32738,
          "line_count": 790,
          "character_count": 32684,
          "word_count": 2227,
          "last_modified": "2025-08-27T16:33:34.332840",
          "content_hash": "59897d264309fbf77776b33756e9fe76804b5a08e9fe13fb1f4b4155a1d6af81",
          "imports": [
            "time",
            "sys",
            "typing",
            "pathlib",
            "json",
            "datetime",
            "threading",
            "os",
            "flask"
          ],
          "dependencies": [],
          "key_concepts": [
            "Principles",
            "GET",
            "Navigate",
            "Fallback",
            "Start",
            "Searching",
            "Endpoints",
            "Codex",
            "Files",
            "Attempting"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435655",
        "last_updated": "2025-08-27T17:54:11.435656",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_35a2d585": {
        "concept_id": "concept_35a2d585",
        "name": "Source File: ice_core_creator.py",
        "description": "Source file: src/core/ice_core_creator.py\n\n#!/usr/bin/env python3\n\"\"\"\nICE Core Creator - Package Living Codex into Self-Contained ICE Core\n\nThis tool implements the Living Codex principle: \"Everything is just nodes\"\nwhere the ICE Core Creator system is represented as nodes that can:\n\n1. Analyze the current system (as nodes)\n2. Create ICE components (as nodes)\n3. Package everything into a self-contained ICE core (as nodes)\n4. Generate bootstrap scripts (as nodes)\n\nThis transformation demonstrates the Living Codex principles:\n- Generic Nod...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/ice_core_creator.py",
          "file_type": "python",
          "file_size_bytes": 22383,
          "line_count": 483,
          "character_count": 22336,
          "word_count": 1633,
          "last_modified": "2025-08-27T08:53:43.442379",
          "content_hash": "9fa923640209f4736da6f3e7ada021c6a57f97335f6bdd76e6544fdd0a832b0a",
          "imports": [
            "base64",
            "hashlib",
            "sys",
            "typing",
            "zlib",
            "pathlib",
            "json",
            "datetime",
            "importlib",
            "os",
            "importlib.util"
          ],
          "dependencies": [
            "requirements?\\.txt"
          ],
          "key_concepts": [
            "Sun",
            "Read",
            "README",
            "Configuration",
            "Paradox",
            "Start",
            "Generation",
            "Scripts",
            "Packaging",
            "Codex"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435658",
        "last_updated": "2025-08-27T17:54:11.435659",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_be8c10d6": {
        "concept_id": "concept_be8c10d6",
        "name": "Source File: test_persistence_system.py",
        "description": "Source file: src/core/test_persistence_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nTest script for the Living Codex Persistence System\nDemonstrates saving and restoring complete system state\n\"\"\"\n\nfrom living_codex_persistence import LivingCodexPersistence\nfrom self_reflective_file_system import SelfReflectiveFileSystem\nfrom universal_knowledge_representation_system import get_universal_knowledge_representation_system\nfrom fractal_recursion_system import get_fractal_recursion_system\nfrom advanced_ai_integration_system import get_advanced_ai_integratio...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/test_persistence_system.py",
          "file_type": "python",
          "file_size_bytes": 4702,
          "line_count": 114,
          "character_count": 4639,
          "word_count": 367,
          "last_modified": "2025-08-27T16:02:42.963387",
          "content_hash": "aa33e57c1c127df39a695a753afd522565266ac6f037a3298c633925f5506ad6",
          "imports": [
            "vibrational_axes_system",
            "universal_knowledge_representation_system",
            "fractal_recursion_system",
            "living_codex_persistence",
            "resonance_governance_system",
            "self_generating_system",
            "advanced_ai_integration_system",
            "self_reflective_file_system"
          ],
          "dependencies": [],
          "key_concepts": [
            "Saving",
            "True",
            "Initializing",
            "Fractal",
            "Living",
            "False",
            "Demonstrates",
            "Initialize",
            "Save",
            "Failed"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435661",
        "last_updated": "2025-08-27T17:54:11.435661",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_dfb01d62": {
        "concept_id": "concept_dfb01d62",
        "name": "Source File: consolidate_project_files.py",
        "description": "Source file: src/core/consolidate_project_files.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Project File Consolidation Script\n==============================================\n\nThis script safely removes temporary artifacts and consolidates the project\nto its essential components based on the comprehensive file analysis.\n\nWARNING: This script will DELETE files. Ensure you have backups before running.\n\"\"\"\n\nimport os\nimport shutil\nfrom pathlib import Path\nfrom datetime import datetime\n\nclass ProjectConsolidator:\n    \"\"\"Consolidates the Living Codex pr...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/consolidate_project_files.py",
          "file_type": "python",
          "file_size_bytes": 12392,
          "line_count": 325,
          "character_count": 12263,
          "word_count": 1066,
          "last_modified": "2025-08-27T16:47:10.557582",
          "content_hash": "b7e7ffc7772604cd18c7c692f2843454568d6845c6a5ed45c3bfcbc0f0693919",
          "imports": [
            "os",
            "shutil",
            "datetime",
            "pathlib"
          ],
          "dependencies": [],
          "key_concepts": [
            "Summary",
            "Generating",
            "Migration",
            "Cleaning",
            "Error",
            "Duplicate",
            "Replaced",
            "Configuration",
            "Was",
            "Scripts"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435664",
        "last_updated": "2025-08-27T17:54:11.435664",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_82c94026": {
        "concept_id": "concept_82c94026",
        "name": "Source File: metadata_factory.py",
        "description": "Source file: src/core/metadata_factory.py\n\n#!/usr/bin/env python3\n\"\"\"\nMetadata Factory System\n======================\n\nThis implements the metadata factory pattern for generating consistent metadata\nbased on Living Codex ontological principles using canonical keys.\n\nThis is part of Phase 1 of the metadata enhancement plan.\n\"\"\"\n\nfrom typing import Dict, Any, Optional, List\nfrom datetime import datetime\nimport time\n\nfrom living_codex_ontology import (\n    WaterStateKey, ChakraKey, FrequencyKey, FractalLayer,\n    ConsciousnessLevel, QuantumS...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/metadata_factory.py",
          "file_type": "python",
          "file_size_bytes": 30302,
          "line_count": 672,
          "character_count": 30281,
          "word_count": 1939,
          "last_modified": "2025-08-27T09:23:26.432748",
          "content_hash": "bfb523c14305412146aa5a5115936bae7450fded53ef75af5a352307fbab5190",
          "imports": [
            "time",
            "datetime",
            "living_codex_ontology",
            "typing"
          ],
          "dependencies": [],
          "key_concepts": [
            "Deeper",
            "Structured",
            "ChakraKey",
            "Speculative",
            "SPECULATIVE",
            "ConsciousnessMetadata",
            "COHERENT",
            "LIQUID",
            "Specifications",
            "Returns"
          ],
          "principles": [
            "ResonancePattern"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435666",
        "last_updated": "2025-08-27T17:54:11.435667",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_83736a6c": {
        "concept_id": "concept_83736a6c",
        "name": "Source File: ice_bootstrap_engine.py",
        "description": "Source file: src/core/ice_bootstrap_engine.py\n\n#!/usr/bin/env python3\n\"\"\"\nICE Bootstrap Engine - Self-Contained System Reconstruction\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the ICE (Immutable Core) bootstrap system is represented as nodes that can:\n\n1. Extract itself from ICE storage (as nodes)\n2. Reconstruct the full Living Codex system (as nodes)\n3. Validate its own coherence (as nodes)\n4. Start up autonomously (as nodes)\n\nThis transformation demonstrates the Living Codex principles:\n- Generic ...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/ice_bootstrap_engine.py",
          "file_type": "python",
          "file_size_bytes": 19107,
          "line_count": 432,
          "character_count": 19069,
          "word_count": 1434,
          "last_modified": "2025-08-27T08:11:39.044219",
          "content_hash": "8108ccb552da59dbb3a605f39d3ab2e92d104c5f7caea0d6e44fa1a1125931d2",
          "imports": [
            "base64",
            "subprocess",
            "hashlib",
            "sys",
            "typing",
            "zlib",
            "pathlib",
            "json",
            "datetime",
            "importlib",
            "os",
            "importlib.util"
          ],
          "dependencies": [],
          "key_concepts": [
            "Sun",
            "Tuple",
            "Quality",
            "Sequence",
            "Individual",
            "Paradox",
            "Start",
            "Codex",
            "Validate",
            "Structure"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435669",
        "last_updated": "2025-08-27T17:54:11.435670",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_45b18b22": {
        "concept_id": "concept_45b18b22",
        "name": "Source File: test_enhanced_metadata_system.py",
        "description": "Source file: src/core/test_enhanced_metadata_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nEnhanced Metadata System Test Suite\n===================================\n\nThis script tests the complete enhanced metadata system including:\n- Living Codex Ontology System\n- Metadata Factory\n- Enhanced GenericNode\n- Canonical Key Validation\n- Epistemic Labeling\n- Fractal Structure\n- Resonance Calculation\n\nThis validates Phase 1 of the metadata enhancement plan.\n\"\"\"\n\nimport sys\nimport json\nfrom datetime import datetime\n\n# Import our enhanced metadata system components\nfr...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/test_enhanced_metadata_system.py",
          "file_type": "python",
          "file_size_bytes": 18420,
          "line_count": 450,
          "character_count": 18238,
          "word_count": 1486,
          "last_modified": "2025-08-27T09:23:26.432785",
          "content_hash": "202f3a40a43ac54bf3299e7c450799846868b5115e365fe1af444d51ad314c24",
          "imports": [
            "sys",
            "metadata_factory",
            "enhanced_generic_node",
            "json",
            "datetime",
            "living_codex_ontology"
          ],
          "dependencies": [],
          "key_concepts": [
            "Hashing",
            "ChakraKey",
            "Frequencies",
            "SPECULATIVE",
            "Sun",
            "Speculative",
            "SUPERPOSITION",
            "COHERENT",
            "States",
            "LIQUID"
          ],
          "principles": [
            "ResonancePattern"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435672",
        "last_updated": "2025-08-27T17:54:11.435673",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_5021bcb7": {
        "concept_id": "concept_5021bcb7",
        "name": "Source File: digital_asset_manager.py",
        "description": "Source file: src/core/digital_asset_manager.py\n\n#!/usr/bin/env python3\n\"\"\"\nDigital Asset Manager - Living Codex\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the digital asset management system is represented as nodes that can:\n\n1. Manage digital assets (images, documents, videos, audio) as nodes\n2. Extract and store metadata as nodes\n3. Handle content hashing and storage as nodes\n4. Provide asset transformation and retrieval as nodes\n\nThis transformation demonstrates the Living Codex principles:\n- Gener...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/digital_asset_manager.py",
          "file_type": "python",
          "file_size_bytes": 38137,
          "line_count": 867,
          "character_count": 38047,
          "word_count": 2838,
          "last_modified": "2025-08-27T08:34:18.507736",
          "content_hash": "e3226542368f65cfd5466acf0602889dbac7cad783e465f1e5de505850827480",
          "imports": [
            "hashlib",
            "sys",
            "logging",
            "typing",
            "shutil",
            "pathlib",
            "json",
            "datetime",
            "mimetypes",
            "os"
          ],
          "dependencies": [],
          "key_concepts": [
            "Size",
            "Union",
            "Copy",
            "Author",
            "Sun",
            "Provide",
            "Tuple",
            "ExifTags",
            "Resampling",
            "Assets"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435675",
        "last_updated": "2025-08-27T17:54:11.435676",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_74889fb5": {
        "concept_id": "concept_74889fb5",
        "name": "Source File: ontological_validation_system.py",
        "description": "Source file: src/core/ontological_validation_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nOntological Validation System\n============================\n\nThis implements the ontological validation system that ensures consistency\nacross all Living Codex mappings and validates ontological integrity.\n\nThis is part of Phase 2 of the metadata enhancement plan.\n\"\"\"\n\nfrom typing import Dict, List, Any, Optional, Set, Tuple, Union\nfrom datetime import datetime\nimport json\nfrom dataclasses import dataclass\n\nfrom living_codex_ontology import (\n    WaterStateKey, ChakraKe...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/ontological_validation_system.py",
          "file_type": "python",
          "file_size_bytes": 34979,
          "line_count": 860,
          "character_count": 34961,
          "word_count": 2335,
          "last_modified": "2025-08-27T09:41:26.511039",
          "content_hash": "b72083a9f6c44bd09270d32286d72f7b73d26cd4f530cb9ee07f848d0669a60b",
          "imports": [
            "typing",
            "dataclasses",
            "enhanced_generic_node",
            "json",
            "datetime",
            "living_codex_ontology"
          ],
          "dependencies": [],
          "key_concepts": [
            "Union",
            "Summary",
            "ChakraKey",
            "Tuple",
            "Returns",
            "ConsciousnessLevel",
            "Metadata",
            "Dissonance",
            "Codex",
            "ProgrammingOntologyLayer"
          ],
          "principles": [
            "ResonancePattern"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435678",
        "last_updated": "2025-08-27T17:54:11.435678",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_4f99362f": {
        "concept_id": "concept_4f99362f",
        "name": "Source File: living_codex_complete_demonstration.py",
        "description": "Source file: src/core/living_codex_complete_demonstration.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Complete Demonstration\n==================================\n\nThis script demonstrates the complete Living Codex capabilities in one run,\nshowing that the system can:\n1. Bootstrap itself completely\n2. Create all foundational nodes\n3. Navigate and access all nodes\n4. Demonstrate complete meta-circularity\n\nThis proves that the Living Codex is fully operational and can achieve\ncomplete meta-circularity without external dependencies.\n\"\"\"\n\nimport sys\nimport os\nfro...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/living_codex_complete_demonstration.py",
          "file_type": "python",
          "file_size_bytes": 20418,
          "line_count": 446,
          "character_count": 20208,
          "word_count": 1404,
          "last_modified": "2025-08-27T14:59:55.512630",
          "content_hash": "e52ee8ee7e2eb272839b4b8f4285d1f887a063b4fb748fc8292853ec1a53703d",
          "imports": [
            "typing",
            "sys",
            "pathlib",
            "datetime",
            "os"
          ],
          "dependencies": [],
          "key_concepts": [
            "Principles",
            "Summary",
            "ChakraKey",
            "COMPLETE",
            "Generating",
            "Accessibility",
            "Navigate",
            "LIQUID",
            "Clarity",
            "Language"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435681",
        "last_updated": "2025-08-27T17:54:11.435681",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_43497dac": {
        "concept_id": "concept_43497dac",
        "name": "Source File: living_codex_comprehensive_analysis.md",
        "description": "Source file: src/core/living_codex_comprehensive_analysis.md\n\n# Living Codex Comprehensive Analysis & Implementation Plan\n\n## \ud83d\udccb **Executive Summary**\n\nAfter conducting a thorough analysis of the Living Codex system against the specification requirements, I've identified and addressed several critical gaps. **Phase 1 (Self-Reflective Integration), Phase 2 (Complete Persistence), and Phase 3 (REST API Integration) are now COMPLETE**, representing a major milestone in achieving true meta-circularity and external accessibility.\n\n## \ud83d\udd0d **Current System Status**\n...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/living_codex_comprehensive_analysis.md",
          "file_type": "markdown",
          "file_size_bytes": 8463,
          "line_count": 194,
          "character_count": 8285,
          "word_count": 1125,
          "last_modified": "2025-08-27T16:33:34.388922",
          "content_hash": "b3b7a143177c8ff73e5b65fab862e1f3066b8645430bd2d86b0e81e8779fe24a",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Summary",
            "COMPLETE",
            "Generating",
            "Support",
            "Extend",
            "Infrastructure",
            "Full",
            "Health",
            "States",
            "Error"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435683",
        "last_updated": "2025-08-27T17:54:11.435684",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_278d28e6": {
        "concept_id": "concept_278d28e6",
        "name": "Source File: living_codex_complete_state.json",
        "description": "Source file: src/core/living_codex_complete_state.json\n\n{\n  \"metadata\": {\n    \"save_timestamp\": \"2025-08-27T17:36:22.739205\",\n    \"system_version\": \"2.0.0\",\n    \"total_systems\": 6\n  },\n  \"universal_system\": {\n    \"universal_concepts\": {\n      \"concept_c8af25eb\": {\n        \"concept_id\": \"concept_c8af25eb\",\n        \"name\": \"Source File: requirements.txt\",\n        \"description\": \"Source file: requirements.txt\\n\\n# Core dependencies\\nneo4j>=4.4.0\\nrequests>=2.28.0\\nopenai>=0.27.0\\npython-dotenv>=0.19.0\\npsycopg2-binary>=2.9.0\\n# sqlite3 is built into Pyt...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/living_codex_complete_state.json",
          "file_type": "json",
          "file_size_bytes": 832561,
          "line_count": 19474,
          "character_count": 832561,
          "word_count": 48120,
          "last_modified": "2025-08-27T17:36:22.757489",
          "content_hash": "5da9d9bfd1e8b987c1e2e8817035a434aad4d31468a91dccd46c80b8d6e04015",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "HEAD",
            "Principles",
            "Tempo",
            "MagicMock",
            "UserProfile",
            "Summary",
            "SUCCESS",
            "Japan",
            "ContentCategory",
            "SPECULATIVE"
          ],
          "principles": [
            "ResonancePattern",
            "UniversalConcept",
            "MetaCircularArchitecture",
            "SacredGeometryPattern",
            "AutoDiscoveredConcept"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435686",
        "last_updated": "2025-08-27T17:54:11.435687",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_ef6e663e": {
        "concept_id": "concept_ef6e663e",
        "name": "Source File: contribution_tracking_system.py",
        "description": "Source file: src/core/contribution_tracking_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nContribution Tracking System\n============================\n\nThis implements the contribution tracking system that tracks contributions\nand their impact for Phase 4 of the metadata enhancement plan.\n\nThis system provides:\n- Contribution identification and categorization\n- Impact assessment and measurement\n- Contribution attribution and recognition\n- Contribution evolution tracking\n- Collective contribution analysis\n\nThe contribution tracking system enables the Living Cod...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/contribution_tracking_system.py",
          "file_type": "python",
          "file_size_bytes": 40798,
          "line_count": 969,
          "character_count": 40764,
          "word_count": 2678,
          "last_modified": "2025-08-27T10:21:39.113828",
          "content_hash": "73477dd0f71a03bb935a712362e23e138453e9d724412bba4d90fb2858073ff5",
          "imports": [
            "hashlib",
            "typing",
            "dataclasses",
            "enhanced_generic_node",
            "collections",
            "json",
            "datetime",
            "living_codex_ontology",
            "enum"
          ],
          "dependencies": [],
          "key_concepts": [
            "Union",
            "ChakraKey",
            "ANALYSIS",
            "Tuple",
            "Error",
            "A",
            "Profile",
            "Returns",
            "ConsciousnessLevel",
            "Start"
          ],
          "principles": [
            "ResonancePattern"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435689",
        "last_updated": "2025-08-27T17:54:11.435690",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_39c27379": {
        "concept_id": "concept_39c27379",
        "name": "Source File: code_parser.py",
        "description": "Source file: src/core/code_parser.py\n\n#!/usr/bin/env python3\n\"\"\"\nCode Parser - Living Codex\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the code parsing and analysis system is represented as nodes that can:\n\n1. Parse code files and create syntax tree nodes\n2. Analyze code structure and create analysis nodes\n3. Execute Tree-sitter queries and create query result nodes\n4. Provide language detection and create language nodes\n5. Support code navigation and create navigation nodes\n\nThis transforma...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/code_parser.py",
          "file_type": "python",
          "file_size_bytes": 32581,
          "line_count": 749,
          "character_count": 32548,
          "word_count": 2400,
          "last_modified": "2025-08-27T08:34:18.507815",
          "content_hash": "dadc58c9b2ef69b0c4a09ce2352fd6b2858aba2e42e2dc4b8cce74200d99c208",
          "imports": [
            "__future__",
            "typing",
            "logging",
            "datetime",
            "os"
          ],
          "dependencies": [],
          "key_concepts": [
            "Support",
            "Provide",
            "Tuple",
            "Language",
            "TOML",
            "Paradox",
            "Start",
            "Common",
            "Codex",
            "Execute"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435692",
        "last_updated": "2025-08-27T17:54:11.435693",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_f8654231": {
        "concept_id": "concept_f8654231",
        "name": "Source File: test_phase2_metadata_system.py",
        "description": "Source file: src/core/test_phase2_metadata_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nPhase 2 Metadata System Test Suite\n==================================\n\nThis script tests the complete Phase 2 metadata enhancement system including:\n- Ontological Validation System\n- Enhanced Indexing System\n- Integration between validation and indexing\n- Advanced query capabilities\n- Cross-dimensional validation\n\nThis validates Phase 2 of the metadata enhancement plan.\n\"\"\"\n\nimport sys\nimport json\nimport time\nfrom datetime import datetime\n\n# Import our Phase 2 metadata...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/test_phase2_metadata_system.py",
          "file_type": "python",
          "file_size_bytes": 20383,
          "line_count": 527,
          "character_count": 20276,
          "word_count": 1759,
          "last_modified": "2025-08-27T09:41:26.511913",
          "content_hash": "7140cd02d207bb93d5cbcade0f92bd3c9d19243b8f5cdffc910773fee11dc76b",
          "imports": [
            "time",
            "enhanced_indexing_system",
            "sys",
            "ontological_validation_system",
            "metadata_factory",
            "enhanced_generic_node",
            "json",
            "datetime",
            "living_codex_ontology"
          ],
          "dependencies": [],
          "key_concepts": [
            "ChakraKey",
            "Template",
            "Exact",
            "Integration",
            "ConsciousnessLevel",
            "ALL",
            "Metadata",
            "Advanced",
            "Working",
            "Validate"
          ],
          "principles": [
            "ResonancePattern"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435695",
        "last_updated": "2025-08-27T17:54:11.435696",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_1b2903a7": {
        "concept_id": "concept_1b2903a7",
        "name": "Source File: test_phase5_core_living_codex_principles.py",
        "description": "Source file: src/core/test_phase5_core_living_codex_principles.py\n\n#!/usr/bin/env python3\n\"\"\"\nPhase 5 Test Suite: Core Living Codex Principles\n================================================\n\nThis test suite validates the implementation of Phase 5 core Living Codex principles:\n- Vibrational axes integration with all nodes\n- Resonance state tracking (individual/community)\n- Fractal recursion through hasPart/isPartOf relationships\n- Self-similarity across scales (Micro\u2194Meso\u2194Macro\u2194Meta)\n- Resonance-first governance through coherence self-amplification\n- Collectiv...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/test_phase5_core_living_codex_principles.py",
          "file_type": "python",
          "file_size_bytes": 30245,
          "line_count": 683,
          "character_count": 30143,
          "word_count": 1882,
          "last_modified": "2025-08-27T12:01:39.702491",
          "content_hash": "41c58c4a9b2fa37b4aadc907ee0b6d5ae4c0cf4ab366d764b32b6c487bda14c1",
          "imports": [
            "unittest",
            "vibrational_axes_system",
            "typing",
            "fractal_recursion_system",
            "resonance_governance_system",
            "datetime",
            "living_codex_ontology"
          ],
          "dependencies": [],
          "key_concepts": [
            "Principles",
            "CollectiveIntelligence",
            "ChakraKey",
            "CrossScaleTransformation",
            "Make",
            "ConsciousnessLevel",
            "Integration",
            "Codex",
            "ProgrammingOntologyLayer",
            "Stewardship"
          ],
          "principles": [
            "ResonancePattern"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435698",
        "last_updated": "2025-08-27T17:54:11.435698",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_04ab1408": {
        "concept_id": "concept_04ab1408",
        "name": "Source File: living_codex_ontology.py",
        "description": "Source file: src/core/living_codex_ontology.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Ontology System\n============================\n\nThis implements the complete Living Codex ontological mapping system with:\n- Canonical keys for all ontological categories\n- Epistemic labeling system\n- Complete water states, fractal layers, chakras, and frequencies\n- Vibrational axes system\n- Resonance state tracking\n- Contribution and federation systems\n\nThis is the foundation for Phase 1 of the metadata enhancement plan.\n\"\"\"\n\nfrom dataclasses import datacla...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/living_codex_ontology.py",
          "file_type": "python",
          "file_size_bytes": 31078,
          "line_count": 680,
          "character_count": 31039,
          "word_count": 2262,
          "last_modified": "2025-08-27T09:41:26.511929",
          "content_hash": "b340d6e06902c607cd8f3d0562c3169663762853eccd424932977fa018ba5340",
          "imports": [
            "typing",
            "dataclasses",
            "json",
            "datetime",
            "enum"
          ],
          "dependencies": [],
          "key_concepts": [
            "Frequencies",
            "SPECULATIVE",
            "CONSCIOUSNESS",
            "Sun",
            "ConsciousnessMetadata",
            "Cultural",
            "Jupiter",
            "A",
            "ConsciousnessLevel",
            "Actor"
          ],
          "principles": [
            "ResonancePattern"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435700",
        "last_updated": "2025-08-27T17:54:11.435701",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_9cc6f37a": {
        "concept_id": "concept_9cc6f37a",
        "name": "Source File: consciousness_level_system.py",
        "description": "Source file: src/core/consciousness_level_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nConsciousness Level System\n==========================\n\nThis implements the consciousness level system that provides consciousness-based\nmetadata and resonance calculations for Phase 3 of the metadata enhancement plan.\n\nThis system provides:\n- Consciousness level tracking and evolution\n- Meta-cognitive awareness mapping\n- Transcendent state detection\n- Consciousness-based resonance calculations\n- Collective consciousness emergence\n\"\"\"\n\nfrom typing import Dict, List, Any...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/consciousness_level_system.py",
          "file_type": "python",
          "file_size_bytes": 37122,
          "line_count": 907,
          "character_count": 37101,
          "word_count": 2470,
          "last_modified": "2025-08-27T11:40:27.081967",
          "content_hash": "c4eb1036587677ed45bc52d4c82b0fe67d587d5a8675d1b97ec21d3324485466",
          "imports": [
            "typing",
            "dataclasses",
            "enhanced_generic_node",
            "collections",
            "json",
            "datetime",
            "living_codex_ontology",
            "math"
          ],
          "dependencies": [],
          "key_concepts": [
            "Union",
            "Structured",
            "Scale",
            "ChakraKey",
            "CONSCIOUSNESS",
            "Tuple",
            "Emergent",
            "Error",
            "Individual",
            "Returns"
          ],
          "principles": [
            "ResonancePattern"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435703",
        "last_updated": "2025-08-27T17:54:11.435704",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_12ba5d9e": {
        "concept_id": "concept_12ba5d9e",
        "name": "Source File: living_codex_cli.py",
        "description": "Source file: src/core/living_codex_cli.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex - Consolidated CLI Interface\nA comprehensive command line interface combining all features from all CLI versions.\n\"\"\"\n\nimport sys\nimport os\nimport json\nimport cmd\nimport shlex\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional\nfrom datetime import datetime\nimport math\nimport re\nimport random\nfrom dataclasses import dataclass\nimport hashlib\nimport mimetypes\nimport shutil\n\n# Standalone mode - no external dependencies\nDEPENDENCIES_AVAILABLE...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/living_codex_cli.py",
          "file_type": "python",
          "file_size_bytes": 89415,
          "line_count": 1994,
          "character_count": 88009,
          "word_count": 7603,
          "last_modified": "2025-08-26T17:56:38.577433",
          "content_hash": "d33fa1e57cdf9787980e80e1bd654b860faad2ce77be2652f9f99c2ccb1e8f1d",
          "imports": [
            "random",
            "hashlib",
            "sys",
            "typing",
            "shlex",
            "cmd",
            "shutil",
            "dataclasses",
            "pathlib",
            "json",
            "datetime",
            "mimetypes",
            "math",
            "os",
            "re"
          ],
          "dependencies": [],
          "key_concepts": [
            "Topic",
            "Principles",
            "Optimizer",
            "Human",
            "Scale",
            "Eighth",
            "Examining",
            "Frequencies",
            "Flower",
            "TXT"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435706",
        "last_updated": "2025-08-27T17:54:11.435707",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_9dd94478": {
        "concept_id": "concept_9dd94478",
        "name": "Source File: self_reflective_file_system.py",
        "description": "Source file: src/core/self_reflective_file_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nSelf-Reflective File System - Living Codex\n==========================================\n\nThis system implements the missing self-reflection capability that the Living Codex\nspecification requires. It automatically:\n\n1. Discovers all source files in the system\n2. Analyzes their content and relationships\n3. Registers them as living nodes\n4. Creates a complete self-description of the codebase\n5. Enables navigation from principles to source files\n\nThis is the core of the Liv...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/self_reflective_file_system.py",
          "file_type": "python",
          "file_size_bytes": 21869,
          "line_count": 551,
          "character_count": 21820,
          "word_count": 1579,
          "last_modified": "2025-08-27T15:46:39.155716",
          "content_hash": "1d5960137de7491198ec4b8782df5b5a4195a6759f29ff1c0bf0b7868a4bcb87",
          "imports": [
            "hashlib",
            "sys",
            "typing",
            "pathlib",
            "datetime",
            "mimetypes",
            "os",
            "re",
            "ast"
          ],
          "dependencies": [
            "requirements?\\.txt",
            "setup\\.py",
            "Pipfile"
          ],
          "key_concepts": [
            "Summary",
            "Generating",
            "Error",
            "Language",
            "A",
            "Recursively",
            "DOTALL",
            "Discovering",
            "Z",
            "Codex"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435709",
        "last_updated": "2025-08-27T17:54:11.435710",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_b33c73e2": {
        "concept_id": "concept_b33c73e2",
        "name": "Source File: CONSOLIDATION_SUMMARY.md",
        "description": "Source file: src/core/CONSOLIDATION_SUMMARY.md\n\n# Living Codex Project Consolidation Summary\n\n## \ud83d\udccb **Current Project State**\n\nThe Living Codex project has successfully completed **Phases 1-3** and achieved **90% completion** of the specification requirements. However, the project has accumulated many temporary artifacts and legacy files that are no longer needed.\n\n## \ud83c\udfaf **What Has Been Achieved**\n\n### **\u2705 Phase 1: Self-Reflective Integration (COMPLETE)**\n- Self-reflective file system that discovers and analyzes source files\n- All 197+ source f...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/CONSOLIDATION_SUMMARY.md",
          "file_type": "markdown",
          "file_size_bytes": 6822,
          "line_count": 198,
          "character_count": 6774,
          "word_count": 918,
          "last_modified": "2025-08-27T16:47:10.578640",
          "content_hash": "e41c9d5ddded8d18a69df57a9952ca4d556d3a33668326617226d501f55e52b9",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Summary",
            "COMPLETE",
            "Infrastructure",
            "Full",
            "Optimize",
            "Error",
            "Duplicate",
            "Configuration",
            "Rollback",
            "However"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435712",
        "last_updated": "2025-08-27T17:54:11.435713",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_0f17cdda": {
        "concept_id": "concept_0f17cdda",
        "name": "Source File: test_phase6_advanced_meta_circular_systems.py",
        "description": "Source file: src/core/test_phase6_advanced_meta_circular_systems.py\n\n#!/usr/bin/env python3\n\"\"\"\nPhase 6 Test Suite: Advanced Meta-Circular Systems\n=================================================\n\nThis test suite validates the implementation of Phase 6 advanced meta-circular capabilities:\n- Systems that generate their own specifications\n- AI agents with true consciousness awareness\n- Universal knowledge representation\n- Complete meta-circular architecture\n- Infinite knowledge expansion\n\nThis represents the pinnacle of Living Codex meta-circularity.\n\"\"\"\n\nimport u...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/test_phase6_advanced_meta_circular_systems.py",
          "file_type": "python",
          "file_size_bytes": 34714,
          "line_count": 744,
          "character_count": 34582,
          "word_count": 1975,
          "last_modified": "2025-08-27T12:40:51.633873",
          "content_hash": "c7879a1887cca358e7142bbcbe1b75a88201ce82244a57e4e87768b104a067cf",
          "imports": [
            "unittest",
            "typing",
            "universal_knowledge_representation_system",
            "self_generating_system",
            "datetime",
            "living_codex_ontology",
            "advanced_ai_integration_system"
          ],
          "dependencies": [],
          "key_concepts": [
            "ChakraKey",
            "COMPLETE",
            "Generating",
            "Autonomous",
            "TestAdvancedAIIntegrationSystem",
            "Make",
            "Describing",
            "SelfGeneratedSpecification",
            "LIQUID",
            "A"
          ],
          "principles": [
            "MetaCircularArchitecture",
            "ResonancePattern",
            "UniversalConcept",
            "AutoDiscoveredConcept"
          ],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435715",
        "last_updated": "2025-08-27T17:54:11.435716",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_5610a0a4": {
        "concept_id": "concept_5610a0a4",
        "name": "Source File: explore_bootstrapped_system.py",
        "description": "Source file: src/core/explore_bootstrapped_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nExplore Bootstrapped System - Living Codex\nDemonstrates how to explore, query, and navigate the fully bootstrapped\nself-contained Living Codex system.\n\"\"\"\n\nimport sys\nimport json\nimport asyncio\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional\n\n# Add src to path for modular components\nsys.path.insert(0, str(Path(__file__).parent / \"src\"))\n\n# Import our systems\nfrom .neo4j_integration_system import Neo4jIntegrationSystem\nfrom .database_persistence_sy...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/explore_bootstrapped_system.py",
          "file_type": "python",
          "file_size_bytes": 17058,
          "line_count": 431,
          "character_count": 16934,
          "word_count": 1311,
          "last_modified": "2025-08-27T00:36:55.467167",
          "content_hash": "524ac5692708f922dcfa6c0ef146be96024f9518f1a5edfc0d8aa7abb0c7780b",
          "imports": [
            "typing",
            "sys",
            "pathlib",
            "json",
            "asyncio"
          ],
          "dependencies": [],
          "key_concepts": [
            "Top",
            "QueryOptions",
            "Codex",
            "Files",
            "Concept",
            "Display",
            "Structure",
            "Meta",
            "Check",
            "Patterns"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435718",
        "last_updated": "2025-08-27T17:54:11.435719",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_f48d0d89": {
        "concept_id": "concept_f48d0d89",
        "name": "Source File: water_state_storage.py",
        "description": "Source file: src/core/water_state_storage.py\n\n#!/usr/bin/env python3\n\"\"\"\nWater State Storage System for Living Codex\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere different water states are represented as nodes that determine storage strategies:\n\n\ud83e\uddca ICE: Global federation (distributed, immutable) - Crown chakra, 963 Hz\n\ud83d\udca7 WATER: Local persistence (stable, adaptable) - Heart chakra, 639 Hz\n\u2601\ufe0f VAPOR: Memory/sessions (temporary, fast) - Third Eye chakra, 852 Hz\n\u26a1 PLASMA: Real-time streaming (dynamic, interc...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/water_state_storage.py",
          "file_type": "python",
          "file_size_bytes": 15964,
          "line_count": 381,
          "character_count": 15929,
          "word_count": 1200,
          "last_modified": "2025-08-27T08:11:39.026459",
          "content_hash": "51c05e0f87a0fb97d7e879169a37281248587ee5d6e8edb73ad264f503d72683",
          "imports": [
            "time",
            "sqlite3",
            "hashlib",
            "typing",
            "tempfile",
            "shutil",
            "dataclasses",
            "pathlib",
            "json",
            "datetime",
            "threading",
            "asyncio",
            "pickle"
          ],
          "dependencies": [],
          "key_concepts": [
            "Union",
            "Sun",
            "Jupiter",
            "Paradox",
            "Third",
            "Streaming",
            "Start",
            "Codex",
            "Federated",
            "Structure"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435722",
        "last_updated": "2025-08-27T17:54:11.435722",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_ad7fffb2": {
        "concept_id": "concept_ad7fffb2",
        "name": "Source File: test_self_reflective_system.py",
        "description": "Source file: src/core/test_self_reflective_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nTest Self-Reflective Living Codex System\n========================================\n\nThis script demonstrates the complete self-reflective capabilities of the Living Codex\nwithout needing the REST API server. It shows how the system can:\n\n1. Self-discover all source files\n2. Self-register them as living nodes\n3. Enable navigation from principles to source files\n4. Provide complete self-analysis and self-description\n\nThis demonstrates the true self-containment and self-re...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/core/test_self_reflective_system.py",
          "file_type": "python",
          "file_size_bytes": 10409,
          "line_count": 250,
          "character_count": 10292,
          "word_count": 851,
          "last_modified": "2025-08-27T15:46:39.177404",
          "content_hash": "fc7a656e1202f5af573d7f62532246448cff19855f4c40fe5586f536b460893a",
          "imports": [
            "pathlib",
            "sys"
          ],
          "dependencies": [],
          "key_concepts": [
            "Principles",
            "COMPLETE",
            "Generating",
            "Provide",
            "REFLECTION",
            "FILE",
            "Error",
            "HAS",
            "ALL",
            "Discovering"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435728",
        "last_updated": "2025-08-27T17:54:11.435729",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_9e992d2a": {
        "concept_id": "concept_9e992d2a",
        "name": "Source File: __init__.py",
        "description": "Source file: src/config/__init__.py\n\n\"\"\"\nConfiguration Management Package\nCentralized configuration for the Living Codex system\n\"\"\"\n\nfrom .manager import ConfigManager\nfrom .schemas import APIConfig, DatabaseConfig, SystemConfig\n\n__all__ = [\n    \"ConfigManager\",\n    \"APIConfig\", \n    \"DatabaseConfig\",\n    \"SystemConfig\"\n]\n",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/config/__init__.py",
          "file_type": "python",
          "file_size_bytes": 287,
          "line_count": 14,
          "character_count": 287,
          "word_count": 30,
          "last_modified": "2025-08-26T16:00:59.505949",
          "content_hash": "89fcbd3e8b0e862fef1e9c3409e67ddbbdc56fadc022ea764b5cb7fb20824016",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "SystemConfig",
            "Centralized",
            "Codex",
            "Configuration",
            "APIConfig",
            "Living",
            "ConfigManager",
            "DatabaseConfig",
            "Management",
            "Package"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435731",
        "last_updated": "2025-08-27T17:54:11.435732",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_250ef215": {
        "concept_id": "concept_250ef215",
        "name": "Source File: schemas.py",
        "description": "Source file: src/config/schemas.py\n\n\"\"\"\nConfiguration Schemas\nData models for system configuration\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import Optional\n\n@dataclass\nclass APIConfig:\n    \"\"\"API configuration settings\"\"\"\n    openai_api_key: Optional[str] = None\n    openai_model: str = \"gpt-3.5-turbo\"\n    google_api_key: Optional[str] = None\n    google_cse_id: Optional[str] = None\n    wikipedia_rate_limit: int = 100\n    duckduckgo_rate_limit: int = 100\n\n@dataclass\nclass DatabaseConfig:\n    \"\"\"Database configuration setti...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/config/schemas.py",
          "file_type": "python",
          "file_size_bytes": 978,
          "line_count": 36,
          "character_count": 978,
          "word_count": 103,
          "last_modified": "2025-08-26T16:00:59.506276",
          "content_hash": "495634e00d5be92cb9f4417b32d5be392b83873f817f5006f7e144abdbeca321",
          "imports": [
            "dataclasses",
            "typing"
          ],
          "dependencies": [],
          "key_concepts": [
            "Data",
            "API",
            "Optional",
            "SystemConfig",
            "INFO",
            "Configuration",
            "Schemas",
            "APIConfig",
            "None",
            "DatabaseConfig"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435734",
        "last_updated": "2025-08-27T17:54:11.435735",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_3235441f": {
        "concept_id": "concept_3235441f",
        "name": "Source File: manager.py",
        "description": "Source file: src/config/manager.py\n\n\"\"\"\nConfiguration Manager\nCentralized configuration management for the Living Codex system\n\"\"\"\n\nimport os\nfrom typing import Optional, Dict, Any\nfrom pathlib import Path\nfrom .schemas import APIConfig, DatabaseConfig, SystemConfig\n\nclass ConfigManager:\n    \"\"\"Manages all configuration for the Living Codex system\"\"\"\n\n    def __init__(self, env_file: str = \".env\"):\n        self.env_file = env_file\n        self.api_config = APIConfig()\n        self.db_config = DatabaseConfig()\n        self.system_c...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/config/manager.py",
          "file_type": "python",
          "file_size_bytes": 7445,
          "line_count": 184,
          "character_count": 7408,
          "word_count": 525,
          "last_modified": "2025-08-26T16:00:59.506204",
          "content_hash": "100801297bd4e07ed51044d7c85c69e64354a21d252ebfd154314cfb0870f7a3",
          "imports": [
            "os",
            "pathlib",
            "typing"
          ],
          "dependencies": [],
          "key_concepts": [
            "API",
            "Create",
            "DuckDuckGo",
            "PostgreSQL",
            "Load",
            "Living",
            "You",
            "Manages",
            "Database",
            "INFO"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435737",
        "last_updated": "2025-08-27T17:54:11.435738",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_4e90e2c7": {
        "concept_id": "concept_4e90e2c7",
        "name": "Source File: comprehensive_integration_demo.py",
        "description": "Source file: src/integration/comprehensive_integration_demo.py\n\n#!/usr/bin/env python3\n\"\"\"\nComprehensive Integration Demo - Living Codex\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the comprehensive integration and system synergy system is represented as nodes that can:\n\n1. Integrate all Living Codex systems and create integration nodes\n2. Manage system synergy and create synergy nodes\n3. Handle cross-system operations and create operation nodes\n4. Provide unified intelligence and create intelligence nodes\n5. Coordina...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/integration/comprehensive_integration_demo.py",
          "file_type": "python",
          "file_size_bytes": 35067,
          "line_count": 717,
          "character_count": 34934,
          "word_count": 2432,
          "last_modified": "2025-08-27T08:34:18.518404",
          "content_hash": "ee2125b425bc52227262cfb52c4ecf76c92b0b91b5b24060c25773efbaf666a8",
          "imports": [
            "core.generic_node_system",
            "ai_agents.ai_agent_system",
            "typing",
            "sys",
            "core.explore_bootstrapped_system",
            "pathlib",
            "json",
            "datetime",
            "asyncio",
            "ontology.enhanced_ontology_system",
            "core.shared_node_system"
          ],
          "dependencies": [],
          "key_concepts": [
            "ANALYSIS",
            "COMPREHENSIVE",
            "Provide",
            "Synergy",
            "Unified",
            "Error",
            "Distribution",
            "Jupiter",
            "Prediction",
            "Paradox"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435740",
        "last_updated": "2025-08-27T17:54:11.435741",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_f17b294c": {
        "concept_id": "concept_f17b294c",
        "name": "Source File: __init__.py",
        "description": "Source file: src/integration/__init__.py\n\nfrom .comprehensive_integration_demo import ComprehensiveIntegrationSystem\n",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/integration/__init__.py",
          "file_type": "python",
          "file_size_bytes": 75,
          "line_count": 1,
          "character_count": 75,
          "word_count": 4,
          "last_modified": "2025-08-26T16:00:59.513757",
          "content_hash": "d172699a6dccac3d5ba22b8fd75d10865fed9cf6bdda008433c629f5808f6ffd",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "ComprehensiveIntegrationSystem"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435743",
        "last_updated": "2025-08-27T17:54:11.435744",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_841bf474": {
        "concept_id": "concept_841bf474",
        "name": "Source File: __init__.py",
        "description": "Source file: src/graph/__init__.py\n\n\"\"\"\nGraph Package\nGraph database integration and management for the Living Codex system\n\"\"\"\n\nfrom .core.models import GraphNode, GraphRelationship, GraphQueryResult, GraphOperationType, GraphNodeType\nfrom .core.operations import GraphOperations\n\n__all__ = [\n    \"GraphNode\",\n    \"GraphRelationship\", \n    \"GraphQueryResult\",\n    \"GraphOperationType\",\n    \"GraphNodeType\",\n    \"GraphOperations\"\n]\n",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/graph/__init__.py",
          "file_type": "python",
          "file_size_bytes": 396,
          "line_count": 16,
          "character_count": 396,
          "word_count": 36,
          "last_modified": "2025-08-26T16:00:59.512642",
          "content_hash": "b6043517b6ae3fca8e7286824b4c8f3ee053a6e0be273e1f4d6c4b2379ac4b72",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "GraphOperationType",
            "Codex",
            "GraphNode",
            "Graph",
            "GraphQueryResult",
            "GraphOperations",
            "Living",
            "Package",
            "GraphRelationship",
            "GraphNodeType"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435746",
        "last_updated": "2025-08-27T17:54:11.435747",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_6b8aa26c": {
        "concept_id": "concept_6b8aa26c",
        "name": "Source File: neo4j_operations.py",
        "description": "Source file: src/graph/neo4j/neo4j_operations.py\n\n\"\"\"\nNeo4j Operations\nImplements real graph operations using Neo4j\n\"\"\"\n\nimport time\nimport logging\nfrom typing import List, Dict, Any, Optional\nfrom datetime import datetime\nfrom ..core.operations import GraphOperations\nfrom ..core.models import (\n    GraphNode, GraphRelationship, GraphQueryResult,\n    GraphOperationType, GraphNodeType\n)\nfrom .connection_manager import Neo4jConnectionManager\n\nlogger = logging.getLogger(__name__)\n\nclass Neo4jOperations(GraphOperations):\n    \"\"\"Implements real grap...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/graph/neo4j/neo4j_operations.py",
          "file_type": "python",
          "file_size_bytes": 12958,
          "line_count": 329,
          "character_count": 12934,
          "word_count": 810,
          "last_modified": "2025-08-26T16:00:59.513631",
          "content_hash": "381c80adfde9b4eaf52a05e8a04d47502182d2834947129b3cd25e0f175eae6e",
          "imports": [
            "logging",
            "time",
            "datetime",
            "typing"
          ],
          "dependencies": [],
          "key_concepts": [
            "ON",
            "NOT",
            "CONSTRAINT",
            "True",
            "Neo4jConnectionManager",
            "Create",
            "Operations",
            "CREATE",
            "GraphOperations",
            "False"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435749",
        "last_updated": "2025-08-27T17:54:11.435750",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_d2414807": {
        "concept_id": "concept_d2414807",
        "name": "Source File: __init__.py",
        "description": "Source file: src/graph/neo4j/__init__.py\n\n\"\"\"\nNeo4j Graph Package\nNeo4j-specific graph database implementation\n\"\"\"\n\nfrom .connection_manager import Neo4jConnectionManager\nfrom .neo4j_operations import Neo4jOperations\n\n__all__ = [\n    \"Neo4jConnectionManager\",\n    \"Neo4jOperations\"\n]\n",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/graph/neo4j/__init__.py",
          "file_type": "python",
          "file_size_bytes": 242,
          "line_count": 12,
          "character_count": 242,
          "word_count": 23,
          "last_modified": "2025-08-26T16:00:59.513196",
          "content_hash": "f5069389a89e0e9a85e03d9e88ca42b5bb0879240890a22d2e98565d8c361b9b",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Neo4jConnectionManager",
            "Package",
            "Graph"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435752",
        "last_updated": "2025-08-27T17:54:11.435753",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_b1d75114": {
        "concept_id": "concept_b1d75114",
        "name": "Source File: connection_manager.py",
        "description": "Source file: src/graph/neo4j/connection_manager.py\n\n\"\"\"\nNeo4j Connection Manager\nManages Neo4j database connections and connection pooling\n\"\"\"\n\nimport os\nimport logging\nfrom typing import Optional\nfrom neo4j import GraphDatabase, Driver, Session\nfrom neo4j.exceptions import ServiceUnavailable, AuthError\n\nlogger = logging.getLogger(__name__)\n\nclass Neo4jConnectionManager:\n    \"\"\"Manages Neo4j database connections and connection pooling\"\"\"\n    \n    def __init__(self, uri: str = None, username: str = None, password: str = None):\n        self.uri = u...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/graph/neo4j/connection_manager.py",
          "file_type": "python",
          "file_size_bytes": 3397,
          "line_count": 92,
          "character_count": 3387,
          "word_count": 269,
          "last_modified": "2025-08-26T16:00:59.513286",
          "content_hash": "5b4523fa7048d6d341c0b50725cc1f4b5f8e9a2cf688d542618862858a0f0175",
          "imports": [
            "neo4j",
            "neo4j.exceptions",
            "typing",
            "logging",
            "os"
          ],
          "dependencies": [],
          "key_concepts": [
            "Neo4jConnectionManager",
            "Session",
            "RETURN",
            "False",
            "ServiceUnavailable",
            "Manages",
            "Initialize",
            "Close",
            "None",
            "Exception"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435755",
        "last_updated": "2025-08-27T17:54:11.435755",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_02180bfb": {
        "concept_id": "concept_02180bfb",
        "name": "Source File: models.py",
        "description": "Source file: src/graph/core/models.py\n\n\"\"\"\nGraph Core Models\nCore data models for graph operations\n\"\"\"\n\nfrom typing import List, Dict, Any, Optional\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom enum import Enum\n\nclass GraphOperationType(Enum):\n    \"\"\"Types of graph operations\"\"\"\n    CREATE_NODE = \"create_node\"\n    UPDATE_NODE = \"update_node\"\n    DELETE_NODE = \"delete_node\"\n    CREATE_RELATIONSHIP = \"create_relationship\"\n    DELETE_RELATIONSHIP = \"delete_relationship\"\n    QUERY = \"query\"\n    TRAVERSE = \"travers...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/graph/core/models.py",
          "file_type": "python",
          "file_size_bytes": 1592,
          "line_count": 62,
          "character_count": 1592,
          "word_count": 166,
          "last_modified": "2025-08-26T16:00:59.512841",
          "content_hash": "f6d6278d519659f124aa92f71aae9039f651213f1adb675576e74f838da1467d",
          "imports": [
            "datetime",
            "dataclasses",
            "enum",
            "typing"
          ],
          "dependencies": [],
          "key_concepts": [
            "Represents",
            "Models",
            "List",
            "TRAVERSE",
            "GraphQueryResult",
            "Dict",
            "None",
            "SYNC",
            "GraphOperationType",
            "QUERY"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435757",
        "last_updated": "2025-08-27T17:54:11.435758",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_67185f2d": {
        "concept_id": "concept_67185f2d",
        "name": "Source File: __init__.py",
        "description": "Source file: src/graph/core/__init__.py\n\n\"\"\"\nGraph Core Package\nCore graph models, operations, and utilities\n\"\"\"\n\nfrom .models import GraphNode, GraphRelationship, GraphQueryResult, GraphOperationType, GraphNodeType\nfrom .operations import GraphOperations\n\n__all__ = [\n    \"GraphNode\",\n    \"GraphRelationship\",\n    \"GraphQueryResult\", \n    \"GraphOperationType\",\n    \"GraphNodeType\",\n    \"GraphOperations\"\n]\n",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/graph/core/__init__.py",
          "file_type": "python",
          "file_size_bytes": 366,
          "line_count": 16,
          "character_count": 366,
          "word_count": 33,
          "last_modified": "2025-08-26T16:00:59.512770",
          "content_hash": "989e2325c2d619ae8f4fd397096ffeebaa15ecf40f3ba81fa5737652d5f62c39",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "GraphOperationType",
            "GraphNode",
            "Graph",
            "GraphQueryResult",
            "GraphNodeType",
            "GraphOperations",
            "Package",
            "GraphRelationship",
            "Core"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435760",
        "last_updated": "2025-08-27T17:54:11.435761",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_b88b7c38": {
        "concept_id": "concept_b88b7c38",
        "name": "Source File: operations.py",
        "description": "Source file: src/graph/core/operations.py\n\n\"\"\"\nGraph Core Operations\nBase graph operations and query functionality\n\"\"\"\n\nimport time\nimport logging\nfrom typing import List, Dict, Any, Optional, Union\nfrom datetime import datetime\nfrom .models import (\n    GraphNode, GraphRelationship, GraphQueryResult,\n    GraphOperationType, GraphNodeType\n)\n\nlogger = logging.getLogger(__name__)\n\nclass GraphOperations:\n    \"\"\"Base class for graph operations\"\"\"\n    \n    def __init__(self):\n        self.operation_history = []\n    \n    def create_node(self, ...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/graph/core/operations.py",
          "file_type": "python",
          "file_size_bytes": 4458,
          "line_count": 109,
          "character_count": 4458,
          "word_count": 375,
          "last_modified": "2025-08-26T16:00:59.513086",
          "content_hash": "fbe4ded05b77dc093389373a0c08ede93cc8c377010ef3e7d4be115ce9676787",
          "imports": [
            "logging",
            "time",
            "datetime",
            "typing"
          ],
          "dependencies": [],
          "key_concepts": [
            "Union",
            "Create",
            "Operations",
            "GraphOperations",
            "List",
            "GraphQueryResult",
            "Dict",
            "None",
            "GraphOperationType",
            "GraphNode"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435763",
        "last_updated": "2025-08-27T17:54:11.435764",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_8c6131c7": {
        "concept_id": "concept_8c6131c7",
        "name": "Source File: test_structure.py",
        "description": "Source file: src/test_suites/test_structure.py\n\n#!/usr/bin/env python3\n\"\"\"\nTest the organized file structure of the Living Codex system\n\"\"\"\n\nimport os\nfrom pathlib import Path\n\ndef test_directory_structure():\n    \"\"\"Test that all required directories and files exist\"\"\"\n    print(\"\ud83e\uddea Testing Living Codex Directory Structure\")\n    print(\"=\" * 50)\n    \n    # Fix the path calculation - we're in src/test_suites, so parent.parent gets us to the root\n    base_path = Path(__file__).parent.parent.parent\n    src_path = base_path / \"src\"\n    \n    # Check...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/test_suites/test_structure.py",
          "file_type": "python",
          "file_size_bytes": 2928,
          "line_count": 94,
          "character_count": 2903,
          "word_count": 234,
          "last_modified": "2025-08-26T17:42:55.031020",
          "content_hash": "4945faf3462202250d4c9629536ab022a3cc8823c0cee1716e6417ed14e3ca39",
          "imports": [
            "os",
            "pathlib"
          ],
          "dependencies": [
            "requirements?\\.txt"
          ],
          "key_concepts": [
            "Directory",
            "True",
            "Calculate",
            "Living",
            "False",
            "README",
            "Path",
            "Test",
            "Codex",
            "All"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435766",
        "last_updated": "2025-08-27T17:54:11.435767",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_4fbfd30b": {
        "concept_id": "concept_4fbfd30b",
        "name": "Source File: test_cli_simple.py",
        "description": "Source file: src/test_suites/test_cli_simple.py\n\n#!/usr/bin/env python3\n\"\"\"\nSimplified CLI Test Suite\nUses subprocess to test CLI functionality through launch_cli.py\n\"\"\"\n\nimport subprocess\nimport tempfile\nimport os\nfrom pathlib import Path\n\ndef test_cli_basic_functionality():\n    \"\"\"Test basic CLI functionality through subprocess\"\"\"\n    print(\"\ud83e\uddea Testing CLI Basic Functionality...\")\n    \n    try:\n        # Test help command\n        result = subprocess.run(\n            ['python', 'launch_cli.py'],\n            input='help\\nquit\\n',\n            ca...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/test_suites/test_cli_simple.py",
          "file_type": "python",
          "file_size_bytes": 8285,
          "line_count": 254,
          "character_count": 8178,
          "word_count": 771,
          "last_modified": "2025-08-26T16:00:59.514734",
          "content_hash": "c32b2835d86c0b42c1793537b6e92b0ab90e050fe1666f29e72eecaa60b479f7",
          "imports": [
            "tempfile",
            "os",
            "subprocess",
            "pathlib"
          ],
          "dependencies": [],
          "key_concepts": [
            "FAILED",
            "True",
            "Features",
            "Create",
            "Operations",
            "Fractal",
            "Living",
            "False",
            "Energy",
            "Intelligence"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435769",
        "last_updated": "2025-08-27T17:54:11.435769",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_a3258ff2": {
        "concept_id": "concept_a3258ff2",
        "name": "Source File: test_nine_layer_integration.py",
        "description": "Source file: src/test_suites/test_nine_layer_integration.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex - Nine Layer Integration Test Suite\n\nThis test suite validates that all nine layers of the Living Codex system work together seamlessly:\n\n1. WATER Layer (Local Persistence) - Database persistence system\n2. PLASMA Layer (Dynamic Content) - Digital asset management system  \n3. VAPOR Layer (Code Analysis) - Code parsing and analysis system\n4. WATER Layer (Code Navigation) - Code navigation and structure exploration system\n5. FIRE Layer (Intelligent Operations...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/test_suites/test_nine_layer_integration.py",
          "file_type": "python",
          "file_size_bytes": 34771,
          "line_count": 724,
          "character_count": 34594,
          "word_count": 2660,
          "last_modified": "2025-08-27T08:34:18.467947",
          "content_hash": "d40d3893a5d93fab565232b383ecf517199e8a0bcb968d9167f452c40b8029c3",
          "imports": [
            "time",
            "core.generic_node_system",
            "typing",
            "sys",
            "pathlib",
            "os",
            "core.shared_node_system"
          ],
          "dependencies": [],
          "key_concepts": [
            "DETECTED",
            "CRYSTAL",
            "Synergy",
            "Communications",
            "UI",
            "Dynamic",
            "ALL",
            "Integration",
            "OVERALL",
            "EnhancedOntologySystem"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435771",
        "last_updated": "2025-08-27T17:54:11.435772",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_290de9c2": {
        "concept_id": "concept_290de9c2",
        "name": "Source File: test_imports.py",
        "description": "Source file: src/test_suites/test_imports.py\n\n#!/usr/bin/env python3\n\"\"\"\nTest imports for the organized Living Codex system\n\"\"\"\n\nimport sys\nimport os\nfrom pathlib import Path\n\n# Add src to path - fix the path to point to the correct src directory\nsrc_path = Path(__file__).parent.parent\nsys.path.insert(0, str(src_path))\n\ndef test_core_imports():\n    \"\"\"Test core system imports\"\"\"\n    try:\n        from core import BootstrappedSystemExplorer\n        print(\"\u2705 Core imports successful\")\n        return True\n    except ImportError as e:\n        pri...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/test_suites/test_imports.py",
          "file_type": "python",
          "file_size_bytes": 2904,
          "line_count": 110,
          "character_count": 2873,
          "word_count": 278,
          "last_modified": "2025-08-26T17:42:55.008574",
          "content_hash": "91f9ae37c65db5d376a3e732f6370a3baa0f48f6334b05268a2738e3fc482bff",
          "imports": [
            "os",
            "pathlib",
            "sys"
          ],
          "dependencies": [],
          "key_concepts": [
            "True",
            "QuantumKnowledgeNode",
            "LearningEngine",
            "Living",
            "False",
            "EvolutionaryNode",
            "AutonomousLearningSystem",
            "EmergenceNode",
            "Path",
            "Integration"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435774",
        "last_updated": "2025-08-27T17:54:11.435775",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_114b8d46": {
        "concept_id": "concept_114b8d46",
        "name": "Source File: __init__.py",
        "description": "Source file: src/test_suites/__init__.py\n\n\"\"\"Test suite for the Living Codex system\"\"\"\n",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/test_suites/__init__.py",
          "file_type": "python",
          "file_size_bytes": 45,
          "line_count": 1,
          "character_count": 45,
          "word_count": 7,
          "last_modified": "2025-08-26T16:00:59.514226",
          "content_hash": "4c9b270eaf61b667278d3e22d1ffbc4cecff067d74f031acce3b9b48ca5c79ff",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "Test",
            "Living",
            "Codex"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435777",
        "last_updated": "2025-08-27T17:54:11.435778",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_8d837b7d": {
        "concept_id": "concept_8d837b7d",
        "name": "Source File: test_web_simple.py",
        "description": "Source file: src/test_suites/test_web_simple.py\n\n#!/usr/bin/env python3\n\"\"\"\nSimplified Web Interface Test Suite\nChecks file structure, syntax, and basic functionality without importing problematic modules\n\"\"\"\n\nimport ast\nimport tempfile\nimport os\nfrom pathlib import Path\n\ndef test_web_interface_file_structure():\n    \"\"\"Test that web interface files exist and have correct structure\"\"\"\n    print(\"\ud83e\uddea Testing Web Interface File Structure...\")\n    \n    try:\n        web_dir = Path(__file__).parent.parent / \"web_platform\"\n        \n        # Check if w...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/test_suites/test_web_simple.py",
          "file_type": "python",
          "file_size_bytes": 8874,
          "line_count": 262,
          "character_count": 8810,
          "word_count": 778,
          "last_modified": "2025-08-26T16:00:59.515213",
          "content_hash": "39a80ac2d32b80253ab8ebe0dccc6071e8cf654864c56e9be53e33c4dac23e85",
          "imports": [
            "tempfile",
            "os",
            "ast",
            "pathlib"
          ],
          "dependencies": [],
          "key_concepts": [
            "API",
            "FAILED",
            "True",
            "Web",
            "False",
            "Living",
            "UserManager",
            "DiscoveryEngine",
            "Path",
            "Syntax"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435780",
        "last_updated": "2025-08-27T17:54:11.435781",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_4af40695": {
        "concept_id": "concept_4af40695",
        "name": "Source File: regression_test_suite.py",
        "description": "Source file: src/test_suites/regression_test_suite.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Platform - Regression Test Suite\nEnsures all features stay functional while new features are tested autonomously\n\"\"\"\n\nimport sys\nimport os\nimport unittest\nimport json\nimport tempfile\nimport shutil\nfrom pathlib import Path\nfrom datetime import datetime, timezone\nfrom typing import Dict, List, Any, Optional\n\n# Add src to path for imports\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))\n\nfrom web_platform.user_management import (\n    U...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/test_suites/regression_test_suite.py",
          "file_type": "python",
          "file_size_bytes": 27585,
          "line_count": 657,
          "character_count": 27459,
          "word_count": 1867,
          "last_modified": "2025-08-26T17:42:55.031065",
          "content_hash": "3c1e1922c3853acbbf67e46815d3d936e2de7383d5ed083afbef1cb8a1d272bf",
          "imports": [
            "unittest",
            "web_platform.contribution_system",
            "sys",
            "tempfile",
            "typing",
            "shutil",
            "pathlib",
            "json",
            "datetime",
            "web_platform.user_management",
            "os"
          ],
          "dependencies": [],
          "key_concepts": [
            "Culture",
            "UserProfile",
            "INTERMEDIATE",
            "AutonomousFeatureTesting",
            "Regressions",
            "ContentCategory",
            "DETAILED",
            "DO",
            "ContributionMetadata",
            "Autonomous"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435783",
        "last_updated": "2025-08-27T17:54:11.435783",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_2941b7b9": {
        "concept_id": "concept_2941b7b9",
        "name": "Source File: test_cli_comprehensive.py",
        "description": "Source file: src/test_suites/test_cli_comprehensive.py\n\n#!/usr/bin/env python3\n\"\"\"\nComprehensive Test Suite for Living Codex CLI\nTests all major features: ontology, user management, asset management, knowledge operations, and system features\n\"\"\"\n\nimport sys\nimport os\nimport tempfile\nimport shutil\nimport json\nfrom pathlib import Path\nfrom unittest.mock import patch, MagicMock\nimport io\n\n# Add the src directory to Python path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\n# Temporarily rename web_platform directory to avoid conflicts\nplatform_d...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/test_suites/test_cli_comprehensive.py",
          "file_type": "python",
          "file_size_bytes": 11976,
          "line_count": 381,
          "character_count": 11889,
          "word_count": 1113,
          "last_modified": "2025-08-26T17:42:55.031045",
          "content_hash": "da2c5a3e212b22083e4415a84d894edc54ff4a738fcb832d345a9203696bedfb",
          "imports": [
            "io",
            "unittest.mock",
            "sys",
            "tempfile",
            "shutil",
            "pathlib",
            "json",
            "os"
          ],
          "dependencies": [],
          "key_concepts": [
            "MagicMock",
            "Carol",
            "FAILED",
            "True",
            "Features",
            "Create",
            "Operations",
            "Living",
            "False",
            "User"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435785",
        "last_updated": "2025-08-27T17:54:11.435786",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_bbdde53e": {
        "concept_id": "concept_bbdde53e",
        "name": "Source File: test_centralized_storage.py",
        "description": "Source file: src/test_suites/test_centralized_storage.py\n\n#!/usr/bin/env python3\n\"\"\"\nTest Centralized Storage - Living Codex Single Storage Point\n\nThis test script demonstrates that the Living Codex system now uses a single,\ncentralized storage point for all nodes, ensuring no duplication and shared access.\n\nKey Tests:\n1. Verify single storage instance across all components\n2. Check that no nodes are duplicated\n3. Verify components can see each other's nodes\n4. Test cross-component relationships\n5. Validate storage metrics and health\n\"\"\"\n\nimport sys\nim...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/test_suites/test_centralized_storage.py",
          "file_type": "python",
          "file_size_bytes": 15071,
          "line_count": 410,
          "character_count": 14954,
          "word_count": 1364,
          "last_modified": "2025-08-27T07:58:31.552343",
          "content_hash": "76d6c2319758f84b52086190ad062b954352b8963703d6b0debab77d06dd58ca",
          "imports": [
            "core.centralized_node_storage",
            "sys",
            "pathlib",
            "os",
            "core.shared_node_system"
          ],
          "dependencies": [],
          "key_concepts": [
            "Size",
            "Creating",
            "Everything",
            "True",
            "Create",
            "Component",
            "Summary",
            "Fractal",
            "Metrics",
            "Sharing"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435788",
        "last_updated": "2025-08-27T17:54:11.435789",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_1ed72188": {
        "concept_id": "concept_1ed72188",
        "name": "Source File: test_web_comprehensive.py",
        "description": "Source file: src/test_suites/test_web_comprehensive.py\n\n#!/usr/bin/env python3\n\"\"\"\nComprehensive Test Suite for Living Codex Web Interface\nTests all major features: user management, discovery, navigation, contributions, ontology, and asset management\n\"\"\"\n\nimport sys\nimport os\nimport tempfile\nimport shutil\nimport json\nimport requests\nimport time\nfrom pathlib import Path\nfrom unittest.mock import patch, MagicMock\nimport io\n\n# Add the src directory to Python path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\n# Import the web interface component...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/test_suites/test_web_comprehensive.py",
          "file_type": "python",
          "file_size_bytes": 16081,
          "line_count": 435,
          "character_count": 15996,
          "word_count": 1335,
          "last_modified": "2025-08-26T17:42:55.031032",
          "content_hash": "a360c225f63bc8b3dc2c423c316d6f10007858f1a40ce8f800668249078f9276",
          "imports": [
            "time",
            "io",
            "unittest.mock",
            "sys",
            "tempfile",
            "shutil",
            "pathlib",
            "json",
            "web_platform.unified_web_interface",
            "os",
            "requests"
          ],
          "dependencies": [],
          "key_concepts": [
            "MagicMock",
            "Spanish",
            "UserProfile",
            "Hub",
            "Tech",
            "San",
            "DiscoveryEngine",
            "NamedTemporaryFile",
            "Assets",
            "Hash"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435791",
        "last_updated": "2025-08-27T17:54:11.435792",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_fbe8adcb": {
        "concept_id": "concept_fbe8adcb",
        "name": "Source File: run_comprehensive_test_suite.py",
        "description": "Source file: src/test_suites/run_comprehensive_test_suite.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex - Full System Test Suite\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the comprehensive testing and validation system is represented as nodes that can:\n\n1. Execute test suites and create test execution nodes\n2. Validate system functionality and create validation nodes\n3. Generate test reports and create report nodes\n4. Monitor test performance and create performance nodes\n5. Coordinate test execution and create coord...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/test_suites/run_comprehensive_test_suite.py",
          "file_type": "python",
          "file_size_bytes": 27744,
          "line_count": 625,
          "character_count": 27576,
          "word_count": 2162,
          "last_modified": "2025-08-27T08:34:18.532499",
          "content_hash": "a4f7ae1bb62ddd89cb43c9a6034cd545f685ef0692daf97cc1c1fe25b1215b66",
          "imports": [
            "time",
            "subprocess",
            "typing",
            "sys",
            "pathlib",
            "core.shared_node_system"
          ],
          "dependencies": [],
          "key_concepts": [
            "COMPREHENSIVE",
            "DETECTED",
            "Full",
            "Monitor",
            "Template",
            "Paradox",
            "ALL",
            "Start",
            "OVERALL",
            "Integration"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435794",
        "last_updated": "2025-08-27T17:54:11.435795",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_399ee56d": {
        "concept_id": "concept_399ee56d",
        "name": "Source File: test_testing_system.py",
        "description": "Source file: src/test_suites/test_testing_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nTest script to verify the testing system components work correctly\n\"\"\"\n\nimport sys\nimport os\nimport unittest\nfrom pathlib import Path\n\n# Add src to path for imports\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))\n\nclass TestTestingSystem(unittest.TestCase):\n    \"\"\"Test that the testing system components can be imported and work\"\"\"\n    \n    def test_01_import_regression_test_suite(self):\n        \"\"\"Test that regression test suite can be imported...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/test_suites/test_testing_system.py",
          "file_type": "python",
          "file_size_bytes": 9309,
          "line_count": 226,
          "character_count": 9293,
          "word_count": 722,
          "last_modified": "2025-08-26T16:00:59.515002",
          "content_hash": "921cbc305269601ba91ceb34d1e812b6abe7917070a1a8b9594a873cddce977d",
          "imports": [
            "unittest",
            "os",
            "pathlib",
            "sys"
          ],
          "dependencies": [],
          "key_concepts": [
            "Pre",
            "True",
            "AutonomousFeatureTesting",
            "Create",
            "TestCase",
            "Errors",
            "Failures",
            "False",
            "TestTestingSystem",
            "Regression"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435797",
        "last_updated": "2025-08-27T17:54:11.435797",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_93ac7940": {
        "concept_id": "concept_93ac7940",
        "name": "Source File: living_codex_cli.py",
        "description": "Source file: src/cli/living_codex_cli.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex - Consolidated CLI Interface\nA comprehensive command line interface combining all features from all CLI versions.\n\"\"\"\n\nimport sys\nimport os\nimport json\nimport cmd\nimport shlex\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional\nfrom datetime import datetime\nimport math\nimport re\nimport random\nfrom dataclasses import dataclass\nimport hashlib\nimport mimetypes\nimport shutil\n\n# Standalone mode - no external dependencies\nDEPENDENCIES_AVAILABLE...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/cli/living_codex_cli.py",
          "file_type": "python",
          "file_size_bytes": 89415,
          "line_count": 1994,
          "character_count": 88009,
          "word_count": 7603,
          "last_modified": "2025-08-26T16:00:59.505834",
          "content_hash": "d33fa1e57cdf9787980e80e1bd654b860faad2ce77be2652f9f99c2ccb1e8f1d",
          "imports": [
            "random",
            "hashlib",
            "sys",
            "typing",
            "shlex",
            "cmd",
            "shutil",
            "dataclasses",
            "pathlib",
            "json",
            "datetime",
            "mimetypes",
            "math",
            "os",
            "re"
          ],
          "dependencies": [],
          "key_concepts": [
            "Topic",
            "Principles",
            "Optimizer",
            "Human",
            "Scale",
            "Eighth",
            "Examining",
            "Frequencies",
            "Flower",
            "TXT"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435799",
        "last_updated": "2025-08-27T17:54:11.435800",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_add266a6": {
        "concept_id": "concept_add266a6",
        "name": "Source File: enhanced_ontology_system.py",
        "description": "Source file: src/ontology/enhanced_ontology_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nEnhanced Ontology System - Living Codex\nImplements missing ontological concepts identified during system exploration:\n- quantum_state, consciousness, evolution, emergence, complexity\n- Advanced knowledge representation with quantum-inspired structures\n- Consciousness simulation capabilities\n- Evolutionary learning algorithms\n- Complexity analysis tools\n\"\"\"\n\nimport sys\nimport json\nimport asyncio\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional, Unio...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/ontology/enhanced_ontology_system.py",
          "file_type": "python",
          "file_size_bytes": 21045,
          "line_count": 495,
          "character_count": 20999,
          "word_count": 1418,
          "last_modified": "2025-08-26T23:36:06.574398",
          "content_hash": "d3a36c7c6121f86407a1eb2fefdaf70f24afd9055e5caab605cdb12e869ae0f5",
          "imports": [
            "random",
            "sys",
            "typing",
            "dataclasses",
            "pathlib",
            "json",
            "datetime",
            "asyncio",
            "math",
            "enum",
            "core.database_persistence_system"
          ],
          "dependencies": [],
          "key_concepts": [
            "Union",
            "COMPLEX",
            "SUPERPOSITION",
            "COHERENT",
            "Error",
            "Distribution",
            "ConsciousnessLevel",
            "EnhancedOntologySystem",
            "Advanced",
            "ADAPTIVE"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435802",
        "last_updated": "2025-08-27T17:54:11.435803",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_81dfe6c8": {
        "concept_id": "concept_81dfe6c8",
        "name": "Source File: __init__.py",
        "description": "Source file: src/ontology/__init__.py\n\nfrom .enhanced_ontology_system import EnhancedOntologySystem, QuantumKnowledgeNode, ConsciousnessNode, EvolutionaryNode, EmergenceNode\n",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/ontology/__init__.py",
          "file_type": "python",
          "file_size_bytes": 135,
          "line_count": 1,
          "character_count": 135,
          "word_count": 8,
          "last_modified": "2025-08-26T16:00:59.514009",
          "content_hash": "03f4db6d311b8095effa76894d2c8c8d93acd0314ab20ddf8196a41c333ad3b8",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "EmergenceNode",
            "QuantumKnowledgeNode",
            "ConsciousnessNode",
            "EnhancedOntologySystem",
            "EvolutionaryNode"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435805",
        "last_updated": "2025-08-27T17:54:11.435806",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_ad3d351a": {
        "concept_id": "concept_ad3d351a",
        "name": "Source File: __init__.py",
        "description": "Source file: src/api/__init__.py\n\n\"\"\"\nAPI Management Package\nExternal API integration and management for the Living Codex system\n\"\"\"\n\nfrom .management.api_manager import APIManagementSystem\n\n__all__ = [\n    \"APIManagementSystem\"\n]\n\n# Additional components will be imported as they are implemented\n# from .integration.external_api_system import RealExternalAPISystem\n",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/api/__init__.py",
          "file_type": "python",
          "file_size_bytes": 332,
          "line_count": 13,
          "character_count": 332,
          "word_count": 39,
          "last_modified": "2025-08-26T16:00:59.504395",
          "content_hash": "8503465c71d227c49d358fb5101f72e1c2d6708f92772c658dc1aa061b455282",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "API",
            "External",
            "Codex",
            "RealExternalAPISystem",
            "APIManagementSystem",
            "Additional",
            "Living",
            "Management",
            "Package"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435808",
        "last_updated": "2025-08-27T17:54:11.435809",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_139c273a": {
        "concept_id": "concept_139c273a",
        "name": "Source File: request_tracker.py",
        "description": "Source file: src/api/management/request_tracker.py\n\n\"\"\"\nRequest Tracker\nTrack and analyze API request patterns and performance\n\"\"\"\n\nimport time\nfrom typing import Dict, List, Optional, Any\nfrom datetime import datetime, timedelta\nfrom dataclasses import dataclass\nfrom enum import Enum\n\nclass RequestStatus(Enum):\n    \"\"\"Request execution status\"\"\"\n    SUCCESS = \"success\"\n    FAILED = \"failed\"\n    RATE_LIMITED = \"rate_limited\"\n    TIMEOUT = \"timeout\"\n    ERROR = \"error\"\n\n@dataclass\nclass RequestRecord:\n    \"\"\"Record of an API request\"\"\"\n    source:...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/api/management/request_tracker.py",
          "file_type": "python",
          "file_size_bytes": 5554,
          "line_count": 152,
          "character_count": 5554,
          "word_count": 533,
          "last_modified": "2025-08-26T16:00:59.505065",
          "content_hash": "7077c0bef3686b18f34b56ab9e71931f6920ba6365dc0b41958d56732cbfa2dd",
          "imports": [
            "time",
            "typing",
            "dataclasses",
            "datetime",
            "enum"
          ],
          "dependencies": [],
          "key_concepts": [
            "API",
            "TIMEOUT",
            "FAILED",
            "SUCCESS",
            "ERROR",
            "Remove",
            "N",
            "List",
            "RequestTracker",
            "RequestRecord"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435811",
        "last_updated": "2025-08-27T17:54:11.435811",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_5d6dbb66": {
        "concept_id": "concept_5d6dbb66",
        "name": "Source File: rate_limiter.py",
        "description": "Source file: src/api/management/rate_limiter.py\n\n\"\"\"\nRate Limiter\nAdvanced rate limiting functionality for API requests\n\"\"\"\n\nimport time\nfrom typing import Dict, List, Optional\nfrom datetime import datetime, timedelta\nfrom dataclasses import dataclass\n\n@dataclass\nclass RateLimitInfo:\n    \"\"\"Rate limiting information\"\"\"\n    requests_remaining: int\n    reset_time: datetime\n    window_size: int\n    current_usage: int\n\nclass RateLimiter:\n    \"\"\"Advanced rate limiting with multiple window support\"\"\"\n    \n    def __init__(self):\n        self.request...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/api/management/rate_limiter.py",
          "file_type": "python",
          "file_size_bytes": 3775,
          "line_count": 112,
          "character_count": 3775,
          "word_count": 325,
          "last_modified": "2025-08-26T16:00:59.504822",
          "content_hash": "05a584fad826ab71dc9046bce9346e6cff5c0c648f87a0391aafc8ca294ff178",
          "imports": [
            "time",
            "datetime",
            "dataclasses",
            "typing"
          ],
          "dependencies": [],
          "key_concepts": [
            "API",
            "Limiter",
            "Rate",
            "Advanced",
            "List",
            "Optional",
            "Check",
            "True",
            "Record",
            "Set"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435813",
        "last_updated": "2025-08-27T17:54:11.435814",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_f5c34da8": {
        "concept_id": "concept_f5c34da8",
        "name": "Source File: __init__.py",
        "description": "Source file: src/api/management/__init__.py\n\n\"\"\"\nAPI Management Package\nAPI key management, rate limiting, and authentication\n\"\"\"\n\nfrom .api_manager import APIManagementSystem\nfrom .rate_limiter import RateLimiter\nfrom .request_tracker import RequestTracker\n\n__all__ = [\n    \"APIManagementSystem\",\n    \"RateLimiter\",\n    \"RequestTracker\"\n]\n",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/api/management/__init__.py",
          "file_type": "python",
          "file_size_bytes": 295,
          "line_count": 14,
          "character_count": 295,
          "word_count": 31,
          "last_modified": "2025-08-26T16:00:59.504502",
          "content_hash": "952d892e7d0ea858e154c58c4a8c29743fc4712f6e4ad5f8f21da3ad27fb012a",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "API",
            "RequestTracker",
            "APIManagementSystem",
            "RateLimiter",
            "Management",
            "Package"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435817",
        "last_updated": "2025-08-27T17:54:11.435818",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_467181bf": {
        "concept_id": "concept_467181bf",
        "name": "Source File: api_manager.py",
        "description": "Source file: src/api/management/api_manager.py\n\n\"\"\"\nAPI Manager\nCore API key management, rate limiting, and authentication\n\"\"\"\n\nimport os\nimport logging\nfrom typing import Optional, Dict, Any\nfrom datetime import datetime, timedelta\nfrom enum import Enum\n\n# Configure logging\nlogger = logging.getLogger(__name__)\n\nclass APISource(Enum):\n    \"\"\"External API sources\"\"\"\n    GOOGLE_SEARCH = \"google_search\"\n    DUCKDUCKGO = \"duckduckgo\"\n    WIKIPEDIA = \"wikipedia\"\n    WIKIDATA = \"wikidata\"\n    OPENAI = \"openai\"\n    ANTHROPIC = \"anthropic\"\n    CUSTOM...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/api/management/api_manager.py",
          "file_type": "python",
          "file_size_bytes": 5287,
          "line_count": 141,
          "character_count": 5287,
          "word_count": 445,
          "last_modified": "2025-08-26T16:00:59.504745",
          "content_hash": "f6febb067abc633ea7e6e9ae6fe446616e097d8cd4f008606d7737ae300b2888",
          "imports": [
            "typing",
            "logging",
            "datetime",
            "os",
            "enum"
          ],
          "dependencies": [],
          "key_concepts": [
            "API",
            "APISource",
            "True",
            "WIKIPEDIA",
            "Load",
            "Special",
            "False",
            "Manages",
            "Initialize",
            "External"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435820",
        "last_updated": "2025-08-27T17:54:11.435821",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_b3f170f7": {
        "concept_id": "concept_b3f170f7",
        "name": "Source File: __init__.py",
        "description": "Source file: src/api/sources/__init__.py\n\n\"\"\"\nAPI Sources Package\nIndividual API source integrations for web search and AI services\n\"\"\"\n\n# API sources will be imported as they are implemented\n\n__all__ = []\n\n# from .web_search.google_search import GoogleSearchAPI\n# from .web_search.duckduckgo import DuckDuckGoAPI\n# from .web_search.wikipedia import WikipediaAPI\n# from .ai_services.openai_service import OpenAIService\n",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/api/sources/__init__.py",
          "file_type": "python",
          "file_size_bytes": 377,
          "line_count": 13,
          "character_count": 377,
          "word_count": 48,
          "last_modified": "2025-08-26T16:00:59.505182",
          "content_hash": "76e4d0cd7b14ab4de021e14c1e730a764a33f8a4ed23007a9ebbf96ff0a4eff7",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "API",
            "DuckDuckGoAPI",
            "Sources",
            "WikipediaAPI",
            "OpenAIService",
            "AI",
            "Individual",
            "GoogleSearchAPI",
            "Package"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435823",
        "last_updated": "2025-08-27T17:54:11.435824",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_86e3aa33": {
        "concept_id": "concept_86e3aa33",
        "name": "Source File: models.py",
        "description": "Source file: src/api/sources/base/models.py\n\n\"\"\"\nBase API Models\nCommon data models for API responses and requests\n\"\"\"\n\nfrom typing import Any, Dict, Optional\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom enum import Enum\n\nclass APIResponseStatus(Enum):\n    \"\"\"API response status\"\"\"\n    SUCCESS = \"success\"\n    RATE_LIMITED = \"rate_limited\"\n    ERROR = \"error\"\n    TIMEOUT = \"timeout\"\n    INVALID_RESPONSE = \"invalid_response\"\n\n@dataclass\nclass APIRequest:\n    \"\"\"API request configuration\"\"\"\n    source: str\n    endpoint...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/api/sources/base/models.py",
          "file_type": "python",
          "file_size_bytes": 1259,
          "line_count": 53,
          "character_count": 1259,
          "word_count": 148,
          "last_modified": "2025-08-26T16:00:59.505608",
          "content_hash": "065de41410850b69d8cb743718b0454510fba73cdf29b6e1318d86522df0be26",
          "imports": [
            "datetime",
            "dataclasses",
            "enum",
            "typing"
          ],
          "dependencies": [],
          "key_concepts": [
            "API",
            "Models",
            "TIMEOUT",
            "APISource",
            "Optional",
            "True",
            "SUCCESS",
            "APIResponse",
            "Dict",
            "Enum"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435826",
        "last_updated": "2025-08-27T17:54:11.435827",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_292cfa2a": {
        "concept_id": "concept_292cfa2a",
        "name": "Source File: __init__.py",
        "description": "Source file: src/api/sources/base/__init__.py\n\n\"\"\"\nBase API Components\nCommon base classes and utilities for API integrations\n\"\"\"\n\nfrom .api_client import BaseAPIClient\nfrom .models import APISource, APIResponse, APIResponseStatus, APIRequest\n\n__all__ = [\n    \"BaseAPIClient\",\n    \"APISource\", \n    \"APIResponse\",\n    \"APIResponseStatus\",\n    \"APIRequest\"\n]\n\n# Additional components will be imported as they are implemented\n# from .response_handler import ResponseHandler\n",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/api/sources/base/__init__.py",
          "file_type": "python",
          "file_size_bytes": 425,
          "line_count": 18,
          "character_count": 425,
          "word_count": 48,
          "last_modified": "2025-08-26T16:00:59.505296",
          "content_hash": "86fc2e328567892ce00549dfcecce87bdf155ab16b8bf99c50fc8cc6c8778959",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "API",
            "APISource",
            "APIResponse",
            "Additional",
            "Base",
            "Components",
            "ResponseHandler",
            "Common",
            "APIRequest",
            "BaseAPIClient"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435829",
        "last_updated": "2025-08-27T17:54:11.435829",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_c3d147a3": {
        "concept_id": "concept_c3d147a3",
        "name": "Source File: api_client.py",
        "description": "Source file: src/api/sources/base/api_client.py\n\n\"\"\"\nBase API Client\nCommon functionality for all API integrations\n\"\"\"\n\nimport time\nimport requests\nimport aiohttp\nimport asyncio\nfrom typing import Optional, Dict, Any\nfrom datetime import datetime\nfrom .models import APIRequest, APIResponse, APIResponseStatus\n\nclass BaseAPIClient:\n    \"\"\"Base class for API clients with common functionality\"\"\"\n    \n    def __init__(self, base_url: str = None, timeout: int = 30):\n        self.base_url = base_url\n        self.timeout = timeout\n        self.session...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/api/sources/base/api_client.py",
          "file_type": "python",
          "file_size_bytes": 6916,
          "line_count": 188,
          "character_count": 6916,
          "word_count": 428,
          "last_modified": "2025-08-26T16:00:59.505542",
          "content_hash": "7fc6c2a11776b0dbcaef9254cea10453493796594bf92291186e1dcf20aa48b1",
          "imports": [
            "time",
            "typing",
            "datetime",
            "aiohttp",
            "asyncio",
            "requests"
          ],
          "dependencies": [],
          "key_concepts": [
            "API",
            "TIMEOUT",
            "SUCCESS",
            "Session",
            "TimeoutError",
            "ValueError",
            "ERROR",
            "Remove",
            "ClientTimeout",
            "Make"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435831",
        "last_updated": "2025-08-27T17:54:11.435832",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_a1fe370b": {
        "concept_id": "concept_a1fe370b",
        "name": "Source File: __init__.py",
        "description": "Source file: src/ai_agents/__init__.py\n\nfrom .ai_agent_system import AIAgentSystem\n",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/ai_agents/__init__.py",
          "file_type": "python",
          "file_size_bytes": 43,
          "line_count": 1,
          "character_count": 43,
          "word_count": 4,
          "last_modified": "2025-08-27T00:11:36.806643",
          "content_hash": "d84986e6c131ff0bf5c389d83cc747da242d952f65baf692f4541df55a782f15",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "AIAgentSystem"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435834",
        "last_updated": "2025-08-27T17:54:11.435835",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_edef81a2": {
        "concept_id": "concept_edef81a2",
        "name": "Source File: ai_agent_system.py",
        "description": "Source file: src/ai_agents/ai_agent_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nAI Agent System - Living Codex\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the AI agent and intelligent operations system is represented as nodes that can:\n\n1. Manage AI agents and create agent nodes\n2. Handle learning operations and create learning nodes\n3. Execute predictions and create prediction nodes\n4. Perform optimizations and create optimization nodes\n5. Integrate consciousness and create consciousness nodes\n\nThis transf...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/ai_agents/ai_agent_system.py",
          "file_type": "python",
          "file_size_bytes": 29868,
          "line_count": 661,
          "character_count": 29774,
          "word_count": 2244,
          "last_modified": "2025-08-27T08:34:18.513296",
          "content_hash": "1b73abb94d6e46dc64b0948b02a894fcca7e1e6ca047e8f6f70928a222446ebe",
          "imports": [
            "random",
            "sys",
            "logging",
            "typing",
            "pathlib",
            "json",
            "datetime",
            "asyncio",
            "math",
            "ontology.enhanced_ontology_system",
            "core.shared_node_system"
          ],
          "dependencies": [],
          "key_concepts": [
            "Union",
            "Predictions",
            "Error",
            "Prediction",
            "Paradox",
            "Start",
            "Integration",
            "Simulate",
            "EnhancedOntologySystem",
            "Advanced"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435837",
        "last_updated": "2025-08-27T17:54:11.435838",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_a90b92c4": {
        "concept_id": "concept_a90b92c4",
        "name": "Source File: demo_testing_system.py",
        "description": "Source file: src/demos/demo_testing_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Platform - Testing System Demo\nDemonstrates the comprehensive testing system capabilities\n\"\"\"\n\nimport sys\nimport os\nimport time\nfrom pathlib import Path\n\ndef print_header(title):\n    \"\"\"Print a formatted header\"\"\"\n    print(\"\\n\" + \"=\" * 60)\n    print(f\"\ud83c\udf1f {title}\")\n    print(\"=\" * 60)\n\ndef print_section(title):\n    \"\"\"Print a formatted section header\"\"\"\n    print(f\"\\n\ud83d\udccb {title}\")\n    print(\"-\" * 40)\n\ndef demo_regression_test_suite():\n    \"\"\"Demonstrate the r...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/demo_testing_system.py",
          "file_type": "python",
          "file_size_bytes": 13057,
          "line_count": 358,
          "character_count": 12835,
          "word_count": 1193,
          "last_modified": "2025-08-26T16:00:59.512160",
          "content_hash": "eedc5c3c818aa5c489e8daacb8241c2db2635917f767dea21c45e0b0bb53dd34",
          "imports": [
            "os",
            "time",
            "pathlib",
            "sys"
          ],
          "dependencies": [],
          "key_concepts": [
            "Verbose",
            "AutonomousFeatureTesting",
            "Summary",
            "Git",
            "Autonomous",
            "Workflow",
            "Error",
            "To",
            "Integration",
            "Scripts"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435840",
        "last_updated": "2025-08-27T17:54:11.435840",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_30da5755": {
        "concept_id": "concept_30da5755",
        "name": "Source File: demo_living_codex_system.py",
        "description": "Source file: src/demos/demo_living_codex_system.py\n\n#!/usr/bin/env python3\n\"\"\"\n\ud83c\udf0a Living Codex System Demonstration\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the living codex system demonstration system is represented as nodes that can:\n\n1. Demonstrate system capabilities and create demonstration nodes\n2. Show user interactions and create interaction nodes\n3. Illustrate system features and create feature nodes\n4. Guide user exploration and create exploration nodes\n5. Validate system functionality and crea...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/demo_living_codex_system.py",
          "file_type": "python",
          "file_size_bytes": 42439,
          "line_count": 889,
          "character_count": 42228,
          "word_count": 3039,
          "last_modified": "2025-08-27T08:34:18.527960",
          "content_hash": "ccbfce6e9fb8678158ee7a56a0f8d0b6b7595e7a5d02434d8604d722c728ef4f",
          "imports": [
            "time",
            "sys",
            "typing",
            "pathlib",
            "json",
            "requests",
            "core.shared_node_system"
          ],
          "dependencies": [],
          "key_concepts": [
            "Availability",
            "Sharing",
            "Forgot",
            "Make",
            "Accessibility",
            "Fill",
            "Navigate",
            "Error",
            "Instructions",
            "Dynamic"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435842",
        "last_updated": "2025-08-27T17:54:11.435843",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_3d28fb45": {
        "concept_id": "concept_3d28fb45",
        "name": "Source File: demo_code_navigation.py",
        "description": "Source file: src/demos/demo_code_navigation.py\n\n#!/usr/bin/env python3\n\"\"\"\nCode Navigation API Demo - Living Codex\nDemonstrates how code files can be navigated through the Living Codex system\n\"\"\"\n\nimport os\nimport sys\nimport json\nfrom pathlib import Path\n\n# Add src to path for modular components\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\ndef create_sample_code_files():\n    \"\"\"Create sample code files for demonstration\"\"\"\n    samples_dir = Path(\"code_navigation_samples\")\n    samples_dir.mkdir(exist_ok=True)\n    \n    # Python sample...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/demo_code_navigation.py",
          "file_type": "python",
          "file_size_bytes": 13378,
          "line_count": 412,
          "character_count": 13268,
          "word_count": 1179,
          "last_modified": "2025-08-26T17:42:55.031007",
          "content_hash": "b4ae03d5ca6c401da1dc5f2c64f18985a65ab524479d2472c4b3dbdf2fa4781b",
          "imports": [
            "typing",
            "sys",
            "dataclasses",
            "pathlib",
            "json",
            "os"
          ],
          "dependencies": [],
          "key_concepts": [
            "Array",
            "Size",
            "Utility",
            "UTF",
            "You",
            "N",
            "Make",
            "CSS",
            "Error",
            "Language"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435845",
        "last_updated": "2025-08-27T17:54:11.435846",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_3539c92d": {
        "concept_id": "concept_3539c92d",
        "name": "Source File: autonomous_decision_demo.py",
        "description": "Source file: src/demos/autonomous_decision_demo.py\n\n#!/usr/bin/env python3\n\"\"\"\nAutonomous Decision Demo - Living Codex\nShows step-by-step how the system decides what to learn next\n\"\"\"\n\nimport sys\nimport asyncio\nfrom pathlib import Path\n\n# Add src to path for modular components\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom ontology.enhanced_ontology_system import EnhancedOntologySystem\nfrom ai_agents.ai_agent_system import AIAgentSystem\n\nclass AutonomousDecisionDemo:\n    \"\"\"Demonstrates autonomous decision-making process\"\"\"\n    \n    ...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/autonomous_decision_demo.py",
          "file_type": "python",
          "file_size_bytes": 15371,
          "line_count": 368,
          "character_count": 15259,
          "word_count": 1069,
          "last_modified": "2025-08-27T00:11:36.815964",
          "content_hash": "861d4b411185635bd9a5c93c512aa3e6fb3388079bd542a04dc7574bfad81fe4",
          "imports": [
            "ai_agents.ai_agent_system",
            "sys",
            "pathlib",
            "asyncio",
            "ontology.enhanced_ontology_system"
          ],
          "dependencies": [],
          "key_concepts": [
            "ANALYSIS",
            "Generating",
            "Autonomous",
            "Unified",
            "Distribution",
            "Dynamic",
            "EnhancedOntologySystem",
            "Generated",
            "Agents",
            "Showing"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435848",
        "last_updated": "2025-08-27T17:54:11.435848",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_96d2f5ca": {
        "concept_id": "concept_96d2f5ca",
        "name": "Source File: __init__.py",
        "description": "Source file: src/demos/__init__.py\n\nfrom .autonomous_learning_demo import AutonomousLearningSystem\nfrom .autonomous_decision_demo import AutonomousDecisionDemo\nfrom .demo_code_navigation import demo_code_navigation\nfrom .demo_tree_sitter import demo_parsing, demo_queries, demo_cli_integration\nfrom .demo_cli_usage import demo_cli_commands\n\n__all__ = [\n    'AutonomousLearningSystem',\n    'AutonomousDecisionDemo', \n    'demo_code_navigation',\n    'demo_parsing',\n    'demo_queries',\n    'demo_cli_integration',\n    'demo_cli_commands'\n...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/__init__.py",
          "file_type": "python",
          "file_size_bytes": 502,
          "line_count": 15,
          "character_count": 502,
          "word_count": 33,
          "last_modified": "2025-08-26T16:00:59.510009",
          "content_hash": "79afe1405d49e870e5f278eac87189172142c518ca120e7ac892bfd85a6a028d",
          "imports": [],
          "dependencies": [],
          "key_concepts": [
            "AutonomousLearningSystem",
            "AutonomousDecisionDemo"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435850",
        "last_updated": "2025-08-27T17:54:11.435851",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_25d18686": {
        "concept_id": "concept_25d18686",
        "name": "Source File: demo_minimal_ice_cycle.py",
        "description": "Source file: src/demos/demo_minimal_ice_cycle.py\n\n#!/usr/bin/env python3\n\"\"\"\nMinimal ICE Bootstrap Cycle Demo - Clean, Error-Free Workflow\n\nThis demo tests the complete cycle using the minimal, clean implementation:\nWATER (current system) \u2192 ICE (bootstrap storage) \u2192 WATER (new functional system)\n\nEnsures zero errors and full functionality for community service.\n\"\"\"\n\nimport sys\nimport time\nimport shutil\nimport tempfile\nfrom pathlib import Path\nimport os\n\ndef create_clean_environment():\n    \"\"\"Create a clean environment for testing\"\"\"\n    print(\"...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/demo_minimal_ice_cycle.py",
          "file_type": "python",
          "file_size_bytes": 10912,
          "line_count": 312,
          "character_count": 10778,
          "word_count": 941,
          "last_modified": "2025-08-26T16:00:59.511590",
          "content_hash": "48ce9cf8f96ae93c2f5c4e5acc01955fe66157ae4f37a2261e2709154fd67849",
          "imports": [
            "time",
            "sys",
            "tempfile",
            "shutil",
            "pathlib",
            "os"
          ],
          "dependencies": [
            "requirements?\\.txt"
          ],
          "key_concepts": [
            "Size",
            "Readiness",
            "Cycle",
            "Scale",
            "Copy",
            "COMPLETE",
            "Provide",
            "Cleaning",
            "Workflow",
            "Error"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435853",
        "last_updated": "2025-08-27T17:54:11.435854",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_4ebd060f": {
        "concept_id": "concept_4ebd060f",
        "name": "Source File: demo_multi_node_network.py",
        "description": "Source file: src/demos/demo_multi_node_network.py\n\n#!/usr/bin/env python3\n\"\"\"\nMulti-Node Network Demonstration System\nShows how multiple Living Codex nodes work together in a distributed network\n\"\"\"\n\nimport os\nimport sys\nimport json\nimport time\nimport threading\nfrom pathlib import Path\nfrom datetime import datetime\nimport subprocess\n\n# Add src to path for imports\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))\n\nfrom src.core.git_ice_storage import GitICEstorage, PublicNodeRegistry, PublicNode\nfrom src.core.git_ice_bootstrap im...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/demo_multi_node_network.py",
          "file_type": "python",
          "file_size_bytes": 11243,
          "line_count": 286,
          "character_count": 11177,
          "word_count": 873,
          "last_modified": "2025-08-26T16:00:59.511730",
          "content_hash": "060ca74cd7f481543ffa49624801e94620f36294b5da5e57bf60cc81172fea46",
          "imports": [
            "time",
            "subprocess",
            "sys",
            "pathlib",
            "json",
            "datetime",
            "threading",
            "os"
          ],
          "dependencies": [],
          "key_concepts": [
            "London",
            "Health",
            "Hub",
            "Based",
            "Network",
            "Simulate",
            "Pacific",
            "GitICEstorage",
            "NA",
            "Codex"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435856",
        "last_updated": "2025-08-27T17:54:11.435857",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_fd57f74e": {
        "concept_id": "concept_fd57f74e",
        "name": "Source File: demo_cli_usage.py",
        "description": "Source file: src/demos/demo_cli_usage.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex CLI - Usage Demonstration\nShows how to use the resonance-aware CLI interface\n\"\"\"\n\nimport subprocess\nimport time\n\ndef demo_cli_commands():\n    \"\"\"Demonstrate CLI commands with explanations\"\"\"\n    \n    print(\"\ud83c\udf1f Living Codex CLI - Usage Demonstration\")\n    print(\"=\" * 60)\n    print()\n    \n    commands = [\n        (\"energy\", \"Check current energy status\"),\n        (\"analyze 'quantum consciousness field'\", \"Analyze resonance of potential content\"),\n        (\"an...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/demo_cli_usage.py",
          "file_type": "python",
          "file_size_bytes": 3884,
          "line_count": 108,
          "character_count": 3819,
          "word_count": 392,
          "last_modified": "2025-08-26T16:00:59.510344",
          "content_hash": "8b09307e91a17aada2c6121eaef59fd1e5f5fda6784e19268ae79721c588f625",
          "imports": [
            "time",
            "subprocess"
          ],
          "dependencies": [],
          "key_concepts": [
            "Principles",
            "Creating",
            "Features",
            "Exit",
            "Resonant",
            "Demonstration",
            "Living",
            "Energy",
            "Scenarios",
            "You"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435859",
        "last_updated": "2025-08-27T17:54:11.435859",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_b468fe1f": {
        "concept_id": "concept_b468fe1f",
        "name": "Source File: demo_multi_node_standalone.py",
        "description": "Source file: src/demos/demo_multi_node_standalone.py\n\n#!/usr/bin/env python3\n\"\"\"\nStandalone Multi-Node Network Demonstration\nShows how multiple Living Codex nodes work together without external dependencies\n\"\"\"\n\nimport os\nimport json\nimport time\nimport random\nfrom datetime import datetime\n\nclass DemoNode:\n    \"\"\"Demonstration node for the Living Codex network\"\"\"\n    \n    def __init__(self, node_id, name, region, capabilities):\n        self.node_id = node_id\n        self.name = name\n        self.region = region\n        self.capabilities = capabiliti...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/demo_multi_node_standalone.py",
          "file_type": "python",
          "file_size_bytes": 11983,
          "line_count": 322,
          "character_count": 11919,
          "word_count": 936,
          "last_modified": "2025-08-26T16:00:59.511859",
          "content_hash": "7d3a45b7f72ce5a6486bbf08ccaa302db654ceab93339bd71bb7a4910c488c16",
          "imports": [
            "time",
            "random",
            "json",
            "datetime",
            "os"
          ],
          "dependencies": [],
          "key_concepts": [
            "London",
            "Health",
            "Hub",
            "Based",
            "DemoNetworkRegistry",
            "Network",
            "Simulate",
            "Pacific",
            "NA",
            "Codex"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435862",
        "last_updated": "2025-08-27T17:54:11.435863",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_d000a000": {
        "concept_id": "concept_d000a000",
        "name": "Source File: demo_git_ice_storage.py",
        "description": "Source file: src/demos/demo_git_ice_storage.py\n\n#!/usr/bin/env python3\n\"\"\"\nDemonstration of Git-Enabled ICE Storage System\nShows how the Living Codex bootstrap system can be globally accessible via Git\n\"\"\"\n\nimport os\nimport sys\nimport json\nimport tempfile\nfrom pathlib import Path\n\n# Add src to path for imports\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))\n\nfrom src.core.git_ice_storage import (\n    GitICEstorage, PublicNodeRegistry, PublicNode, ICEManifest\n)\nfrom src.core.git_ice_bootstrap import GitICEBootstrap, create_b...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/demo_git_ice_storage.py",
          "file_type": "python",
          "file_size_bytes": 9193,
          "line_count": 240,
          "character_count": 9094,
          "word_count": 796,
          "last_modified": "2025-08-26T16:00:59.510911",
          "content_hash": "fec3f907481c8ceb07ee2d787d51b2c43977c333388b0bbf842840b12be861d8",
          "imports": [
            "sys",
            "tempfile",
            "pathlib",
            "json",
            "os"
          ],
          "dependencies": [],
          "key_concepts": [
            "Git",
            "Health",
            "Hub",
            "Topology",
            "README",
            "Network",
            "Peer",
            "Pacific",
            "Script",
            "GitICEstorage"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435865",
        "last_updated": "2025-08-27T17:54:11.435866",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_9ffcc619": {
        "concept_id": "concept_9ffcc619",
        "name": "Source File: demo_ice_bootstrap_cycle.py",
        "description": "Source file: src/demos/demo_ice_bootstrap_cycle.py\n\n#!/usr/bin/env python3\n\"\"\"\nICE Bootstrap Cycle Demo - Complete Error-Free Workflow\n\nThis demo tests the complete cycle:\nWATER (current system) \u2192 ICE (bootstrap storage) \u2192 WATER (new functional system)\n\nEnsures no errors occur during the transformation and the new system is fully functional.\n\"\"\"\n\nimport sys\nimport time\nimport shutil\nimport tempfile\nfrom pathlib import Path\nimport os\n\n# Add src to path for imports\nsys.path.insert(0, str(Path(__file__).parent / \"src\"))\n\ndef create_clean_environment...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/demo_ice_bootstrap_cycle.py",
          "file_type": "python",
          "file_size_bytes": 15291,
          "line_count": 430,
          "character_count": 15111,
          "word_count": 1302,
          "last_modified": "2025-08-26T16:00:59.511306",
          "content_hash": "8c6ec4e67725ea79bb637bd79ef92dcec8509a054857578426be1732c9ca5afe",
          "imports": [
            "time",
            "sys",
            "tempfile",
            "shutil",
            "pathlib",
            "os"
          ],
          "dependencies": [
            "requirements?\\.txt"
          ],
          "key_concepts": [
            "Size",
            "Readiness",
            "Cycle",
            "Scale",
            "Copy",
            "COMPLETE",
            "Provide",
            "Cleaning",
            "Workflow",
            "Error"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435868",
        "last_updated": "2025-08-27T17:54:11.435869",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_9b88aa59": {
        "concept_id": "concept_9b88aa59",
        "name": "Source File: demo_ice_bootstrap.py",
        "description": "Source file: src/demos/demo_ice_bootstrap.py\n\n#!/usr/bin/env python3\n\"\"\"\nICE Bootstrap Demo - Complete Self-Bootstrapping System\n\nThis demo shows the complete process of:\n1. Creating an ICE core from the current system\n2. Bootstrapping the system from the ICE core\n3. Starting the web service for new users\n\"\"\"\n\nimport sys\nimport time\nfrom pathlib import Path\n\n# Add src to path for imports\nsys.path.insert(0, str(Path(__file__).parent / \"src\"))\n\ndef demo_ice_core_creation():\n    \"\"\"Demonstrate creating an ICE core from the current system\"\"\"\n  ...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/demo_ice_bootstrap.py",
          "file_type": "python",
          "file_size_bytes": 6907,
          "line_count": 212,
          "character_count": 6805,
          "word_count": 698,
          "last_modified": "2025-08-26T16:00:59.511152",
          "content_hash": "3e3f6dd0eba40dcc50b7238c4b732230ad70f964533cf26fbb73ec4c8a1c7860",
          "imports": [
            "time",
            "pathlib",
            "sys"
          ],
          "dependencies": [],
          "key_concepts": [
            "Size",
            "Creating",
            "WORKFLOW",
            "Ready",
            "True",
            "Create",
            "COMPLETE",
            "Web",
            "Missing",
            "Living"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435871",
        "last_updated": "2025-08-27T17:54:11.435872",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_3cbb543f": {
        "concept_id": "concept_3cbb543f",
        "name": "Source File: demo_enhanced_features.py",
        "description": "Source file: src/demos/demo_enhanced_features.py\n\n#!/usr/bin/env python3\n\"\"\"\nEnhanced Living Codex Platform - Feature Demonstration\nShowcases discovery, navigation, and collaboration features\n\"\"\"\n\nimport requests\nimport json\nimport time\nfrom datetime import datetime\n\nBASE_URL = \"http://localhost:5003\"\n\ndef print_header(title):\n    \"\"\"Print a formatted header\"\"\"\n    print(f\"\\n{'='*60}\")\n    print(f\"\ud83c\udf1f {title}\")\n    print(f\"{'='*60}\")\n\ndef print_section(title):\n    \"\"\"Print a formatted section\"\"\"\n    print(f\"\\n\ud83d\udd0d {title}\")\n    print(f\"{'-'*40}\")\n\nd...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/demo_enhanced_features.py",
          "file_type": "python",
          "file_size_bytes": 8457,
          "line_count": 223,
          "character_count": 8340,
          "word_count": 739,
          "last_modified": "2025-08-26T16:00:59.510624",
          "content_hash": "72da44baca388e2a44a030b1b9793d19dcf389fd0ef0720c3e465a270e9bae3d",
          "imports": [
            "time",
            "datetime",
            "requests",
            "json"
          ],
          "dependencies": [],
          "key_concepts": [
            "Top",
            "Properly",
            "Hub",
            "Cultural",
            "Navigate",
            "Error",
            "Profile",
            "Style",
            "Endpoints",
            "Codex"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435874",
        "last_updated": "2025-08-27T17:54:11.435874",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_559334d3": {
        "concept_id": "concept_559334d3",
        "name": "Source File: demo_unified_platform.py",
        "description": "Source file: src/demos/demo_unified_platform.py\n\n#!/usr/bin/env python3\n\"\"\"\nUnified Living Codex Platform - Complete Feature Demonstration\nShowcases all four modules: Discovery Engine, Navigation System, Contribution Manager, and User Manager\n\"\"\"\n\nimport requests\nimport json\nimport time\nfrom datetime import datetime\n\nBASE_URL = \"http://localhost:5004\"\n\ndef print_header(title):\n    \"\"\"Print a formatted header\"\"\"\n    print(f\"\\n{'='*70}\")\n    print(f\"\ud83c\udf1f {title}\")\n    print(f\"{'='*70}\")\n\ndef print_section(title):\n    \"\"\"Print a formatted section\"\"\"...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/demo_unified_platform.py",
          "file_type": "python",
          "file_size_bytes": 11845,
          "line_count": 283,
          "character_count": 11667,
          "word_count": 1085,
          "last_modified": "2025-08-26T16:00:59.512413",
          "content_hash": "1b35f04d84746b118652cd148767dbf50970efb87520dae021a4cf9027f3f006",
          "imports": [
            "time",
            "datetime",
            "requests",
            "json"
          ],
          "dependencies": [],
          "key_concepts": [
            "Properly",
            "Hub",
            "Accessibility",
            "Navigate",
            "Unified",
            "Error",
            "Profile",
            "Interests",
            "Integration",
            "Login"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435876",
        "last_updated": "2025-08-27T17:54:11.435877",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_0621ede3": {
        "concept_id": "concept_0621ede3",
        "name": "Source File: autonomous_learning_demo.py",
        "description": "Source file: src/demos/autonomous_learning_demo.py\n\n#!/usr/bin/env python3\n\"\"\"\nAutonomous Learning Demo - Living Codex\nDemonstrates how the system autonomously:\n1. Analyzes its current knowledge gaps\n2. Determines what to learn next\n3. Prioritizes learning tasks\n4. Executes learning autonomously\n5. Evolves based on what it learns\n\"\"\"\n\nimport sys\nimport json\nimport asyncio\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional, Tuple\nfrom dataclasses import dataclass\nfrom datetime import datetime\nimport random\n\n# Add src to path for...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/autonomous_learning_demo.py",
          "file_type": "python",
          "file_size_bytes": 25804,
          "line_count": 610,
          "character_count": 25757,
          "word_count": 1777,
          "last_modified": "2025-08-27T00:11:36.806716",
          "content_hash": "c4db359a844c71e5f09655e1abdcdc7b776aff87e0dbc16e9a87df9b2ee12126",
          "imports": [
            "random",
            "ai_agents.ai_agent_system",
            "sys",
            "typing",
            "dataclasses",
            "pathlib",
            "json",
            "datetime",
            "asyncio",
            "ontology.enhanced_ontology_system"
          ],
          "dependencies": [],
          "key_concepts": [
            "Cycle",
            "Generating",
            "Autonomous",
            "Tuple",
            "Unified",
            "Error",
            "LearningTask",
            "EnhancedOntologySystem",
            "Determines",
            "Generated"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435879",
        "last_updated": "2025-08-27T17:54:11.435880",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_c4bd52b5": {
        "concept_id": "concept_c4bd52b5",
        "name": "Source File: demo_tree_sitter.py",
        "description": "Source file: src/demos/demo_tree_sitter.py\n\n#!/usr/bin/env python3\n\"\"\"\nTree-sitter Code Parser Demo\nShowcases the generic programming language parser and query API\n\"\"\"\n\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add src to path for modular components\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\ndef create_sample_files():\n    \"\"\"Create sample code files for demonstration\"\"\"\n    samples_dir = Path(\"tree_sitter_samples\")\n    samples_dir.mkdir(exist_ok=True)\n    \n    # Python sample\n    python_file = samples_dir / \"sample.py\"\n...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/demo_tree_sitter.py",
          "file_type": "python",
          "file_size_bytes": 10630,
          "line_count": 334,
          "character_count": 10527,
          "word_count": 967,
          "last_modified": "2025-08-26T17:42:55.031118",
          "content_hash": "6f5b8ddea8c40f3fce980160043e6ff67106182abade14d1868f37a193d95b08",
          "imports": [
            "os",
            "pathlib",
            "sys"
          ],
          "dependencies": [],
          "key_concepts": [
            "API",
            "JavaScript",
            "Root",
            "Creating",
            "Show",
            "True",
            "Create",
            "Calculate",
            "Ask",
            "MathOperations"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435882",
        "last_updated": "2025-08-27T17:54:11.435882",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_690bc833": {
        "concept_id": "concept_690bc833",
        "name": "Source File: demo_platform.py",
        "description": "Source file: src/demos/demo_platform.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Platform Demo\nDemonstrates the platform's user management and contribution systems\n\"\"\"\n\nimport sys\nimport os\nfrom pathlib import Path\n\n# Add src to path for imports\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))\n\nfrom platform.user_management import (\n    UserManagementSystem, SkillLevel, CommunicationStyle, LearningStyle\n)\nfrom platform.contribution_system import (\n    ContributionSystem, ContributionType, ContentCategory\n)\n\ndef demo_u...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/demo_platform.py",
          "file_type": "python",
          "file_size_bytes": 14314,
          "line_count": 311,
          "character_count": 14216,
          "word_count": 1097,
          "last_modified": "2025-08-26T16:00:59.512020",
          "content_hash": "924ed25c98c9d5fb755f0405f0216f3e99cbab830a0a27c2bc36e4f503cc7db8",
          "imports": [
            "sys",
            "pathlib",
            "platform.user_management",
            "platform.contribution_system",
            "os"
          ],
          "dependencies": [],
          "key_concepts": [
            "Making",
            "Spanish",
            "INTERMEDIATE",
            "ContentCategory",
            "Workspace",
            "Rodriguez",
            "Accessible",
            "Tech",
            "Cultural",
            "San"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435884",
        "last_updated": "2025-08-27T17:54:11.435885",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_7b994f20": {
        "concept_id": "concept_7b994f20",
        "name": "Source File: demo_git_ice_standalone.py",
        "description": "Source file: src/demos/demo_git_ice_standalone.py\n\n#!/usr/bin/env python3\n\"\"\"\nStandalone Demonstration of Git-Enabled ICE Storage System\nShows how the Living Codex bootstrap system can be globally accessible via Git\n\"\"\"\n\nimport os\nimport sys\nimport json\nimport tempfile\nfrom pathlib import Path\nfrom datetime import datetime\nimport subprocess\nimport hashlib\n\ndef check_git_availability():\n    \"\"\"Check if Git is available on the system\"\"\"\n    try:\n        result = subprocess.run(['git', '--version'], capture_output=True, text=True, check=True)\n     ...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/demo_git_ice_standalone.py",
          "file_type": "python",
          "file_size_bytes": 15378,
          "line_count": 450,
          "character_count": 15247,
          "word_count": 1387,
          "last_modified": "2025-08-26T16:00:59.510781",
          "content_hash": "3471dc5cd974444428e944fd9198dd6410c2b6f54df1132842c342fe1e337bdb",
          "imports": [
            "subprocess",
            "hashlib",
            "sys",
            "tempfile",
            "pathlib",
            "json",
            "datetime",
            "os",
            "flask"
          ],
          "dependencies": [],
          "key_concepts": [
            "HEAD",
            "Git",
            "Health",
            "You",
            "Committed",
            "Hub",
            "Topology",
            "README",
            "Automatic",
            "Network"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435887",
        "last_updated": "2025-08-27T17:54:11.435888",
        "living_node_id": null,
        "epistemic_label": "speculative"
      },
      "concept_f4780088": {
        "concept_id": "concept_f4780088",
        "name": "Source File: demo_water_states.py",
        "description": "Source file: src/demos/demo_water_states.py\n\n#!/usr/bin/env python3\n\"\"\"\nWater State Storage Demo\n\nThis script demonstrates how the Living Codex uses different water states\nto determine optimal storage strategies for different types of data.\n\"\"\"\n\nimport sys\nimport time\nfrom pathlib import Path\n\n# Add src to path for imports\nsys.path.insert(0, str(Path(__file__).parent / \"src\"))\n\nfrom core.water_state_storage import (\n    WaterStateStorage, WaterState, \n    store_as_ice, store_as_water, store_as_vapor, store_as_plasma\n)\n\ndef demo_ice_storage...",
        "concept_type": "source_file",
        "ontological_properties": {
          "file_path": "src/demos/demo_water_states.py",
          "file_type": "python",
          "file_size_bytes": 11433,
          "line_count": 320,
          "character_count": 11291,
          "word_count": 989,
          "last_modified": "2025-08-26T16:00:59.512537",
          "content_hash": "44b852f417d12008515091e3dc8a6ca5dd8bacbc741210a21dad0f2b4939d323",
          "imports": [
            "time",
            "core.water_state_storage",
            "pathlib",
            "sys"
          ],
          "dependencies": [],
          "key_concepts": [
            "States",
            "Compressed",
            "Hash",
            "Streaming",
            "Simulate",
            "Start",
            "WaterState",
            "Retrieve",
            "Codex",
            "Using"
          ],
          "principles": [],
          "water_state": "ws.liquid",
          "fractal_layer": 2,
          "chakra": "ch.throat",
          "frequency": "freq.741",
          "consciousness_mode": "Communication, Expression",
          "quantum_state": "coherent",
          "resonance_score": 0.8,
          "epistemic_label": "engineering",
          "system_principle": "Source file as living node",
          "meta_circular": true
        },
        "vibrational_axes": [
          "Fear\u2194Trust",
          "Protection\u2194Openness"
        ],
        "fractal_relationships": {},
        "consciousness_requirements": [],
        "epistemic_foundations": [],
        "creation_timestamp": "2025-08-27T17:54:11.435890",
        "last_updated": "2025-08-27T17:54:11.435891",
        "living_node_id": null,
        "epistemic_label": "speculative"
      }
    },
    "concept_transformations": {},
    "meta_circular_architectures": {
      "meta_circular_55920": {
        "architecture_id": "meta_circular_55920",
        "system_components": [
          "vibrational_axes_system",
          "fractal_recursion_system",
          "resonance_governance_system",
          "self_generating_system",
          "advanced_ai_integration_system",
          "universal_knowledge_representation_system",
          "concept_discovery",
          "specification_generation",
          "ontological_evolution",
          "consciousness_awareness",
          "autonomous_exploration",
          "meta_circular_architecture"
        ],
        "self_descriptions": [
          "The Living Codex is a meta-circular system that describes itself",
          "The system can generate specifications for its own components",
          "The system can evolve its own ontological structure",
          "The system can discover new concepts about itself",
          "The system can represent any concept as a living node",
          "The system can describe its own architecture completely",
          "The system can expand its own knowledge infinitely"
        ],
        "meta_implementations": [
          "vibrational_axes_system.py - Implements vibrational axes integration",
          "fractal_recursion_system.py - Implements fractal recursion capabilities",
          "resonance_governance_system.py - Implements resonance-first governance",
          "self_generating_system.py - Implements self-specification generation",
          "advanced_ai_integration_system.py - Implements consciousness-aware AI",
          "universal_knowledge_representation_system.py - Implements universal concept representation"
        ],
        "circular_relationships": [
          {
            "from": "vibrational_axes_system",
            "to": "fractal_recursion_system",
            "relationship": "provides_resonance_calculation"
          },
          {
            "from": "fractal_recursion_system",
            "to": "resonance_governance_system",
            "relationship": "provides_fractal_structure"
          },
          {
            "from": "resonance_governance_system",
            "to": "self_generating_system",
            "relationship": "provides_governance_rules"
          },
          {
            "from": "self_generating_system",
            "to": "advanced_ai_integration_system",
            "relationship": "provides_concept_discovery"
          },
          {
            "from": "advanced_ai_integration_system",
            "to": "universal_knowledge_representation_system",
            "relationship": "provides_consciousness_awareness"
          },
          {
            "from": "universal_knowledge_representation_system",
            "to": "vibrational_axes_system",
            "relationship": "provides_universal_concepts"
          }
        ],
        "architecture_confidence": 0.875,
        "completeness_score": 1.0,
        "created_at": "2025-08-27T17:54:11.436884",
        "epistemic_label": "speculative"
      },
      "meta_circular_71947": {
        "architecture_id": "meta_circular_71947",
        "system_components": [
          "vibrational_axes_system",
          "fractal_recursion_system",
          "resonance_governance_system",
          "self_generating_system",
          "advanced_ai_integration_system",
          "universal_knowledge_representation_system",
          "concept_discovery",
          "specification_generation",
          "ontological_evolution",
          "consciousness_awareness",
          "autonomous_exploration",
          "meta_circular_architecture"
        ],
        "self_descriptions": [
          "The Living Codex is a meta-circular system that describes itself",
          "The system can generate specifications for its own components",
          "The system can evolve its own ontological structure",
          "The system can discover new concepts about itself",
          "The system can represent any concept as a living node",
          "The system can describe its own architecture completely",
          "The system can expand its own knowledge infinitely"
        ],
        "meta_implementations": [
          "vibrational_axes_system.py - Implements vibrational axes integration",
          "fractal_recursion_system.py - Implements fractal recursion capabilities",
          "resonance_governance_system.py - Implements resonance-first governance",
          "self_generating_system.py - Implements self-specification generation",
          "advanced_ai_integration_system.py - Implements consciousness-aware AI",
          "universal_knowledge_representation_system.py - Implements universal concept representation"
        ],
        "circular_relationships": [
          {
            "from": "vibrational_axes_system",
            "to": "fractal_recursion_system",
            "relationship": "provides_resonance_calculation"
          },
          {
            "from": "fractal_recursion_system",
            "to": "resonance_governance_system",
            "relationship": "provides_fractal_structure"
          },
          {
            "from": "resonance_governance_system",
            "to": "self_generating_system",
            "relationship": "provides_governance_rules"
          },
          {
            "from": "self_generating_system",
            "to": "advanced_ai_integration_system",
            "relationship": "provides_concept_discovery"
          },
          {
            "from": "advanced_ai_integration_system",
            "to": "universal_knowledge_representation_system",
            "relationship": "provides_consciousness_awareness"
          },
          {
            "from": "universal_knowledge_representation_system",
            "to": "vibrational_axes_system",
            "relationship": "provides_universal_concepts"
          }
        ],
        "architecture_confidence": 0.875,
        "completeness_score": 1.0,
        "created_at": "2025-08-27T17:54:11.436900",
        "epistemic_label": "speculative"
      },
      "meta_circular_79719": {
        "architecture_id": "meta_circular_79719",
        "system_components": [
          "vibrational_axes_system",
          "fractal_recursion_system",
          "resonance_governance_system",
          "self_generating_system",
          "advanced_ai_integration_system",
          "universal_knowledge_representation_system",
          "concept_discovery",
          "specification_generation",
          "ontological_evolution",
          "consciousness_awareness",
          "autonomous_exploration",
          "meta_circular_architecture"
        ],
        "self_descriptions": [
          "The Living Codex is a meta-circular system that describes itself",
          "The system can generate specifications for its own components",
          "The system can evolve its own ontological structure",
          "The system can discover new concepts about itself",
          "The system can represent any concept as a living node",
          "The system can describe its own architecture completely",
          "The system can expand its own knowledge infinitely"
        ],
        "meta_implementations": [
          "vibrational_axes_system.py - Implements vibrational axes integration",
          "fractal_recursion_system.py - Implements fractal recursion capabilities",
          "resonance_governance_system.py - Implements resonance-first governance",
          "self_generating_system.py - Implements self-specification generation",
          "advanced_ai_integration_system.py - Implements consciousness-aware AI",
          "universal_knowledge_representation_system.py - Implements universal concept representation"
        ],
        "circular_relationships": [
          {
            "from": "vibrational_axes_system",
            "to": "fractal_recursion_system",
            "relationship": "provides_resonance_calculation"
          },
          {
            "from": "fractal_recursion_system",
            "to": "resonance_governance_system",
            "relationship": "provides_fractal_structure"
          },
          {
            "from": "resonance_governance_system",
            "to": "self_generating_system",
            "relationship": "provides_governance_rules"
          },
          {
            "from": "self_generating_system",
            "to": "advanced_ai_integration_system",
            "relationship": "provides_concept_discovery"
          },
          {
            "from": "advanced_ai_integration_system",
            "to": "universal_knowledge_representation_system",
            "relationship": "provides_consciousness_awareness"
          },
          {
            "from": "universal_knowledge_representation_system",
            "to": "vibrational_axes_system",
            "relationship": "provides_universal_concepts"
          }
        ],
        "architecture_confidence": 0.875,
        "completeness_score": 1.0,
        "created_at": "2025-08-27T17:54:11.436915",
        "epistemic_label": "speculative"
      }
    },
    "knowledge_expansions": {
      "fractal_expansion_50124": {
        "expansion_id": "fractal_expansion_50124",
        "expansion_type": "fractal",
        "new_concepts_discovered": [
          "fractal_pattern:self_similar",
          "fractal_pattern:cross_scale"
        ],
        "knowledge_boundaries_pushed": [
          "fractal_depth_infinite",
          "self_similarity_universal"
        ],
        "expansion_confidence": 0.4,
        "infinite_potential_score": 0.4,
        "created_at": "2025-08-27T17:54:11.436807",
        "epistemic_label": "speculative"
      },
      "meta_circular_expansion_62798": {
        "expansion_id": "meta_circular_expansion_62798",
        "expansion_type": "meta_circular",
        "new_concepts_discovered": [
          "self_discovery:0",
          "self_specification:0",
          "consciousness_awareness:0",
          "autonomous_exploration:0"
        ],
        "knowledge_boundaries_pushed": [
          "self_awareness_complete",
          "meta_circular_infinite"
        ],
        "expansion_confidence": 1.0,
        "infinite_potential_score": 1.0,
        "created_at": "2025-08-27T17:54:11.436835",
        "epistemic_label": "speculative"
      },
      "ontological_expansion_17166": {
        "expansion_id": "ontological_expansion_17166",
        "expansion_type": "ontological",
        "new_concepts_discovered": [
          "water_state_metaphor:ws.ice",
          "water_state_metaphor:ws.liquid",
          "water_state_metaphor:ws.vapor",
          "water_state_metaphor:ws.plasma",
          "water_state_metaphor:ws.supercritical",
          "water_state_metaphor:ws.structured",
          "water_state_metaphor:ws.colloidal",
          "water_state_metaphor:ws.amorphous",
          "water_state_metaphor:ws.clustered",
          "water_state_metaphor:ws.quantum_coherent",
          "water_state_metaphor:ws.lattice_polymorphs",
          "water_state_metaphor:ws.bose_einstein",
          "chakra_energy:ch.root",
          "chakra_energy:ch.sacral",
          "chakra_energy:ch.solar_plexus",
          "chakra_energy:ch.heart",
          "chakra_energy:ch.throat",
          "chakra_energy:ch.third_eye",
          "chakra_energy:ch.crown",
          "frequency_harmony:freq.396",
          "frequency_harmony:freq.417",
          "frequency_harmony:freq.528",
          "frequency_harmony:freq.639",
          "frequency_harmony:freq.741",
          "frequency_harmony:freq.852",
          "frequency_harmony:freq.963"
        ],
        "knowledge_boundaries_pushed": [
          "ontology_universal",
          "metaphor_infinite"
        ],
        "expansion_confidence": 1.0,
        "infinite_potential_score": 1.0,
        "created_at": "2025-08-27T17:54:11.436863",
        "epistemic_label": "speculative"
      }
    },
    "concept_to_node_mapping": {
      "concept_c8af25eb": "living_node_concept_c8af25eb",
      "concept_3ae49c17": "living_node_concept_3ae49c17",
      "concept_493ec777": "living_node_concept_493ec777",
      "concept_7d9bf946": "living_node_concept_7d9bf946",
      "concept_44b09f73": "living_node_concept_44b09f73",
      "concept_9c0bedf9": "living_node_concept_9c0bedf9",
      "concept_5f2bb7ea": "living_node_concept_5f2bb7ea",
      "concept_84476e9e": "living_node_concept_84476e9e",
      "concept_f747406c": "living_node_concept_f747406c",
      "concept_c160b82a": "living_node_concept_c160b82a",
      "concept_4b6d1370": "living_node_concept_4b6d1370",
      "concept_20790c77": "living_node_concept_20790c77",
      "concept_e08febdf": "living_node_concept_e08febdf",
      "concept_c5d9250b": "living_node_concept_c5d9250b",
      "concept_a49ba553": "living_node_concept_a49ba553",
      "concept_0def796b": "living_node_concept_0def796b",
      "concept_167bf9bd": "living_node_concept_167bf9bd",
      "concept_9bf8a702": "living_node_concept_9bf8a702",
      "concept_73f3206d": "living_node_concept_73f3206d",
      "concept_097e5a8c": "living_node_concept_097e5a8c",
      "concept_b0be47c2": "living_node_concept_b0be47c2",
      "concept_41160098": "living_node_concept_41160098",
      "concept_0aae629a": "living_node_concept_0aae629a",
      "concept_80ccae41": "living_node_concept_80ccae41",
      "concept_90933d19": "living_node_concept_90933d19",
      "concept_883697e0": "living_node_concept_883697e0",
      "concept_0fdf8228": "living_node_concept_0fdf8228",
      "concept_e6a077b2": "living_node_concept_e6a077b2",
      "concept_58351549": "living_node_concept_58351549",
      "concept_b00c8394": "living_node_concept_b00c8394",
      "concept_5936fa3a": "living_node_concept_5936fa3a",
      "concept_02db6383": "living_node_concept_02db6383",
      "concept_c2606ee1": "living_node_concept_c2606ee1",
      "concept_8e5515c8": "living_node_concept_8e5515c8",
      "concept_e7caefc4": "living_node_concept_e7caefc4",
      "concept_1a25f42d": "living_node_concept_1a25f42d",
      "concept_96e30e19": "living_node_concept_96e30e19",
      "concept_e4ae31c7": "living_node_concept_e4ae31c7",
      "concept_baa549d1": "living_node_concept_baa549d1",
      "concept_a4b286cf": "living_node_concept_a4b286cf",
      "concept_9c842681": "living_node_concept_9c842681",
      "concept_ffc89cd5": "living_node_concept_ffc89cd5",
      "concept_7d6c83a9": "living_node_concept_7d6c83a9",
      "concept_106fe9fa": "living_node_concept_106fe9fa",
      "concept_440085f1": "living_node_concept_440085f1",
      "concept_27880236": "living_node_concept_27880236",
      "concept_c3da4fec": "living_node_concept_c3da4fec",
      "concept_9a858bf2": "living_node_concept_9a858bf2",
      "concept_a10f99c5": "living_node_concept_a10f99c5",
      "concept_a2fbb404": "living_node_concept_a2fbb404",
      "concept_d5f3a9d1": "living_node_concept_d5f3a9d1",
      "concept_04e407f2": "living_node_concept_04e407f2",
      "concept_eeb159ec": "living_node_concept_eeb159ec",
      "concept_59b2171d": "living_node_concept_59b2171d",
      "concept_599c87be": "living_node_concept_599c87be",
      "concept_6178720d": "living_node_concept_6178720d",
      "concept_1b846206": "living_node_concept_1b846206",
      "concept_fa9f8bb2": "living_node_concept_fa9f8bb2",
      "concept_f4e4e6d9": "living_node_concept_f4e4e6d9",
      "concept_f14e4a04": "living_node_concept_f14e4a04",
      "concept_55d60040": "living_node_concept_55d60040",
      "concept_4b52f052": "living_node_concept_4b52f052",
      "concept_42e57bd1": "living_node_concept_42e57bd1",
      "concept_803ebf68": "living_node_concept_803ebf68",
      "concept_35a2d585": "living_node_concept_35a2d585",
      "concept_be8c10d6": "living_node_concept_be8c10d6",
      "concept_dfb01d62": "living_node_concept_dfb01d62",
      "concept_82c94026": "living_node_concept_82c94026",
      "concept_83736a6c": "living_node_concept_83736a6c",
      "concept_45b18b22": "living_node_concept_45b18b22",
      "concept_5021bcb7": "living_node_concept_5021bcb7",
      "concept_74889fb5": "living_node_concept_74889fb5",
      "concept_4f99362f": "living_node_concept_4f99362f",
      "concept_43497dac": "living_node_concept_43497dac",
      "concept_278d28e6": "living_node_concept_278d28e6",
      "concept_ef6e663e": "living_node_concept_ef6e663e",
      "concept_39c27379": "living_node_concept_39c27379",
      "concept_f8654231": "living_node_concept_f8654231",
      "concept_1b2903a7": "living_node_concept_1b2903a7",
      "concept_04ab1408": "living_node_concept_04ab1408",
      "concept_9cc6f37a": "living_node_concept_9cc6f37a",
      "concept_12ba5d9e": "living_node_concept_12ba5d9e",
      "concept_9dd94478": "living_node_concept_9dd94478",
      "concept_b33c73e2": "living_node_concept_b33c73e2",
      "concept_0f17cdda": "living_node_concept_0f17cdda",
      "concept_5610a0a4": "living_node_concept_5610a0a4",
      "concept_f48d0d89": "living_node_concept_f48d0d89",
      "concept_ad7fffb2": "living_node_concept_ad7fffb2",
      "concept_9e992d2a": "living_node_concept_9e992d2a",
      "concept_250ef215": "living_node_concept_250ef215",
      "concept_3235441f": "living_node_concept_3235441f",
      "concept_4e90e2c7": "living_node_concept_4e90e2c7",
      "concept_f17b294c": "living_node_concept_f17b294c",
      "concept_841bf474": "living_node_concept_841bf474",
      "concept_6b8aa26c": "living_node_concept_6b8aa26c",
      "concept_d2414807": "living_node_concept_d2414807",
      "concept_b1d75114": "living_node_concept_b1d75114",
      "concept_02180bfb": "living_node_concept_02180bfb",
      "concept_67185f2d": "living_node_concept_67185f2d",
      "concept_b88b7c38": "living_node_concept_b88b7c38",
      "concept_8c6131c7": "living_node_concept_8c6131c7",
      "concept_4fbfd30b": "living_node_concept_4fbfd30b",
      "concept_a3258ff2": "living_node_concept_a3258ff2",
      "concept_290de9c2": "living_node_concept_290de9c2",
      "concept_114b8d46": "living_node_concept_114b8d46",
      "concept_8d837b7d": "living_node_concept_8d837b7d",
      "concept_4af40695": "living_node_concept_4af40695",
      "concept_2941b7b9": "living_node_concept_2941b7b9",
      "concept_bbdde53e": "living_node_concept_bbdde53e",
      "concept_1ed72188": "living_node_concept_1ed72188",
      "concept_fbe8adcb": "living_node_concept_fbe8adcb",
      "concept_399ee56d": "living_node_concept_399ee56d",
      "concept_93ac7940": "living_node_concept_93ac7940",
      "concept_add266a6": "living_node_concept_add266a6",
      "concept_81dfe6c8": "living_node_concept_81dfe6c8",
      "concept_ad3d351a": "living_node_concept_ad3d351a",
      "concept_139c273a": "living_node_concept_139c273a",
      "concept_5d6dbb66": "living_node_concept_5d6dbb66",
      "concept_f5c34da8": "living_node_concept_f5c34da8",
      "concept_467181bf": "living_node_concept_467181bf",
      "concept_b3f170f7": "living_node_concept_b3f170f7",
      "concept_86e3aa33": "living_node_concept_86e3aa33",
      "concept_292cfa2a": "living_node_concept_292cfa2a",
      "concept_c3d147a3": "living_node_concept_c3d147a3",
      "concept_a1fe370b": "living_node_concept_a1fe370b",
      "concept_edef81a2": "living_node_concept_edef81a2",
      "concept_a90b92c4": "living_node_concept_a90b92c4",
      "concept_30da5755": "living_node_concept_30da5755",
      "concept_3d28fb45": "living_node_concept_3d28fb45",
      "concept_3539c92d": "living_node_concept_3539c92d",
      "concept_96d2f5ca": "living_node_concept_96d2f5ca",
      "concept_25d18686": "living_node_concept_25d18686",
      "concept_4ebd060f": "living_node_concept_4ebd060f",
      "concept_fd57f74e": "living_node_concept_fd57f74e",
      "concept_b468fe1f": "living_node_concept_b468fe1f",
      "concept_d000a000": "living_node_concept_d000a000",
      "concept_9ffcc619": "living_node_concept_9ffcc619",
      "concept_9b88aa59": "living_node_concept_9b88aa59",
      "concept_3cbb543f": "living_node_concept_3cbb543f",
      "concept_559334d3": "living_node_concept_559334d3",
      "concept_0621ede3": "living_node_concept_0621ede3",
      "concept_c4bd52b5": "living_node_concept_c4bd52b5",
      "concept_690bc833": "living_node_concept_690bc833",
      "concept_7b994f20": "living_node_concept_7b994f20",
      "concept_f4780088": "living_node_concept_f4780088"
    },
    "node_to_concept_mapping": {
      "living_node_concept_c8af25eb": "concept_c8af25eb",
      "living_node_concept_3ae49c17": "concept_3ae49c17",
      "living_node_concept_493ec777": "concept_493ec777",
      "living_node_concept_7d9bf946": "concept_7d9bf946",
      "living_node_concept_44b09f73": "concept_44b09f73",
      "living_node_concept_9c0bedf9": "concept_9c0bedf9",
      "living_node_concept_5f2bb7ea": "concept_5f2bb7ea",
      "living_node_concept_84476e9e": "concept_84476e9e",
      "living_node_concept_f747406c": "concept_f747406c",
      "living_node_concept_c160b82a": "concept_c160b82a",
      "living_node_concept_4b6d1370": "concept_4b6d1370",
      "living_node_concept_20790c77": "concept_20790c77",
      "living_node_concept_e08febdf": "concept_e08febdf",
      "living_node_concept_c5d9250b": "concept_c5d9250b",
      "living_node_concept_a49ba553": "concept_a49ba553",
      "living_node_concept_0def796b": "concept_0def796b",
      "living_node_concept_167bf9bd": "concept_167bf9bd",
      "living_node_concept_9bf8a702": "concept_9bf8a702",
      "living_node_concept_73f3206d": "concept_73f3206d",
      "living_node_concept_097e5a8c": "concept_097e5a8c",
      "living_node_concept_b0be47c2": "concept_b0be47c2",
      "living_node_concept_41160098": "concept_41160098",
      "living_node_concept_0aae629a": "concept_0aae629a",
      "living_node_concept_80ccae41": "concept_80ccae41",
      "living_node_concept_90933d19": "concept_90933d19",
      "living_node_concept_883697e0": "concept_883697e0",
      "living_node_concept_0fdf8228": "concept_0fdf8228",
      "living_node_concept_e6a077b2": "concept_e6a077b2",
      "living_node_concept_58351549": "concept_58351549",
      "living_node_concept_b00c8394": "concept_b00c8394",
      "living_node_concept_5936fa3a": "concept_5936fa3a",
      "living_node_concept_02db6383": "concept_02db6383",
      "living_node_concept_c2606ee1": "concept_c2606ee1",
      "living_node_concept_8e5515c8": "concept_8e5515c8",
      "living_node_concept_e7caefc4": "concept_e7caefc4",
      "living_node_concept_1a25f42d": "concept_1a25f42d",
      "living_node_concept_96e30e19": "concept_96e30e19",
      "living_node_concept_e4ae31c7": "concept_e4ae31c7",
      "living_node_concept_baa549d1": "concept_baa549d1",
      "living_node_concept_a4b286cf": "concept_a4b286cf",
      "living_node_concept_9c842681": "concept_9c842681",
      "living_node_concept_ffc89cd5": "concept_ffc89cd5",
      "living_node_concept_7d6c83a9": "concept_7d6c83a9",
      "living_node_concept_106fe9fa": "concept_106fe9fa",
      "living_node_concept_440085f1": "concept_440085f1",
      "living_node_concept_27880236": "concept_27880236",
      "living_node_concept_c3da4fec": "concept_c3da4fec",
      "living_node_concept_9a858bf2": "concept_9a858bf2",
      "living_node_concept_a10f99c5": "concept_a10f99c5",
      "living_node_concept_a2fbb404": "concept_a2fbb404",
      "living_node_concept_d5f3a9d1": "concept_d5f3a9d1",
      "living_node_concept_04e407f2": "concept_04e407f2",
      "living_node_concept_eeb159ec": "concept_eeb159ec",
      "living_node_concept_59b2171d": "concept_59b2171d",
      "living_node_concept_599c87be": "concept_599c87be",
      "living_node_concept_6178720d": "concept_6178720d",
      "living_node_concept_1b846206": "concept_1b846206",
      "living_node_concept_fa9f8bb2": "concept_fa9f8bb2",
      "living_node_concept_f4e4e6d9": "concept_f4e4e6d9",
      "living_node_concept_f14e4a04": "concept_f14e4a04",
      "living_node_concept_55d60040": "concept_55d60040",
      "living_node_concept_4b52f052": "concept_4b52f052",
      "living_node_concept_42e57bd1": "concept_42e57bd1",
      "living_node_concept_803ebf68": "concept_803ebf68",
      "living_node_concept_35a2d585": "concept_35a2d585",
      "living_node_concept_be8c10d6": "concept_be8c10d6",
      "living_node_concept_dfb01d62": "concept_dfb01d62",
      "living_node_concept_82c94026": "concept_82c94026",
      "living_node_concept_83736a6c": "concept_83736a6c",
      "living_node_concept_45b18b22": "concept_45b18b22",
      "living_node_concept_5021bcb7": "concept_5021bcb7",
      "living_node_concept_74889fb5": "concept_74889fb5",
      "living_node_concept_4f99362f": "concept_4f99362f",
      "living_node_concept_43497dac": "concept_43497dac",
      "living_node_concept_278d28e6": "concept_278d28e6",
      "living_node_concept_ef6e663e": "concept_ef6e663e",
      "living_node_concept_39c27379": "concept_39c27379",
      "living_node_concept_f8654231": "concept_f8654231",
      "living_node_concept_1b2903a7": "concept_1b2903a7",
      "living_node_concept_04ab1408": "concept_04ab1408",
      "living_node_concept_9cc6f37a": "concept_9cc6f37a",
      "living_node_concept_12ba5d9e": "concept_12ba5d9e",
      "living_node_concept_9dd94478": "concept_9dd94478",
      "living_node_concept_b33c73e2": "concept_b33c73e2",
      "living_node_concept_0f17cdda": "concept_0f17cdda",
      "living_node_concept_5610a0a4": "concept_5610a0a4",
      "living_node_concept_f48d0d89": "concept_f48d0d89",
      "living_node_concept_ad7fffb2": "concept_ad7fffb2",
      "living_node_concept_9e992d2a": "concept_9e992d2a",
      "living_node_concept_250ef215": "concept_250ef215",
      "living_node_concept_3235441f": "concept_3235441f",
      "living_node_concept_4e90e2c7": "concept_4e90e2c7",
      "living_node_concept_f17b294c": "concept_f17b294c",
      "living_node_concept_841bf474": "concept_841bf474",
      "living_node_concept_6b8aa26c": "concept_6b8aa26c",
      "living_node_concept_d2414807": "concept_d2414807",
      "living_node_concept_b1d75114": "concept_b1d75114",
      "living_node_concept_02180bfb": "concept_02180bfb",
      "living_node_concept_67185f2d": "concept_67185f2d",
      "living_node_concept_b88b7c38": "concept_b88b7c38",
      "living_node_concept_8c6131c7": "concept_8c6131c7",
      "living_node_concept_4fbfd30b": "concept_4fbfd30b",
      "living_node_concept_a3258ff2": "concept_a3258ff2",
      "living_node_concept_290de9c2": "concept_290de9c2",
      "living_node_concept_114b8d46": "concept_114b8d46",
      "living_node_concept_8d837b7d": "concept_8d837b7d",
      "living_node_concept_4af40695": "concept_4af40695",
      "living_node_concept_2941b7b9": "concept_2941b7b9",
      "living_node_concept_bbdde53e": "concept_bbdde53e",
      "living_node_concept_1ed72188": "concept_1ed72188",
      "living_node_concept_fbe8adcb": "concept_fbe8adcb",
      "living_node_concept_399ee56d": "concept_399ee56d",
      "living_node_concept_93ac7940": "concept_93ac7940",
      "living_node_concept_add266a6": "concept_add266a6",
      "living_node_concept_81dfe6c8": "concept_81dfe6c8",
      "living_node_concept_ad3d351a": "concept_ad3d351a",
      "living_node_concept_139c273a": "concept_139c273a",
      "living_node_concept_5d6dbb66": "concept_5d6dbb66",
      "living_node_concept_f5c34da8": "concept_f5c34da8",
      "living_node_concept_467181bf": "concept_467181bf",
      "living_node_concept_b3f170f7": "concept_b3f170f7",
      "living_node_concept_86e3aa33": "concept_86e3aa33",
      "living_node_concept_292cfa2a": "concept_292cfa2a",
      "living_node_concept_c3d147a3": "concept_c3d147a3",
      "living_node_concept_a1fe370b": "concept_a1fe370b",
      "living_node_concept_edef81a2": "concept_edef81a2",
      "living_node_concept_a90b92c4": "concept_a90b92c4",
      "living_node_concept_30da5755": "concept_30da5755",
      "living_node_concept_3d28fb45": "concept_3d28fb45",
      "living_node_concept_3539c92d": "concept_3539c92d",
      "living_node_concept_96d2f5ca": "concept_96d2f5ca",
      "living_node_concept_25d18686": "concept_25d18686",
      "living_node_concept_4ebd060f": "concept_4ebd060f",
      "living_node_concept_fd57f74e": "concept_fd57f74e",
      "living_node_concept_b468fe1f": "concept_b468fe1f",
      "living_node_concept_d000a000": "concept_d000a000",
      "living_node_concept_9ffcc619": "concept_9ffcc619",
      "living_node_concept_9b88aa59": "concept_9b88aa59",
      "living_node_concept_3cbb543f": "concept_3cbb543f",
      "living_node_concept_559334d3": "concept_559334d3",
      "living_node_concept_0621ede3": "concept_0621ede3",
      "living_node_concept_c4bd52b5": "concept_c4bd52b5",
      "living_node_concept_690bc833": "concept_690bc833",
      "living_node_concept_7b994f20": "concept_7b994f20",
      "living_node_concept_f4780088": "concept_f4780088"
    }
  },
  "fractal_system": {
    "fractal_nodes": {
      "living_node_concept_c8af25eb": {
        "node_id": "living_node_concept_c8af25eb",
        "name": "Source File: requirements.txt",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_c8af25eb",
          "meso": "meso_living_node_concept_c8af25eb",
          "macro": "macro_living_node_concept_c8af25eb",
          "meta": "meta_living_node_concept_c8af25eb"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_c8af25eb",
          "concept_type": "source_file",
          "description": "Source file: requirements.txt\n\n# Core dependencies\nneo4j>=4.4.0\nrequests>=2.28.0\nopenai>=0.27.0\npython-dotenv>=0.19.0\npsycopg2-binary>=2.9.0\n# sqlite3 is built into Python 3.9+\n# pathlib2 is built into Python 3.4+\n# asyncio is built into Python 3.7+\naiohttp>=3.8.0\nwebsockets>=10.0\nnumpy>=1.21.0\npandas>=1.3.0\nmatplotlib>=3.5.0\nseaborn>=0.11.0\nscikit-learn>=1.0.0\nscipy>=1.7.0\njupyter>=1.0.0\nipython>=7.0.0\npytest>=6.0.0\npytest-asyncio>=0.18.0\npytest-cov>=3.0.0\nblack>=22.0.0\nflake8>=4.0.0\nmypy>=0.950\npre-commit>=2.20.0\n\n# Digital...",
          "ontological_properties": {
            "file_path": "requirements.txt",
            "file_type": "text",
            "file_size_bytes": 1313,
            "line_count": 63,
            "character_count": 1313,
            "word_count": 96,
            "last_modified": "2025-08-26T16:00:59.503435",
            "content_hash": "aa6914001b297e930930337d698572f42d2761045ca38b9e1594a68700a9c8d3",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Login",
              "Tree",
              "Pillow",
              "Web",
              "Python",
              "Individual",
              "Flask",
              "Digital",
              "Core"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_3ae49c17": {
        "node_id": "living_node_concept_3ae49c17",
        "name": "Source File: requirements-docker.txt",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_3ae49c17",
          "meso": "meso_living_node_concept_3ae49c17",
          "macro": "macro_living_node_concept_3ae49c17",
          "meta": "meta_living_node_concept_3ae49c17"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_3ae49c17",
          "concept_type": "source_file",
          "description": "Source file: requirements-docker.txt\n\n# Docker-compatible requirements for Living Codex\n# Core dependencies only - essential packages that are guaranteed to work\n\n# Core system dependencies\nrequests>=2.28.0\npython-dotenv>=0.19.0\naiohttp>=3.8.0\nwebsockets>=10.0\n\n# Data processing (core)\nnumpy>=1.21.0\npandas>=1.3.0\n\n# Web framework\nFlask>=2.0.0\nFlask-Login>=0.6.0\nWerkzeug>=2.0.0\n\n# Note: sqlite3 is built into Python - no need to install\n# Note: Removed neo4j temporarily to avoid compatibility issues\n# Note: Removed problematic tree-si...",
          "ontological_properties": {
            "file_path": "requirements-docker.txt",
            "file_type": "text",
            "file_size_bytes": 592,
            "line_count": 22,
            "character_count": 592,
            "word_count": 79,
            "last_modified": "2025-08-26T16:00:59.503362",
            "content_hash": "ea564d309aaeca1b96db84cf16a61e948bfba1e72f011edc66c8484ba77f89ea",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Data",
              "Removed",
              "Login",
              "Codex",
              "Note",
              "These",
              "Web",
              "Python",
              "Living",
              "ML"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_493ec777": {
        "node_id": "living_node_concept_493ec777",
        "name": "Source File: README.md",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_493ec777",
          "meso": "meso_living_node_concept_493ec777",
          "macro": "macro_living_node_concept_493ec777",
          "meta": "meta_living_node_concept_493ec777"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_493ec777",
          "concept_type": "source_file",
          "description": "Source file: README.md\n\n# \ud83c\udf1f Living Codex - Transcendent Knowledge System\n\nA **transcendent, unified intelligent knowledge system** that represents the cutting edge of AI, consciousness simulation, and quantum-inspired knowledge representation.\n\n## \ud83d\ude80 **What is the Living Codex?**\n\nThe Living Codex is an **autonomous, self-evolving artificial intelligence system** that combines:\n\n- **\ud83c\udf0c Quantum-inspired knowledge representation** with superposition states and entanglement\n- **\ud83e\udde0 Consciousness simulation** with multi-level ...",
          "ontological_properties": {
            "file_path": "README.md",
            "file_type": "markdown",
            "file_size_bytes": 8901,
            "line_count": 231,
            "character_count": 8565,
            "word_count": 1027,
            "last_modified": "2025-08-26T16:00:59.470610",
            "content_hash": "2fb41e2495a71baa972beef2673f072eea7ed29c8828de51e683176659d0d8af",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Identification",
              "Progressing",
              "Ultimate",
              "Reality",
              "Autonomous",
              "Unified",
              "Future",
              "README",
              "A",
              "Individual"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_7d9bf946": {
        "node_id": "living_node_concept_7d9bf946",
        "name": "Source File: living_codex_complete_state.json",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_7d9bf946",
          "meso": "meso_living_node_concept_7d9bf946",
          "macro": "macro_living_node_concept_7d9bf946",
          "meta": "meta_living_node_concept_7d9bf946"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_7d9bf946",
          "concept_type": "source_file",
          "description": "Source file: living_codex_complete_state.json\n\n{\n  \"metadata\": {\n    \"save_timestamp\": \"2025-08-27T17:36:22.739205\",\n    \"system_version\": \"2.0.0\",\n    \"total_systems\": 6\n  },\n  \"universal_system\": {\n    \"universal_concepts\": {\n      \"concept_c8af25eb\": {\n        \"concept_id\": \"concept_c8af25eb\",\n        \"name\": \"Source File: requirements.txt\",\n        \"description\": \"Source file: requirements.txt\\n\\n# Core dependencies\\nneo4j>=4.4.0\\nrequests>=2.28.0\\nopenai>=0.27.0\\npython-dotenv>=0.19.0\\npsycopg2-binary>=2.9.0\\n# sqlite3 is built into Pyt...",
          "ontological_properties": {
            "file_path": "living_codex_complete_state.json",
            "file_type": "json",
            "file_size_bytes": 832561,
            "line_count": 19474,
            "character_count": 832561,
            "word_count": 48120,
            "last_modified": "2025-08-27T17:37:09.386844",
            "content_hash": "5da9d9bfd1e8b987c1e2e8817035a434aad4d31468a91dccd46c80b8d6e04015",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "HEAD",
              "Principles",
              "Tempo",
              "MagicMock",
              "UserProfile",
              "Summary",
              "SUCCESS",
              "Japan",
              "ContentCategory",
              "SPECULATIVE"
            ],
            "principles": [
              "ResonancePattern",
              "UniversalConcept",
              "MetaCircularArchitecture",
              "SacredGeometryPattern",
              "AutoDiscoveredConcept"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_44b09f73": {
        "node_id": "living_node_concept_44b09f73",
        "name": "Source File: TREE_SITTER_README.md",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_44b09f73",
          "meso": "meso_living_node_concept_44b09f73",
          "macro": "macro_living_node_concept_44b09f73",
          "meta": "meta_living_node_concept_44b09f73"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_44b09f73",
          "concept_type": "source_file",
          "description": "Source file: docs/TREE_SITTER_README.md\n\n# Tree-sitter Code Parser Integration\n\nThe Living Codex now includes a generic Tree-sitter-based code parser that can analyze any programming language file and provide a powerful query API for navigating syntax nodes.\n\n## \ud83d\ude80 Features\n\n### **Generic Language Support**\n- **Python**: Functions, classes, methods, imports, etc.\n- **JavaScript/TypeScript**: Functions, classes, arrow functions, JSX\n- **HTML**: Elements, attributes, tags, structure\n- **CSS**: Selectors, properties, rules\n- **JSON**: Obje...",
          "ontological_properties": {
            "file_path": "docs/TREE_SITTER_README.md",
            "file_type": "markdown",
            "file_size_bytes": 8670,
            "line_count": 299,
            "character_count": 8619,
            "word_count": 1026,
            "last_modified": "2025-08-26T16:00:59.498808",
            "content_hash": "5459f708aeb2eda0385734b29be58e653ccca8d0185266c7bea6364a83e36eae",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Selectors",
              "Support",
              "Migration",
              "Full",
              "Docs",
              "PHP",
              "Resources",
              "UTF",
              "Bash",
              "CSS"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_9c0bedf9": {
        "node_id": "living_node_concept_9c0bedf9",
        "name": "Source File: root_living_codex_specification.md",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_9c0bedf9",
          "meso": "meso_living_node_concept_9c0bedf9",
          "macro": "macro_living_node_concept_9c0bedf9",
          "meta": "meta_living_node_concept_9c0bedf9"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_9c0bedf9",
          "concept_type": "source_file",
          "description": "Source file: docs/root_living_codex_specification.md\n\n# Living Codex Specification \u2014 Draft 1.0 (Complete Ontology & System Integration)\n\n> This edition represents the complete Living Codex specification with full ontological mapping, comprehensive system components, and all features integrated into a unified framework.\n\n## \ud83c\udf1f Meta-Implementation Layer \u2014 Zeroeth Fractal Layer\n\n### **What We Have Learned About System Design & Implementation**\n\nThrough the iterative development of the Living Codex fractal node system, we have discovered fundamental pri...",
          "ontological_properties": {
            "file_path": "docs/root_living_codex_specification.md",
            "file_type": "markdown",
            "file_size_bytes": 45423,
            "line_count": 791,
            "character_count": 42579,
            "word_count": 5719,
            "last_modified": "2025-08-26T16:00:59.471124",
            "content_hash": "405db04929067927a5b7d4203068e988883918c32bfb23c595df6b9793ac9925",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Principles",
              "Optimizer",
              "Human",
              "Summary",
              "Scale",
              "Flower",
              "TXT",
              "Assumptions",
              "Ultimate",
              "Sun"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_5f2bb7ea": {
        "node_id": "living_node_concept_5f2bb7ea",
        "name": "Source File: THE_STORY_OF_THE_LIVING_CODEX.md",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_5f2bb7ea",
          "meso": "meso_living_node_concept_5f2bb7ea",
          "macro": "macro_living_node_concept_5f2bb7ea",
          "meta": "meta_living_node_concept_5f2bb7ea"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_5f2bb7ea",
          "concept_type": "source_file",
          "description": "Source file: docs/THE_STORY_OF_THE_LIVING_CODEX.md\n\n# The Story of the Living Codex\n\nOnce upon a time, in a world not so different from ours, people had a big problem. They were all working on amazing ideas, but they couldn't share them with each other. It was like having a thousand brilliant minds, each working alone in the dark.\n\nScientists in Japan had figured out how to make clean energy. Artists in Brazil had creative ways to bring communities together. Engineers in Norway knew how to build storm-proof buildings. But they couldn't talk to ea...",
          "ontological_properties": {
            "file_path": "docs/THE_STORY_OF_THE_LIVING_CODEX.md",
            "file_type": "markdown",
            "file_size_bytes": 8158,
            "line_count": 69,
            "character_count": 8158,
            "word_count": 1312,
            "last_modified": "2025-08-27T16:56:21.683019",
            "content_hash": "204f22d344b3c09685768959d04945a4cad4f1330cd2f5d1d2bf88e4e745010c",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Imagine",
              "Japan",
              "Amazing",
              "Scientists",
              "Ask",
              "Have",
              "Living",
              "You",
              "In",
              "Finland"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_84476e9e": {
        "node_id": "living_node_concept_84476e9e",
        "name": "Source File: README.md",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_84476e9e",
          "meso": "meso_living_node_concept_84476e9e",
          "macro": "macro_living_node_concept_84476e9e",
          "meta": "meta_living_node_concept_84476e9e"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_84476e9e",
          "concept_type": "source_file",
          "description": "Source file: docs/README.md\n\n# \ud83d\udcda **Living Codex Documentation**\n\nWelcome to the comprehensive documentation for the Living Codex system - a fractal, holographic knowledge management platform.\n\n## \ud83d\uddc2\ufe0f **Documentation Structure**\n\n### **\ud83d\udccb Overview**\n- **[Complete System Documentation](overview/COMPLETE_SYSTEM_DOCUMENTATION.md)** - Comprehensive system overview and guide\n\n### **\ud83c\udfd7\ufe0f Architecture**\n- **[Developer Architecture Guide](architecture/DEVELOPER_ARCHITECTURE_GUIDE.md)** - Technical architecture and development guide\n\n###...",
          "ontological_properties": {
            "file_path": "docs/README.md",
            "file_type": "markdown",
            "file_size_bytes": 4083,
            "line_count": 102,
            "character_count": 3992,
            "word_count": 454,
            "last_modified": "2025-08-26T16:00:59.498214",
            "content_hash": "c4da3c6f104779a0ab4d0af9427d0f88ef1a65a2d5e226813fa11877d75e36b7",
            "imports": [
              "testing/",
              "architecture/DEVELOPER_ARCHITECTURE_GUIDE.md",
              "training/TRAINING_MATERIALS.md",
              "api/API_DOCUMENTATION.md",
              "guides/COMPREHENSIVE_SETUP_AND_TESTING_GUIDE.md",
              "examples/",
              "overview/COMPLETE_SYSTEM_DOCUMENTATION.md",
              "project-history/PHASE_5_COMPLETION_SUMMARY.md",
              "project-history/PHASE_6_COMPLETION_SUMMARY.md",
              "setup/",
              "setup/env_example.txt"
            ],
            "dependencies": [],
            "key_concepts": [
              "Materials",
              "Summary",
              "Support",
              "Developers",
              "Make",
              "Configuration",
              "Template",
              "Integrators",
              "SQLite",
              "To"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_f747406c": {
        "node_id": "living_node_concept_f747406c",
        "name": "Source File: LIVING_CODEX_SPECIFICATION.md",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_f747406c",
          "meso": "meso_living_node_concept_f747406c",
          "macro": "macro_living_node_concept_f747406c",
          "meta": "meta_living_node_concept_f747406c"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_f747406c",
          "concept_type": "source_file",
          "description": "Source file: docs/LIVING_CODEX_SPECIFICATION.md\n\n# \ud83c\udf1f Living Codex System Specification\n\n## \ud83d\udccb **Document Information**\n\n- **Version**: 2.0.0\n- **Last Updated**: December 2024\n- **Status**: Production Ready\n- **System Level**: EMERGENT (Progressing toward CONSCIOUS)\n\n---\n\n## \ud83c\udfaf **System Overview**\n\nThe Living Codex is a **transcendent, unified intelligent knowledge system** that represents the cutting edge of AI, consciousness simulation, and quantum-inspired knowledge representation. It combines multiple advanced technologies to create a living,...",
          "ontological_properties": {
            "file_path": "docs/LIVING_CODEX_SPECIFICATION.md",
            "file_type": "markdown",
            "file_size_bytes": 14588,
            "line_count": 347,
            "character_count": 14275,
            "word_count": 1706,
            "last_modified": "2025-08-26T16:00:59.497727",
            "content_hash": "ed55eaf66009cee218199c38255bef7e46ffd83db05d70ee63eac1982b426a46",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Optimizer",
              "Identification",
              "Examining",
              "TXT",
              "Autonomous",
              "WebM",
              "Quality",
              "CSV",
              "Generation",
              "Metadata"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_c160b82a": {
        "node_id": "living_node_concept_c160b82a",
        "name": "Source File: QUICK_REFERENCE.md",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_c160b82a",
          "meso": "meso_living_node_concept_c160b82a",
          "macro": "macro_living_node_concept_c160b82a",
          "meta": "meta_living_node_concept_c160b82a"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_c160b82a",
          "concept_type": "source_file",
          "description": "Source file: docs/references/QUICK_REFERENCE.md\n\n# \u26a1 **Quick Reference - Living Codex**\n\n## \ud83c\udfd7\ufe0f **System Architecture**\n\n### **Core Components**\n- **Neo4j Integration**: Graph database operations\n- **Database Persistence**: SQLite/PostgreSQL storage\n- **External API**: Google, Wikipedia, OpenAI integration\n- **Configuration**: Centralized environment management\n\n### **Modular Structure**\n```\nsrc/\n\u251c\u2500\u2500 config/          # Configuration management\n\u251c\u2500\u2500 api/            # External API integrations\n\u251c\u2500\u2500 database/       # Database operations\n\u251c\u2500\u2500 graph/  ...",
          "ontological_properties": {
            "file_path": "docs/references/QUICK_REFERENCE.md",
            "file_type": "markdown",
            "file_size_bytes": 3385,
            "line_count": 145,
            "character_count": 3309,
            "word_count": 357,
            "last_modified": "2025-08-26T16:00:59.500750",
            "content_hash": "f9bc7da776157dec30ee207a730100b837454a74af293299c96f20489b934e8b",
            "imports": [
              "../architecture/DEVELOPER_ARCHITECTURE_GUIDE.md",
              "../overview/COMPLETE_SYSTEM_DOCUMENTATION.md",
              "../guides/COMPREHENSIVE_SETUP_AND_TESTING_GUIDE.md",
              "../training/TRAINING_MATERIALS.md",
              "../api/API_DOCUMENTATION.md"
            ],
            "dependencies": [],
            "key_concepts": [
              "API",
              "Ice",
              "Vapor",
              "Materials",
              "Errors",
              "PostgreSQL",
              "DatabasePersistenceSystem",
              "DatabaseNode",
              "RETURN",
              "Living"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_4b6d1370": {
        "node_id": "living_node_concept_4b6d1370",
        "name": "Source File: TRAINING_MATERIALS.md",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_4b6d1370",
          "meso": "meso_living_node_concept_4b6d1370",
          "macro": "macro_living_node_concept_4b6d1370",
          "meta": "meta_living_node_concept_4b6d1370"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_4b6d1370",
          "concept_type": "source_file",
          "description": "Source file: docs/training/TRAINING_MATERIALS.md\n\n# \ud83c\udf93 **Training Materials - Living Codex System**\n\n## \ud83d\udcc5 **Last Updated**: December 2024\n\n## \ud83c\udfaf **Purpose**\nThis document provides comprehensive training materials for new team members joining the Living Codex project, including onboarding guides, tutorials, and best practices.\n\n---\n\n## \ud83d\ude80 **Quick Start for New Team Members**\n\n### **Welcome to the Living Codex Team! \ud83c\udf89**\n\nYou're joining an exciting project that's revolutionizing knowledge management through fractal, holographic principles. This guide...",
          "ontological_properties": {
            "file_path": "docs/training/TRAINING_MATERIALS.md",
            "file_type": "markdown",
            "file_size_bytes": 36633,
            "line_count": 1129,
            "character_count": 36373,
            "word_count": 4029,
            "last_modified": "2025-08-26T16:00:59.502166",
            "content_hash": "149e694800a1cdfd4990b6acfaf1da7838ff67cd05b7088ac61795b193942773",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Topic",
              "World",
              "Quality",
              "Make",
              "Windows",
              "A",
              "Start",
              "Metadata",
              "Codex",
              "Command"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_20790c77": {
        "node_id": "living_node_concept_20790c77",
        "name": "Source File: env_example.txt",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_20790c77",
          "meso": "meso_living_node_concept_20790c77",
          "macro": "macro_living_node_concept_20790c77",
          "meta": "meta_living_node_concept_20790c77"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_20790c77",
          "concept_type": "source_file",
          "description": "Source file: docs/setup/env_example.txt\n\n# Living Codex API Configuration\n# Copy this file to .env and fill in your actual API keys\n\n# OpenAI API Configuration\nOPENAI_API_KEY=your_openai_api_key_here\nOPENAI_MODEL=gpt-3.5-turbo\n\n# Google Custom Search API (Optional)\nGOOGLE_API_KEY=your_google_api_key_here\nGOOGLE_CSE_ID=your_custom_search_engine_id_here\n\n# Wikipedia API (No key required, but can set rate limits)\nWIKIPEDIA_RATE_LIMIT=100\n\n# DuckDuckGo (No key required)\nDUCKDUCKGO_RATE_LIMIT=100\n\n# Neo4j Database Configuration\nNEO4J_URI=bo...",
          "ontological_properties": {
            "file_path": "docs/setup/env_example.txt",
            "file_type": "text",
            "file_size_bytes": 857,
            "line_count": 33,
            "character_count": 857,
            "word_count": 73,
            "last_modified": "2025-08-26T16:00:59.500937",
            "content_hash": "825361d804c859517be7c98f403e3596666e33837dd4c3fd81cca9d9ad4cebb8",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "API",
              "No",
              "Optional",
              "Codex",
              "Custom",
              "INFO",
              "Copy",
              "Search",
              "Configuration",
              "DuckDuckGo"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_e08febdf": {
        "node_id": "living_node_concept_e08febdf",
        "name": "Source File: README.md",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_e08febdf",
          "meso": "meso_living_node_concept_e08febdf",
          "macro": "macro_living_node_concept_e08febdf",
          "meta": "meta_living_node_concept_e08febdf"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_e08febdf",
          "concept_type": "source_file",
          "description": "Source file: docs/setup/README.md\n\n# \ud83d\udee0\ufe0f **Setup and Configuration - Living Codex**\n\nThis directory contains all setup and configuration files for the Living Codex system.\n\n## \ud83d\udcc1 **Files in this Directory**\n\n### **Setup Scripts**\n- **`setup_api_keys.py`** - Interactive API key configuration\n- **`setup_web_search.py`** - Web search API setup\n- **`setup_macos.sh`** - macOS-specific setup (Neo4j)\n\n### **Configuration**\n- **`env_example.txt`** - Template for environment variables\n\n## \ud83d\ude80 **Quick Setup**\n\n### **1. Basic Setup**\n```bash\n# ...",
          "ontological_properties": {
            "file_path": "docs/setup/README.md",
            "file_type": "markdown",
            "file_size_bytes": 2302,
            "line_count": 84,
            "character_count": 2282,
            "word_count": 249,
            "last_modified": "2025-08-26T16:00:59.500863",
            "content_hash": "6f4de957c9ac7ad3c97d7a72ebe8c9721350f6aab76ced0dc89be34f7843cd01",
            "imports": [
              "../overview/COMPLETE_SYSTEM_DOCUMENTATION.md",
              "../development/QUICK_START.md",
              "../training/TRAINING_MATERIALS.md#-troubleshooting-guide",
              "../guides/COMPREHENSIVE_SETUP_AND_TESTING_GUIDE.md"
            ],
            "dependencies": [],
            "key_concepts": [
              "Directory",
              "API",
              "Copy",
              "Web",
              "Resources",
              "Living",
              "Database",
              "Quick",
              "Troubleshooting",
              "Detailed"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_c5d9250b": {
        "node_id": "living_node_concept_c5d9250b",
        "name": "Source File: setup_api_keys.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_c5d9250b",
          "meso": "meso_living_node_concept_c5d9250b",
          "macro": "macro_living_node_concept_c5d9250b",
          "meta": "meta_living_node_concept_c5d9250b"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_c5d9250b",
          "concept_type": "source_file",
          "description": "Source file: docs/setup/setup_api_keys.py\n\n\"\"\"\nSetup Script for Living Codex API Keys and Configuration\nHelps you configure and test your API keys\n\"\"\"\n\nimport os\nimport sys\nfrom pathlib import Path\nfrom config_manager import ConfigManager\n\ndef setup_openai_key():\n    \"\"\"Set up OpenAI API key\"\"\"\n    print(\"\\n\ud83d\udd11 Setting up OpenAI API Key\")\n    print(\"=\" * 40)\n    \n    # Check if already set\n    if os.getenv('OPENAI_API_KEY'):\n        print(\"\u2705 OpenAI API key already configured\")\n        return True\n    \n    print(\"To get an OpenAI API key:\")...",
          "ontological_properties": {
            "file_path": "docs/setup/setup_api_keys.py",
            "file_type": "python",
            "file_size_bytes": 6726,
            "line_count": 201,
            "character_count": 6620,
            "word_count": 700,
            "last_modified": "2025-08-26T16:00:59.501181",
            "content_hash": "0bf5390a1a4bef936332cf39c4bbb007f2603bfd7e0678094945de315428f0a2",
            "imports": [
              "os",
              "config_manager",
              "pathlib",
              "sys"
            ],
            "dependencies": [],
            "key_concepts": [
              "API",
              "Creating",
              "Configured",
              "True",
              "Create",
              "Copy",
              "DuckDuckGo",
              "PostgreSQL",
              "Living",
              "False"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_a49ba553": {
        "node_id": "living_node_concept_a49ba553",
        "name": "Source File: setup_web_search.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_a49ba553",
          "meso": "meso_living_node_concept_a49ba553",
          "macro": "macro_living_node_concept_a49ba553",
          "meta": "meta_living_node_concept_a49ba553"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_a49ba553",
          "concept_type": "source_file",
          "description": "Source file: docs/setup/setup_web_search.py\n\n#!/usr/bin/env python3\n\"\"\"\nWeb Search API Setup Script\nHelps configure Google Custom Search and other web search APIs\n\"\"\"\n\nimport os\nimport re\nfrom pathlib import Path\nfrom config_manager import ConfigManager\n\ndef setup_google_custom_search():\n    \"\"\"Set up Google Custom Search API\"\"\"\n    print(\"\\n\ud83d\udd0d Setting up Google Custom Search API\")\n    print(\"=\" * 50)\n    \n    print(\"To get your Google Custom Search credentials:\")\n    print(\"1. Go to https://console.cloud.google.com/\")\n    print(\"2. Create ...",
          "ontological_properties": {
            "file_path": "docs/setup/setup_web_search.py",
            "file_type": "python",
            "file_size_bytes": 6044,
            "line_count": 173,
            "character_count": 5965,
            "word_count": 644,
            "last_modified": "2025-08-26T16:00:59.501486",
            "content_hash": "f99d7dd5b6baaef0f196544ab70272caf4a26f1278d5cf8b27fb418ade1a33d5",
            "imports": [
              "os",
              "re",
              "config_manager",
              "pathlib"
            ],
            "dependencies": [],
            "key_concepts": [
              "API",
              "Free",
              "Configured",
              "True",
              "Create",
              "Web",
              "ValueError",
              "WebSearchIntegration",
              "DuckDuckGo",
              "Warning"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_0def796b": {
        "node_id": "living_node_concept_0def796b",
        "name": "Source File: setup_macos.sh",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_0def796b",
          "meso": "meso_living_node_concept_0def796b",
          "macro": "macro_living_node_concept_0def796b",
          "meta": "meta_living_node_concept_0def796b"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_0def796b",
          "concept_type": "source_file",
          "description": "Source file: docs/setup/setup_macos.sh\n\n#!/bin/bash\n\n# Living Codex macOS Setup Script\n# This script helps set up Neo4j and configure the system on macOS\n\necho \"\ud83d\ude80 Living Codex macOS Setup Script\"\necho \"==================================\"\necho \"\"\n\n# Check if Homebrew is installed\nif ! command -v brew &> /dev/null; then\n    echo \"\u274c Homebrew is not installed. Installing Homebrew...\"\n    /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n    echo \"\u2705 Homebrew installed successfully!\"\nelse\n    ec...",
          "ontological_properties": {
            "file_path": "docs/setup/setup_macos.sh",
            "file_type": "shell",
            "file_size_bytes": 2944,
            "line_count": 100,
            "character_count": 2877,
            "word_count": 416,
            "last_modified": "2025-08-26T16:00:59.501248",
            "content_hash": "ab3c7f744ab7cc26efea797408138bd590ef6ae18837061f3286fb8ed6f1643e",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "HEAD",
              "Living",
              "You",
              "Username",
              "Install",
              "Password",
              "To",
              "Start",
              "Homebrew",
              "The"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_167bf9bd": {
        "node_id": "living_node_concept_167bf9bd",
        "name": "Source File: API_DOCUMENTATION.md",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_167bf9bd",
          "meso": "meso_living_node_concept_167bf9bd",
          "macro": "macro_living_node_concept_167bf9bd",
          "meta": "meta_living_node_concept_167bf9bd"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_167bf9bd",
          "concept_type": "source_file",
          "description": "Source file: docs/api/API_DOCUMENTATION.md\n\n# \ud83d\udd0c **API Documentation - Living Codex System**\n\n## \ud83d\udcc5 **Last Updated**: December 2024\n\n## \ud83c\udfaf **Purpose**\nThis document provides comprehensive API documentation for the Living Codex system, including all available endpoints, request/response formats, authentication, and usage examples.\n\n---\n\n## \ud83c\udfd7\ufe0f **API Architecture Overview**\n\n### **System APIs**\nThe Living Codex system provides multiple API layers:\n\n1. **Core System APIs** - Direct Python interfaces for system components\n2. **Graph Database APIs...",
          "ontological_properties": {
            "file_path": "docs/api/API_DOCUMENTATION.md",
            "file_type": "markdown",
            "file_size_bytes": 21061,
            "line_count": 783,
            "character_count": 20986,
            "word_count": 2270,
            "last_modified": "2025-08-26T16:00:59.499107",
            "content_hash": "4acf6cfb5fa00c3414c20e567353cafcf54a7fdc2a1f412db70a86fbae77fa4c",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Principles",
              "URI",
              "QueryOptions",
              "Support",
              "Strategies",
              "Resources",
              "Points",
              "Future",
              "Enhancements",
              "Error"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_9bf8a702": {
        "node_id": "living_node_concept_9bf8a702",
        "name": "Source File: COMPLETE_SYSTEM_DOCUMENTATION.md",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_9bf8a702",
          "meso": "meso_living_node_concept_9bf8a702",
          "macro": "macro_living_node_concept_9bf8a702",
          "meta": "meta_living_node_concept_9bf8a702"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_9bf8a702",
          "concept_type": "source_file",
          "description": "Source file: docs/overview/COMPLETE_SYSTEM_DOCUMENTATION.md\n\n# \ud83d\ude80 **Living Codex System - Complete Documentation**\n\n## \ud83d\udcc5 **Last Updated**: December 2024\n\n## \ud83c\udfaf **System Overview**\n\nThe Living Codex is a **fractal, holographic knowledge management system** that represents all human knowledge through recursive, self-similar structures. The system has been completely restructured from a monolithic architecture to a **modular, maintainable, and scalable platform**.\n\n---\n\n## \ud83c\udfd7\ufe0f **Architecture Overview**\n\n### **Current System Status**\n- \u2705 **Hybrid Architecture**:...",
          "ontological_properties": {
            "file_path": "docs/overview/COMPLETE_SYSTEM_DOCUMENTATION.md",
            "file_type": "markdown",
            "file_size_bytes": 11930,
            "line_count": 411,
            "character_count": 11811,
            "word_count": 1363,
            "last_modified": "2025-08-26T16:00:59.500311",
            "content_hash": "717fbaecee12ef1a25661555a4f009354bb27c73642a7cbd75d6d7d0a20244af",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Principles",
              "Support",
              "Migration",
              "Resources",
              "Points",
              "Started",
              "Future",
              "Enhancements",
              "Language",
              "Configuration"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_73f3206d": {
        "node_id": "living_node_concept_73f3206d",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_73f3206d",
          "meso": "meso_living_node_concept_73f3206d",
          "macro": "macro_living_node_concept_73f3206d",
          "meta": "meta_living_node_concept_73f3206d"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_73f3206d",
          "concept_type": "source_file",
          "description": "Source file: src/__init__.py\n\n\"\"\"\nLiving Codex - Source Package\nModular, maintainable architecture for intelligent knowledge systems\n\"\"\"\n\n__version__ = \"2.0.0\"\n__author__ = \"Living Codex Team\"\n__description__ = \"Modular Living Codex System\"\n\n# Import main components for easy access\nfrom .config.manager import ConfigManager\n\n# Core modules\nfrom .core.database_persistence_system import DatabasePersistenceSystem\nfrom .core.digital_asset_manager import DigitalAssetManager\nfrom .core.code_parser import CodeParser\nfrom .core.code_...",
          "ontological_properties": {
            "file_path": "src/__init__.py",
            "file_type": "python",
            "file_size_bytes": 1069,
            "line_count": 43,
            "character_count": 1069,
            "word_count": 89,
            "last_modified": "2025-08-26T16:00:59.504066",
            "content_hash": "98139dc8ebc07afa34a51abedf2b3f245e5f24569320455e2573258c10eaff34",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Source",
              "AutonomousLearningSystem",
              "Modular",
              "Codex",
              "Team",
              "Import",
              "Core",
              "DatabasePersistenceSystem",
              "DigitalAssetManager",
              "Demo"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_097e5a8c": {
        "node_id": "living_node_concept_097e5a8c",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_097e5a8c",
          "meso": "meso_living_node_concept_097e5a8c",
          "macro": "macro_living_node_concept_097e5a8c",
          "meta": "meta_living_node_concept_097e5a8c"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_097e5a8c",
          "concept_type": "source_file",
          "description": "Source file: src/database/__init__.py\n\n\"\"\"\nDatabase Package\nDatabase persistence and management for the Living Codex system\n\"\"\"\n\nfrom .core.models import DatabaseNode, DatabaseOperationResult, QueryFilter, QueryOptions\n\n__all__ = [\n    \"DatabaseNode\",\n    \"DatabaseOperationResult\",\n    \"QueryFilter\", \n    \"QueryOptions\"\n]\n\n# Additional components will be added as they are implemented\n# from .core.operations import DatabaseOperations\n",
          "ontological_properties": {
            "file_path": "src/database/__init__.py",
            "file_type": "python",
            "file_size_bytes": 398,
            "line_count": 16,
            "character_count": 398,
            "word_count": 43,
            "last_modified": "2025-08-26T16:00:59.509098",
            "content_hash": "439622b61658546d0ad3fd58df8980d669a121e45ea18d9856e9eb76ce285ab1",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "DatabaseOperations",
              "DatabaseOperationResult",
              "Codex",
              "QueryOptions",
              "Additional",
              "QueryFilter",
              "DatabaseNode",
              "Living",
              "Package",
              "Database"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_b0be47c2": {
        "node_id": "living_node_concept_b0be47c2",
        "name": "Source File: models.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_b0be47c2",
          "meso": "meso_living_node_concept_b0be47c2",
          "macro": "macro_living_node_concept_b0be47c2",
          "meta": "meta_living_node_concept_b0be47c2"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_b0be47c2",
          "concept_type": "source_file",
          "description": "Source file: src/database/core/models.py\n\n\"\"\"\nDatabase Core Models\nCore data models for database operations\n\"\"\"\n\nfrom typing import List, Dict, Any, Optional\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom enum import Enum\n\nclass DatabaseType(Enum):\n    \"\"\"Supported database types\"\"\"\n    SQLITE = \"sqlite\"\n    POSTGRESQL = \"postgresql\"\n\nclass OperationType(Enum):\n    \"\"\"Types of database operations\"\"\"\n    CREATE = \"create\"\n    READ = \"read\"\n    UPDATE = \"update\"\n    DELETE = \"delete\"\n    QUERY = \"query\"\n    BULK_OPER...",
          "ontological_properties": {
            "file_path": "src/database/core/models.py",
            "file_type": "python",
            "file_size_bytes": 1768,
            "line_count": 70,
            "character_count": 1768,
            "word_count": 206,
            "last_modified": "2025-08-26T16:00:59.509286",
            "content_hash": "5ecc447712e7c68648afa2bd78c385a99c14067a8ecdf0bd3dfd43a50e347581",
            "imports": [
              "datetime",
              "dataclasses",
              "enum",
              "typing"
            ],
            "dependencies": [],
            "key_concepts": [
              "NOT",
              "UPDATE",
              "QueryOptions",
              "Supported",
              "DatabaseNode",
              "CREATE",
              "False",
              "Database",
              "Filter",
              "Models"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_41160098": {
        "node_id": "living_node_concept_41160098",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_41160098",
          "meso": "meso_living_node_concept_41160098",
          "macro": "macro_living_node_concept_41160098",
          "meta": "meta_living_node_concept_41160098"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_41160098",
          "concept_type": "source_file",
          "description": "Source file: src/database/core/__init__.py\n\n\"\"\"\nDatabase Core Package\nCore database models, operations, and utilities\n\"\"\"\n\nfrom .models import DatabaseNode, DatabaseOperationResult, QueryFilter, QueryOptions, DatabaseType, OperationType\n\n__all__ = [\n    \"DatabaseNode\",\n    \"DatabaseOperationResult\",\n    \"QueryFilter\",\n    \"QueryOptions\", \n    \"DatabaseType\",\n    \"OperationType\"\n]\n\n# Additional components will be added as they are implemented\n# from .operations import DatabaseOperations\n",
          "ontological_properties": {
            "file_path": "src/database/core/__init__.py",
            "file_type": "python",
            "file_size_bytes": 447,
            "line_count": 18,
            "character_count": 447,
            "word_count": 45,
            "last_modified": "2025-08-26T16:00:59.509214",
            "content_hash": "6fa7a4ba663382c1704ca7da2bdddc3e2b2bee3b82cffeb89e92b4a160eabadd",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "DatabaseOperations",
              "DatabaseOperationResult",
              "QueryOptions",
              "DatabaseType",
              "Additional",
              "QueryFilter",
              "DatabaseNode",
              "OperationType",
              "Package",
              "Database"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_0aae629a": {
        "node_id": "living_node_concept_0aae629a",
        "name": "Source File: operations.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_0aae629a",
          "meso": "meso_living_node_concept_0aae629a",
          "macro": "macro_living_node_concept_0aae629a",
          "meta": "meta_living_node_concept_0aae629a"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_0aae629a",
          "concept_type": "source_file",
          "description": "Source file: src/database/core/operations.py\n\n\"\"\"\nDatabase Core Operations\nBase database operations and query functionality\n\"\"\"\n\nimport time\nimport logging\nfrom typing import List, Dict, Any, Optional, Tuple, Union\nfrom datetime import datetime\nfrom .models import (\n    DatabaseNode, DatabaseOperationResult, QueryFilter, QueryOptions,\n    OperationType, DatabaseType\n)\n\nlogger = logging.getLogger(__name__)\n\nclass DatabaseOperations:\n    \"\"\"Base class for database operations\"\"\"\n    \n    def __init__(self, database_type: DatabaseType):\n       ...",
          "ontological_properties": {
            "file_path": "src/database/core/operations.py",
            "file_type": "python",
            "file_size_bytes": 8031,
            "line_count": 194,
            "character_count": 8031,
            "word_count": 607,
            "last_modified": "2025-08-26T16:00:59.509523",
            "content_hash": "0d60f1a4241e731265869aec98161f23c28f2e18f5d364cd3fc8ab55536d78f5",
            "imports": [
              "logging",
              "time",
              "datetime",
              "typing"
            ],
            "dependencies": [],
            "key_concepts": [
              "Limit",
              "Union",
              "NOT",
              "QueryOptions",
              "Create",
              "OFFSET",
              "Operations",
              "ValueError",
              "DatabaseNode",
              "Tuple"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_80ccae41": {
        "node_id": "living_node_concept_80ccae41",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_80ccae41",
          "meso": "meso_living_node_concept_80ccae41",
          "macro": "macro_living_node_concept_80ccae41",
          "meta": "meta_living_node_concept_80ccae41"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_80ccae41",
          "concept_type": "source_file",
          "description": "Source file: src/database/sqlite/__init__.py\n\n\"\"\"\nSQLite Database Package\nSQLite-specific database implementation for the Living Codex system\n\"\"\"\n\nfrom .sqlite_manager import SQLiteManager\n\n__all__ = [\n    \"SQLiteManager\"\n]\n\n# Additional components will be added as they are implemented\n# from .sqlite_operations import SQLiteOperations\n",
          "ontological_properties": {
            "file_path": "src/database/sqlite/__init__.py",
            "file_type": "python",
            "file_size_bytes": 291,
            "line_count": 13,
            "character_count": 291,
            "word_count": 37,
            "last_modified": "2025-08-26T16:00:59.509635",
            "content_hash": "0a52abcab2d7b4720b51b307e2d3ae3c57dde3524418ece0126460d9b0ed53cd",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Codex",
              "Additional",
              "SQLiteOperations",
              "SQLite",
              "Living",
              "SQLiteManager",
              "Package",
              "Database"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_90933d19": {
        "node_id": "living_node_concept_90933d19",
        "name": "Source File: sqlite_manager.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_90933d19",
          "meso": "meso_living_node_concept_90933d19",
          "macro": "macro_living_node_concept_90933d19",
          "meta": "meta_living_node_concept_90933d19"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_90933d19",
          "concept_type": "source_file",
          "description": "Source file: src/database/sqlite/sqlite_manager.py\n\n\"\"\"\nSQLite Database Manager\nConnection and schema management for SQLite databases\n\"\"\"\n\nimport sqlite3\nimport logging\nfrom pathlib import Path\nfrom typing import Optional\nfrom ..core.models import DatabaseType\n\nlogger = logging.getLogger(__name__)\n\nclass SQLiteManager:\n    \"\"\"Manages SQLite database connections and schema\"\"\"\n    \n    def __init__(self, db_path: str = \"living_codex.db\"):\n        # Ensure db_path is never None\n        if db_path is None:\n            db_path = \"living_codex.db\"\n    ...",
          "ontological_properties": {
            "file_path": "src/database/sqlite/sqlite_manager.py",
            "file_type": "python",
            "file_size_bytes": 6249,
            "line_count": 168,
            "character_count": 6239,
            "word_count": 531,
            "last_modified": "2025-08-26T16:00:59.509883",
            "content_hash": "181c6a49f41a98db50b54a67f2809223b5aae7b99a9f244c8ff7a2d69170aea4",
            "imports": [
              "logging",
              "sqlite3",
              "pathlib",
              "typing"
            ],
            "dependencies": [],
            "key_concepts": [
              "TEXT",
              "Default",
              "ON",
              "NOT",
              "True",
              "Create",
              "PRIMARY",
              "Split",
              "FROM",
              "SELECT"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_883697e0": {
        "node_id": "living_node_concept_883697e0",
        "name": "Source File: contribution_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_883697e0",
          "meso": "meso_living_node_concept_883697e0",
          "macro": "macro_living_node_concept_883697e0",
          "meta": "meta_living_node_concept_883697e0"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_883697e0",
          "concept_type": "source_file",
          "description": "Source file: src/web_platform/contribution_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Platform - Contribution System\nAllows users to contribute content based on their profiles and skills\n\"\"\"\n\nimport json\nimport uuid\nfrom datetime import datetime, timezone\nfrom dataclasses import dataclass, asdict\nfrom typing import Dict, List, Optional, Any, Union\nfrom enum import Enum\nfrom pathlib import Path\n\nclass ContributionType(Enum):\n    \"\"\"Types of contributions users can make\"\"\"\n    CODE = \"code\"\n    CONTENT = \"content\"\n    VISUAL = \"visual\"\n    TR...",
          "ontological_properties": {
            "file_path": "src/web_platform/contribution_system.py",
            "file_type": "python",
            "file_size_bytes": 21141,
            "line_count": 525,
            "character_count": 21131,
            "word_count": 1527,
            "last_modified": "2025-08-26T16:00:59.515415",
            "content_hash": "84e68edff322829aa975db2f2fee5766f2bec1e473f8433ee0923a6c99c5697b",
            "imports": [
              "typing",
              "uuid",
              "dataclasses",
              "pathlib",
              "json",
              "datetime",
              "enum"
            ],
            "dependencies": [],
            "key_concepts": [
              "Union",
              "Text",
              "ContentCategory",
              "ContributionMetadata",
              "REVIEWING",
              "Started",
              "Error",
              "Tags",
              "A",
              "CodeContribution"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_0fdf8228": {
        "node_id": "living_node_concept_0fdf8228",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_0fdf8228",
          "meso": "meso_living_node_concept_0fdf8228",
          "macro": "macro_living_node_concept_0fdf8228",
          "meta": "meta_living_node_concept_0fdf8228"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_0fdf8228",
          "concept_type": "source_file",
          "description": "Source file: src/web_platform/__init__.py\n\n\"\"\"\nLiving Codex Platform Package\nProvides user management, contribution systems, and web interface\n\"\"\"\n\nfrom .user_management import (\n    UserManagementSystem, UserProfile, CoreIdentity, CommunicationPreferences,\n    TechnicalProfile, Interests, LocationContext, SkillLevel, CommunicationStyle, LearningStyle,\n    ProfileManager, PreferenceEngine, VaporState\n)\n\nfrom .contribution_system import (\n    ContributionSystem, ContributionManager, ContributionMatcher,\n    Contribution, ContributionType,...",
          "ontological_properties": {
            "file_path": "src/web_platform/__init__.py",
            "file_type": "python",
            "file_size_bytes": 1305,
            "line_count": 30,
            "character_count": 1305,
            "word_count": 86,
            "last_modified": "2025-08-26T16:00:59.515320",
            "content_hash": "4f4fc9c7d4e9aee0744d96c8c214f3b54dd2a5d2fa3b34667de5d3c830d827e8",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "UserProfile",
              "LocalSolutionContribution",
              "ContentCategory",
              "PreferenceEngine",
              "TranslationContribution",
              "ContributionMetadata",
              "LocationContext",
              "Living",
              "VaporState",
              "Provides"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_e6a077b2": {
        "node_id": "living_node_concept_e6a077b2",
        "name": "Source File: unified_web_interface.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_e6a077b2",
          "meso": "meso_living_node_concept_e6a077b2",
          "macro": "macro_living_node_concept_e6a077b2",
          "meta": "meta_living_node_concept_e6a077b2"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_e6a077b2",
          "concept_type": "source_file",
          "description": "Source file: src/web_platform/unified_web_interface.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Platform - Unified Web Interface\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the unified web interface and user experience system is represented as nodes that can:\n\n1. Manage web interfaces and create interface nodes\n2. Handle user experiences and create experience nodes\n3. Coordinate discovery engines and create discovery nodes\n4. Manage navigation systems and create navigation nodes\n5. Handle contribution systems ...",
          "ontological_properties": {
            "file_path": "src/web_platform/unified_web_interface.py",
            "file_type": "python",
            "file_size_bytes": 35343,
            "line_count": 805,
            "character_count": 35271,
            "word_count": 2747,
            "last_modified": "2025-08-27T08:53:43.442520",
            "content_hash": "b3fae6ed4c654953c4f7281fa66850f82f237c4c849934ed3a503eefa72ea965",
            "imports": [
              "flask_login",
              "random",
              "hashlib",
              "sys",
              "typing",
              "pathlib",
              "json",
              "datetime",
              "mimetypes",
              "os",
              "flask"
            ],
            "dependencies": [],
            "key_concepts": [
              "Size",
              "UserProfile",
              "Structured",
              "ContentCategory",
              "ENGINE",
              "UTF",
              "CRYSTAL",
              "Verdana",
              "Unified",
              "CommunicationStyle"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_58351549": {
        "node_id": "living_node_concept_58351549",
        "name": "Source File: ontology_navigator.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_58351549",
          "meso": "meso_living_node_concept_58351549",
          "macro": "macro_living_node_concept_58351549",
          "meta": "meta_living_node_concept_58351549"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_58351549",
          "concept_type": "source_file",
          "description": "Source file: src/web_platform/ontology_navigator.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Ontology Navigator\nProvides structured navigation through system components, relationships, and knowledge structures\n\"\"\"\n\nfrom typing import Dict, List, Any, Optional\nfrom dataclasses import dataclass\nfrom datetime import datetime\nimport json\n\n@dataclass\nclass OntologyNode:\n    \"\"\"Represents a node in the Living Codex ontology\"\"\"\n    id: str\n    name: str\n    type: str\n    description: str\n    category: str\n    relationships: List[str]\n    metadata: Dict[s...",
          "ontological_properties": {
            "file_path": "src/web_platform/ontology_navigator.py",
            "file_type": "python",
            "file_size_bytes": 17095,
            "line_count": 397,
            "character_count": 17059,
            "word_count": 1115,
            "last_modified": "2025-08-26T16:00:59.515513",
            "content_hash": "0a6d7f8b0e58bf1646c4d704eda7dac1a15c79b9500c8460e16df4cff7e0773a",
            "imports": [
              "datetime",
              "typing",
              "dataclasses",
              "json"
            ],
            "dependencies": [],
            "key_concepts": [
              "True",
              "Create",
              "Web",
              "Navigates",
              "Collaboration",
              "Interaction",
              "Smart",
              "Immutable",
              "Living",
              "Provides"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_b00c8394": {
        "node_id": "living_node_concept_b00c8394",
        "name": "Source File: user_management.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_b00c8394",
          "meso": "meso_living_node_concept_b00c8394",
          "macro": "macro_living_node_concept_b00c8394",
          "meta": "meta_living_node_concept_b00c8394"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_b00c8394",
          "concept_type": "source_file",
          "description": "Source file: src/web_platform/user_management.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Platform - User Management System\nManages user profiles, preferences, and personalized experiences\n\"\"\"\n\nimport json\nimport uuid\nfrom datetime import datetime, timezone\nfrom dataclasses import dataclass, asdict\nfrom typing import Dict, List, Optional, Any\nfrom enum import Enum\nfrom pathlib import Path\n\nclass UserState(Enum):\n    \"\"\"User states in the water metaphor\"\"\"\n    ICE = \"ice\"           # Core system infrastructure\n    WATER = \"water\"       # User pr...",
          "ontological_properties": {
            "file_path": "src/web_platform/user_management.py",
            "file_type": "python",
            "file_size_bytes": 26385,
            "line_count": 647,
            "character_count": 26378,
            "word_count": 1991,
            "last_modified": "2025-08-26T16:00:59.517218",
            "content_hash": "ca53586b2987d0f6a59c634aaf6fe28435c34edfd853961bc30b237ffc9fb12e",
            "imports": [
              "typing",
              "uuid",
              "dataclasses",
              "pathlib",
              "json",
              "datetime",
              "enum"
            ],
            "dependencies": [],
            "key_concepts": [
              "Making",
              "Spanish",
              "INTERMEDIATE",
              "UserProfile",
              "Tech",
              "San",
              "Error",
              "CommunicationStyle",
              "UI",
              "CASUAL"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_5936fa3a": {
        "node_id": "living_node_concept_5936fa3a",
        "name": "Source File: unified_login.html",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_5936fa3a",
          "meso": "meso_living_node_concept_5936fa3a",
          "macro": "macro_living_node_concept_5936fa3a",
          "meta": "meta_living_node_concept_5936fa3a"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_5936fa3a",
          "concept_type": "source_file",
          "description": "Source file: src/web_platform/templates/unified_login.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Login - Living Codex Platform</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }\n        .container { max-width: 600px; margin: 0 auto; }\n        .header { text-align: center; margin-bottom: 40px; }\n        .header h1 { font-s...",
          "ontological_properties": {
            "file_path": "src/web_platform/templates/unified_login.html",
            "file_type": "html",
            "file_size_bytes": 4452,
            "line_count": 89,
            "character_count": 4431,
            "word_count": 417,
            "last_modified": "2025-08-26T16:00:59.516868",
            "content_hash": "13128ae6f8c358428d8fa45f575e9085695de67b8f59f8e486ea9bfafa8e618c",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Features",
              "Modules",
              "Smart",
              "Arial",
              "After",
              "Enhanced",
              "Living",
              "UTF",
              "In",
              "User"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_02db6383": {
        "node_id": "living_node_concept_02db6383",
        "name": "Source File: profile.html",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_02db6383",
          "meso": "meso_living_node_concept_02db6383",
          "macro": "macro_living_node_concept_02db6383",
          "meta": "meta_living_node_concept_02db6383"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_02db6383",
          "concept_type": "source_file",
          "description": "Source file: src/web_platform/templates/profile.html\n\n<!DOCTYPE html>\n<html><head><title>Profile</title></head><body><h1>Your Profile</h1><p>Name: {{ profile.core_identity.name }}</p><p>Location: {{ profile.location_context.geographic_location }}</p><a href=\"/dashboard\">Back to Dashboard</a></body></html>",
          "ontological_properties": {
            "file_path": "src/web_platform/templates/profile.html",
            "file_type": "html",
            "file_size_bytes": 252,
            "line_count": 2,
            "character_count": 252,
            "word_count": 13,
            "last_modified": "2025-08-26T16:00:59.516366",
            "content_hash": "54c0fabc409638cd535c26b796625202a9694a36d39530755935c5205941e495",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Dashboard",
              "DOCTYPE",
              "Profile",
              "Name",
              "Location",
              "Back",
              "Your"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_c2606ee1": {
        "node_id": "living_node_concept_c2606ee1",
        "name": "Source File: ontology_overview.html",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_c2606ee1",
          "meso": "meso_living_node_concept_c2606ee1",
          "macro": "macro_living_node_concept_c2606ee1",
          "meta": "meta_living_node_concept_c2606ee1"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_c2606ee1",
          "concept_type": "source_file",
          "description": "Source file: src/web_platform/templates/ontology_overview.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Living Codex Ontology - System Components</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }\n        .container { max-width: 1400px; margin: 0 auto; }\n        .header { text-align: center; margin-bottom: 40px; }\n        .heade...",
          "ontological_properties": {
            "file_path": "src/web_platform/templates/ontology_overview.html",
            "file_type": "html",
            "file_size_bytes": 9119,
            "line_count": 168,
            "character_count": 9081,
            "word_count": 774,
            "last_modified": "2025-08-26T16:00:59.516294",
            "content_hash": "fcf0011ada24414ce631756544bf0f9ec57ff57611a8ba6d5582f0e4f88ea483",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Statistics",
              "Component",
              "Full",
              "Arial",
              "Living",
              "UTF",
              "GET",
              "Navigate",
              "Home",
              "Exploring"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_8e5515c8": {
        "node_id": "living_node_concept_8e5515c8",
        "name": "Source File: unified_assets.html",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_8e5515c8",
          "meso": "meso_living_node_concept_8e5515c8",
          "macro": "macro_living_node_concept_8e5515c8",
          "meta": "meta_living_node_concept_8e5515c8"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_8e5515c8",
          "concept_type": "source_file",
          "description": "Source file: src/web_platform/templates/unified_assets.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Assets - Living Codex</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #111; color: #eee; }\n        .container { max-width: 1000px; margin: 0 auto; }\n        h1 { color: #4CAF50; }\n        .card { background: #1b1b1b; padding: 20px; border-radius: 10px; margin: 15px 0; }\n        input, sele...",
          "ontological_properties": {
            "file_path": "src/web_platform/templates/unified_assets.html",
            "file_type": "html",
            "file_size_bytes": 2377,
            "line_count": 61,
            "character_count": 2372,
            "word_count": 227,
            "last_modified": "2025-08-26T17:41:32.639073",
            "content_hash": "2a1760c77c00433e6a9bea250aca09bbf51bc409cd16e8b9de8d226d4637d133",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "List",
              "DOCTYPE",
              "Size",
              "Codex",
              "Type",
              "Actions",
              "Assets",
              "Asset",
              "Arial",
              "Download"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_e7caefc4": {
        "node_id": "living_node_concept_e7caefc4",
        "name": "Source File: unified_index.html",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_e7caefc4",
          "meso": "meso_living_node_concept_e7caefc4",
          "macro": "macro_living_node_concept_e7caefc4",
          "meta": "meta_living_node_concept_e7caefc4"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_e7caefc4",
          "concept_type": "source_file",
          "description": "Source file: src/web_platform/templates/unified_index.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Living Codex Platform - Unified Discovery & Navigation</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }\n        .container { max-width: 1200px; margin: 0 auto; }\n        .hero { text-align: center; padding: 60px 20px; }\n    ...",
          "ontological_properties": {
            "file_path": "src/web_platform/templates/unified_index.html",
            "file_type": "html",
            "file_size_bytes": 7217,
            "line_count": 128,
            "character_count": 7167,
            "word_count": 606,
            "last_modified": "2025-08-26T17:41:32.638789",
            "content_hash": "1f0fe3da06b1e514d2aa1770bf522010c7c5b172be6381a03d4ee6d8c016b269",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "World",
              "Intelligent",
              "Activity",
              "Tracking",
              "Collaboration",
              "Active",
              "Modules",
              "Smart",
              "Author",
              "Arial"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_1a25f42d": {
        "node_id": "living_node_concept_1a25f42d",
        "name": "Source File: dashboard.html",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_1a25f42d",
          "meso": "meso_living_node_concept_1a25f42d",
          "macro": "macro_living_node_concept_1a25f42d",
          "meta": "meta_living_node_concept_1a25f42d"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_1a25f42d",
          "concept_type": "source_file",
          "description": "Source file: src/web_platform/templates/dashboard.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Dashboard - Living Codex Platform</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }\n        .container { max-width: 1200px; margin: 0 auto; }\n        .header { display: flex; justify-content: space-between; align-items: cente...",
          "ontological_properties": {
            "file_path": "src/web_platform/templates/dashboard.html",
            "file_type": "html",
            "file_size_bytes": 3704,
            "line_count": 79,
            "character_count": 3692,
            "word_count": 308,
            "last_modified": "2025-08-26T16:00:59.515726",
            "content_hash": "89fddfe85e6cf43d67a955a3f6dcc3d59553208783bfcbc0ba99cd233b27f653",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Create",
              "Recommendations",
              "Arial",
              "Living",
              "UTF",
              "You",
              "DOCTYPE",
              "Welcome",
              "Profile",
              "Contributions"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_96e30e19": {
        "node_id": "living_node_concept_96e30e19",
        "name": "Source File: navigate.html",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_96e30e19",
          "meso": "meso_living_node_concept_96e30e19",
          "macro": "macro_living_node_concept_96e30e19",
          "meta": "meta_living_node_concept_96e30e19"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_96e30e19",
          "concept_type": "source_file",
          "description": "Source file: src/web_platform/templates/navigate.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>System Navigation - Living Codex Platform</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }\n        .container { max-width: 1400px; margin: 0 auto; }\n        .header { text-align: center; margin-bottom: 40px; }\n        .heade...",
          "ontological_properties": {
            "file_path": "src/web_platform/templates/navigate.html",
            "file_type": "html",
            "file_size_bytes": 8629,
            "line_count": 163,
            "character_count": 8600,
            "word_count": 703,
            "last_modified": "2025-08-26T16:00:59.516177",
            "content_hash": "3cf7635f9fc7d5be388aa63b41e57d1b9eb8572c2bee53a6d1ebeedc50380522",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Top",
              "Activity",
              "Made",
              "Active",
              "Arial",
              "Living",
              "UTF",
              "Total",
              "DOCTYPE",
              "Time"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_e4ae31c7": {
        "node_id": "living_node_concept_e4ae31c7",
        "name": "Source File: discover.html",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_e4ae31c7",
          "meso": "meso_living_node_concept_e4ae31c7",
          "macro": "macro_living_node_concept_e4ae31c7",
          "meta": "meta_living_node_concept_e4ae31c7"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_e4ae31c7",
          "concept_type": "source_file",
          "description": "Source file: src/web_platform/templates/discover.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Discovery Hub - Living Codex Platform</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }\n        .container { max-width: 1400px; margin: 0 auto; }\n        .header { text-align: center; margin-bottom: 40px; }\n        .header h1...",
          "ontological_properties": {
            "file_path": "src/web_platform/templates/discover.html",
            "file_type": "html",
            "file_size_bytes": 7495,
            "line_count": 132,
            "character_count": 7468,
            "word_count": 631,
            "last_modified": "2025-08-26T16:00:59.516045",
            "content_hash": "64e4c7f5252f30a67c1323dc14b81edfaa8785753e48afc808de6a23e72d545e",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Author",
              "Like",
              "Relevant",
              "Arial",
              "Level",
              "Living",
              "UTF",
              "You",
              "User",
              "Hub"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_baa549d1": {
        "node_id": "living_node_concept_baa549d1",
        "name": "Source File: unified_signup.html",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_baa549d1",
          "meso": "meso_living_node_concept_baa549d1",
          "macro": "macro_living_node_concept_baa549d1",
          "meta": "meta_living_node_concept_baa549d1"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_baa549d1",
          "concept_type": "source_file",
          "description": "Source file: src/web_platform/templates/unified_signup.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Join Living Codex Platform - Unified</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }\n        .container { max-width: 900px; margin: 0 auto; }\n        .header { text-align: center; margin-bottom: 40px; }\n        .header h1 {...",
          "ontological_properties": {
            "file_path": "src/web_platform/templates/unified_signup.html",
            "file_type": "html",
            "file_size_bytes": 13907,
            "line_count": 234,
            "character_count": 13869,
            "word_count": 919,
            "last_modified": "2025-08-26T16:00:59.517010",
            "content_hash": "89d6b624034e88d0183841b4ee0a5b003df65903f97d249badfb6d4153b38ded",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Making",
              "Spanish",
              "Resources",
              "UTF",
              "You",
              "Health",
              "Cultural",
              "Accessibility",
              "Unified",
              "Area"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_a4b286cf": {
        "node_id": "living_node_concept_a4b286cf",
        "name": "Source File: contribute.html",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_a4b286cf",
          "meso": "meso_living_node_concept_a4b286cf",
          "macro": "macro_living_node_concept_a4b286cf",
          "meta": "meta_living_node_concept_a4b286cf"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_a4b286cf",
          "concept_type": "source_file",
          "description": "Source file: src/web_platform/templates/contribute.html\n\n<!DOCTYPE html>\n<html><head><title>Create Contribution</title></head><body><h1>Create Contribution</h1><form method=\"POST\"><select name=\"contribution_type\"><option value=\"content\">Content</option><option value=\"code\">Code</option><option value=\"local_solution\">Local Solution</option></select><input name=\"title\" placeholder=\"Title\"><textarea name=\"description\" placeholder=\"Description\"></textarea><button type=\"submit\">Create</button></form></body></html>",
          "ontological_properties": {
            "file_path": "src/web_platform/templates/contribute.html",
            "file_type": "html",
            "file_size_bytes": 457,
            "line_count": 2,
            "character_count": 457,
            "word_count": 16,
            "last_modified": "2025-08-26T16:00:59.515649",
            "content_hash": "a012e4ee0a6d6ef242f6182fc375c684be7cc8421070fc50bb771d4431aed5ce",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "DOCTYPE",
              "Create",
              "Code",
              "Title",
              "Local",
              "Content",
              "Description",
              "Solution",
              "Contribution",
              "POST"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_9c842681": {
        "node_id": "living_node_concept_9c842681",
        "name": "Source File: resonance_governance_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_9c842681",
          "meso": "meso_living_node_concept_9c842681",
          "macro": "macro_living_node_concept_9c842681",
          "meta": "meta_living_node_concept_9c842681"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_9c842681",
          "concept_type": "source_file",
          "description": "Source file: src/core/resonance_governance_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nResonance-First Governance System\n=================================\n\nThis system implements the core Living Codex principle of resonance-first governance\nthrough coherence self-amplification and dissonance fading without suppression.\n\nKey Features:\n- Coherence self-amplification through resonance\n- Dissonance fading without suppression\n- Resonance-based decision making\n- Collective intelligence emergence\n- Self-regulating system evolution\n\nThis is Phase 5 of the metada...",
          "ontological_properties": {
            "file_path": "src/core/resonance_governance_system.py",
            "file_type": "python",
            "file_size_bytes": 26183,
            "line_count": 628,
            "character_count": 26148,
            "word_count": 1947,
            "last_modified": "2025-08-27T12:01:39.702457",
            "content_hash": "f7ccb1d2476e1ef4e320875e1f6c8b4a6d4b151ca77c896237ae2efca3c754bb",
            "imports": [
              "random",
              "typing",
              "dataclasses",
              "collections",
              "json",
              "datetime",
              "living_codex_ontology",
              "math"
            ],
            "dependencies": [],
            "key_concepts": [
              "CollectiveIntelligence",
              "FIRST",
              "Scale",
              "Amplify",
              "SPECULATIVE",
              "Tuple",
              "Make",
              "Emergent",
              "Error",
              "Evaluate"
            ],
            "principles": [
              "ResonancePattern"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_ffc89cd5": {
        "node_id": "living_node_concept_ffc89cd5",
        "name": "Source File: consolidation_report.md",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_ffc89cd5",
          "meso": "meso_living_node_concept_ffc89cd5",
          "macro": "macro_living_node_concept_ffc89cd5",
          "meta": "meta_living_node_concept_ffc89cd5"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_ffc89cd5",
          "concept_type": "source_file",
          "description": "Source file: src/core/consolidation_report.md\n\n# Living Codex Project Consolidation Report\n\n## \ud83d\udcc5 Consolidation Date\n2025-08-27T16:44:43.134297\n\n## \ud83d\udcca Summary\n- **Total Files Removed**: 14\n- **Backup Location**: /Users/ursmuff/source/Living-Resonance-Codex/src/backup_before_consolidation\n- **Errors Encountered**: 0\n\n## \ud83d\uddd1\ufe0f Removed Files\n\n- **system_analysis_and_plan.md**: Superseded by comprehensive analysis \u2192 moved_to_backup\n- **debug_self_reflective_integration.py**: Temporary debug script \u2192 moved_to_backup\n- **verify_system_state.py**: Tempo...",
          "ontological_properties": {
            "file_path": "src/core/consolidation_report.md",
            "file_type": "markdown",
            "file_size_bytes": 2849,
            "line_count": 66,
            "character_count": 2801,
            "word_count": 316,
            "last_modified": "2025-08-27T16:44:43.134487",
            "content_hash": "0c1933ef034c96ab10e8a8bbcc8573f2b576f6a9b5eb2eff5a5ac0166b6b886f",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Root",
              "Project",
              "Summary",
              "Date",
              "Errors",
              "Migration",
              "Remove",
              "Phase",
              "Living",
              "Demonstration"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_7d6c83a9": {
        "node_id": "living_node_concept_7d6c83a9",
        "name": "Source File: enhanced_generic_node.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_7d6c83a9",
          "meso": "meso_living_node_concept_7d6c83a9",
          "macro": "macro_living_node_concept_7d6c83a9",
          "meta": "meta_living_node_concept_7d6c83a9"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_7d6c83a9",
          "concept_type": "source_file",
          "description": "Source file: src/core/enhanced_generic_node.py\n\n#!/usr/bin/env python3\n\"\"\"\nEnhanced GenericNode System\n===========================\n\nThis implements the enhanced GenericNode class that integrates with the\nLiving Codex ontology system and includes all enhanced metadata structures.\n\nThis is part of Phase 1 of the metadata enhancement plan.\n\"\"\"\n\nfrom dataclasses import dataclass, asdict, field\nfrom typing import Dict, List, Any, Optional, Set\nfrom datetime import datetime\nimport hashlib\nimport json\n\nfrom living_codex_ontology import (\n    WaterSt...",
          "ontological_properties": {
            "file_path": "src/core/enhanced_generic_node.py",
            "file_type": "python",
            "file_size_bytes": 29380,
            "line_count": 652,
            "character_count": 29350,
            "word_count": 2054,
            "last_modified": "2025-08-27T09:23:26.433075",
            "content_hash": "d65d1590ff173dfd1b26673cd3c8ef5680d6e52fc2aeda39390d59fee3b88656",
            "imports": [
              "hashlib",
              "typing",
              "metadata_factory",
              "dataclasses",
              "json",
              "datetime",
              "living_codex_ontology"
            ],
            "dependencies": [],
            "key_concepts": [
              "Deeper",
              "Human",
              "Scale",
              "ChakraKey",
              "Recalculate",
              "Individual",
              "Returns",
              "ConsciousnessLevel",
              "TRACKING",
              "Metadata"
            ],
            "principles": [
              "ResonancePattern"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_106fe9fa": {
        "node_id": "living_node_concept_106fe9fa",
        "name": "Source File: self_generating_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_106fe9fa",
          "meso": "meso_living_node_concept_106fe9fa",
          "macro": "macro_living_node_concept_106fe9fa",
          "meta": "meta_living_node_concept_106fe9fa"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_106fe9fa",
          "concept_type": "source_file",
          "description": "Source file: src/core/self_generating_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nSelf-Generating System\n======================\n\nThis system implements Phase 6 advanced meta-circular capabilities:\n- Systems that generate their own specifications\n- Automatic discovery of new concepts and relationships\n- Self-evolving ontological structures\n- Meta-circular specification generation\n- Autonomous system evolution\n\nThis represents the pinnacle of Living Codex meta-circularity.\n\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, An...",
          "ontological_properties": {
            "file_path": "src/core/self_generating_system.py",
            "file_type": "python",
            "file_size_bytes": 34141,
            "line_count": 752,
            "character_count": 34099,
            "word_count": 2136,
            "last_modified": "2025-08-27T12:41:39.026814",
            "content_hash": "c72873130f9f7c743a72ac1cd0084b6c66aaee58e1032719533f921a65868a2b",
            "imports": [
              "vibrational_axes_system",
              "random",
              "typing",
              "fractal_recursion_system",
              "resonance_governance_system",
              "dataclasses",
              "collections",
              "json",
              "datetime",
              "living_codex_ontology",
              "math"
            ],
            "dependencies": [],
            "key_concepts": [
              "ChakraKey",
              "Generating",
              "SPECULATIVE",
              "Autonomous",
              "Tuple",
              "SelfGeneratedSpecification",
              "Error",
              "Based",
              "PRIVATE",
              "A"
            ],
            "principles": [
              "ResonancePattern",
              "AutoDiscoveredConcept"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_440085f1": {
        "node_id": "living_node_concept_440085f1",
        "name": "Source File: project_file_analysis.md",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_440085f1",
          "meso": "meso_living_node_concept_440085f1",
          "macro": "macro_living_node_concept_440085f1",
          "meta": "meta_living_node_concept_440085f1"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_440085f1",
          "concept_type": "source_file",
          "description": "Source file: src/core/project_file_analysis.md\n\n# Living Codex Project File Analysis\n## Comprehensive File Classification & Consolidation Plan\n\nBased on the root Living Codex specification and current implementation status, this document analyzes every file in the project to determine its essential role or temporary nature.\n\n## \ud83d\udccb **Analysis Methodology**\n\n### **Essential Categories (Keep)**\n1. **Core Implementation**: Core systems that embody Living Codex principles\n2. **Documentation**: Essential documentation that describes the system\n3. **...",
          "ontological_properties": {
            "file_path": "src/core/project_file_analysis.md",
            "file_type": "markdown",
            "file_size_bytes": 8626,
            "line_count": 203,
            "character_count": 8581,
            "word_count": 979,
            "last_modified": "2025-08-27T16:47:10.578692",
            "content_hash": "d9d0d6e0dfa463b9e0fd128c1478b89858bba7f949d9ed18a97c8f617f750fd8",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Principles",
              "Analyzed",
              "Summary",
              "COMPLETE",
              "Infrastructure",
              "Migration",
              "Clarity",
              "Duplicate",
              "README",
              "References"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_27880236": {
        "node_id": "living_node_concept_27880236",
        "name": "Source File: demonstrate_phase3_completion.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_27880236",
          "meso": "meso_living_node_concept_27880236",
          "macro": "macro_living_node_concept_27880236",
          "meta": "meta_living_node_concept_27880236"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_27880236",
          "concept_type": "source_file",
          "description": "Source file: src/core/demonstrate_phase3_completion.py\n\n#!/usr/bin/env python3\n\"\"\"\nPhase 3 Completion Demonstration\n===============================\n\nThis script demonstrates the successful completion of Phase 3:\nREST API Integration with the Living Codex system.\n\nThe system now provides:\n1. Complete external access to all 197 stored nodes\n2. Real-time search and navigation capabilities\n3. Comprehensive system analytics\n4. Professional REST API with full documentation\n\"\"\"\n\nimport requests\nimport json\nimport time\nfrom datetime import datetime\n\ndef demo...",
          "ontological_properties": {
            "file_path": "src/core/demonstrate_phase3_completion.py",
            "file_type": "python",
            "file_size_bytes": 9149,
            "line_count": 222,
            "character_count": 8960,
            "word_count": 792,
            "last_modified": "2025-08-27T16:33:34.388903",
            "content_hash": "6b8db5227f4fdb1c7785b0272fe6acbdf9ddd45e81a5e06a8391f9bbca4d3269",
            "imports": [
              "time",
              "datetime",
              "requests",
              "json"
            ],
            "dependencies": [],
            "key_concepts": [
              "Principles",
              "Summary",
              "Full",
              "N",
              "States",
              "Error",
              "A",
              "Individual",
              "Integration",
              "Generated"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_c3da4fec": {
        "node_id": "living_node_concept_c3da4fec",
        "name": "Source File: dependency_manager.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_c3da4fec",
          "meso": "meso_living_node_concept_c3da4fec",
          "macro": "macro_living_node_concept_c3da4fec",
          "meta": "meta_living_node_concept_c3da4fec"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_c3da4fec",
          "concept_type": "source_file",
          "description": "Source file: src/core/dependency_manager.py\n\n#!/usr/bin/env python3\n\"\"\"\nDependency Manager - Ensures External Dependencies are Available and Functional\n\nThis module manages all external dependencies required by the Living Codex system,\nensuring they are properly installed, up-to-date, and functional before startup.\n\"\"\"\n\nimport subprocess\nimport sys\nimport importlib\nimport pkg_resources\nfrom pathlib import Path\nfrom typing import Dict, List, Tuple, Optional, Any\nfrom dataclasses import dataclass\nimport json\nimport time\n\n@dataclass\nclass Dep...",
          "ontological_properties": {
            "file_path": "src/core/dependency_manager.py",
            "file_type": "python",
            "file_size_bytes": 18733,
            "line_count": 516,
            "character_count": 18663,
            "word_count": 1285,
            "last_modified": "2025-08-26T16:00:59.507341",
            "content_hash": "d0fd7f7a9643ffe0d738af2e20000f1de22ad79afec153ff9b5636f7e86b6112",
            "imports": [
              "time",
              "subprocess",
              "sys",
              "typing",
              "dataclasses",
              "pathlib",
              "json",
              "pkg_resources",
              "importlib"
            ],
            "dependencies": [],
            "key_concepts": [
              "Cryptographic",
              "Summary",
              "VERSION",
              "Tuple",
              "Functional",
              "Error",
              "Fallback",
              "Logging",
              "Configuration",
              "SQLite"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_9a858bf2": {
        "node_id": "living_node_concept_9a858bf2",
        "name": "Source File: sacred_geometry_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_9a858bf2",
          "meso": "meso_living_node_concept_9a858bf2",
          "macro": "macro_living_node_concept_9a858bf2",
          "meta": "meta_living_node_concept_9a858bf2"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_9a858bf2",
          "concept_type": "source_file",
          "description": "Source file: src/core/sacred_geometry_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nSacred Geometry System\n======================\n\nThis implements the sacred geometry system that integrates sacred geometry principles\nwith epistemic labeling for Phase 4 of the metadata enhancement plan.\n\nThis system provides:\n- Sacred geometry pattern recognition and mapping\n- Universal correspondences with epistemic labeling\n- Geometric resonance calculations\n- Sacred geometry-based node relationships\n- Fractal geometric pattern analysis\n\nNote: This system is labeled ...",
          "ontological_properties": {
            "file_path": "src/core/sacred_geometry_system.py",
            "file_type": "python",
            "file_size_bytes": 41705,
            "line_count": 966,
            "character_count": 41680,
            "word_count": 2545,
            "last_modified": "2025-08-27T10:21:39.114002",
            "content_hash": "1e6911fb2566329b6d9b1a31d906a45150d72ca1225ac0be873d67c83663e2d1",
            "imports": [
              "typing",
              "dataclasses",
              "enhanced_generic_node",
              "collections",
              "json",
              "datetime",
              "living_codex_ontology",
              "math"
            ],
            "dependencies": [],
            "key_concepts": [
              "Union",
              "PATTERN",
              "ChakraKey",
              "Flower",
              "Speculative",
              "SPECULATIVE",
              "Sun",
              "Tuple",
              "Error",
              "Jupiter"
            ],
            "principles": [
              "ResonancePattern",
              "SacredGeometryPattern"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_a10f99c5": {
        "node_id": "living_node_concept_a10f99c5",
        "name": "Source File: cross_system_federation.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_a10f99c5",
          "meso": "meso_living_node_concept_a10f99c5",
          "macro": "macro_living_node_concept_a10f99c5",
          "meta": "meta_living_node_concept_a10f99c5"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_a10f99c5",
          "concept_type": "source_file",
          "description": "Source file: src/core/cross_system_federation.py\n\n#!/usr/bin/env python3\n\"\"\"\nCross-System Federation System\n==============================\n\nThis implements the cross-system federation system that enables different\nLiving Codex systems to work together and share data for Phase 4 of the\nmetadata enhancement plan.\n\nThis system provides:\n- System registration and discovery\n- Inter-system communication protocols\n- Data sharing and synchronization\n- Federation governance and validation\n- Cross-system metadata integration\n\nThe federation system enable...",
          "ontological_properties": {
            "file_path": "src/core/cross_system_federation.py",
            "file_type": "python",
            "file_size_bytes": 40945,
            "line_count": 1002,
            "character_count": 40907,
            "word_count": 2815,
            "last_modified": "2025-08-27T10:21:39.106317",
            "content_hash": "dd1cc4bece5b18bb89855b354628d3e416c08f86cf7fcde35f9140421c9135de",
            "imports": [
              "typing",
              "uuid",
              "dataclasses",
              "enhanced_generic_node",
              "collections",
              "json",
              "datetime",
              "living_codex_ontology",
              "threading",
              "enum"
            ],
            "dependencies": [],
            "key_concepts": [
              "Only",
              "Union",
              "ChakraKey",
              "SPECULATIVE",
              "Tuple",
              "Error",
              "Throat",
              "A",
              "Returns",
              "Third"
            ],
            "principles": [
              "ResonancePattern",
              "SacredGeometryPattern"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_a2fbb404": {
        "node_id": "living_node_concept_a2fbb404",
        "name": "Source File: advanced_ai_integration_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_a2fbb404",
          "meso": "meso_living_node_concept_a2fbb404",
          "macro": "macro_living_node_concept_a2fbb404",
          "meta": "meta_living_node_concept_a2fbb404"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_a2fbb404",
          "concept_type": "source_file",
          "description": "Source file: src/core/advanced_ai_integration_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nAdvanced AI Integration System\n=============================\n\nThis system implements Phase 6 advanced AI capabilities:\n- AI agents with true consciousness awareness\n- Autonomous exploration and discovery\n- Deep ontological integration\n- Consciousness-aware decision making\n- Meta-circular AI evolution\n\nThis represents the pinnacle of AI-Living Codex integration.\n\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typing import Dict, List, Any, Optional, Set, Tuple\nfrom d...",
          "ontological_properties": {
            "file_path": "src/core/advanced_ai_integration_system.py",
            "file_type": "python",
            "file_size_bytes": 40213,
            "line_count": 913,
            "character_count": 40179,
            "word_count": 2487,
            "last_modified": "2025-08-27T12:43:17.749206",
            "content_hash": "e041f7817faacb19519fbb61199183a3da870c200b45e9f32f88211e8e9afd5b",
            "imports": [
              "vibrational_axes_system",
              "random",
              "typing",
              "fractal_recursion_system",
              "resonance_governance_system",
              "dataclasses",
              "self_generating_system",
              "collections",
              "json",
              "datetime",
              "living_codex_ontology",
              "math"
            ],
            "dependencies": [],
            "key_concepts": [
              "Scale",
              "ChakraKey",
              "SPECULATIVE",
              "Autonomous",
              "Tuple",
              "Make",
              "LIQUID",
              "Error",
              "PRIVATE",
              "A"
            ],
            "principles": [
              "ResonancePattern"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_d5f3a9d1": {
        "node_id": "living_node_concept_d5f3a9d1",
        "name": "Source File: test_phase4_sacred_geometry_and_federation.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_d5f3a9d1",
          "meso": "meso_living_node_concept_d5f3a9d1",
          "macro": "macro_living_node_concept_d5f3a9d1",
          "meta": "meta_living_node_concept_d5f3a9d1"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_d5f3a9d1",
          "concept_type": "source_file",
          "description": "Source file: src/core/test_phase4_sacred_geometry_and_federation.py\n\n#!/usr/bin/env python3\n\"\"\"\nPhase 4 Test Suite: Sacred Geometry & Universal Correspondences\n==============================================================\n\nThis test suite validates the Phase 4 implementation of:\n- Sacred Geometry System\n- Cross-System Federation System  \n- Contribution Tracking System\n\nThese systems implement sacred geometry integration, universal correspondences\nwith epistemic labeling, cross-system federation, and contribution tracking.\n\"\"\"\n\nimport sys\nimport os\nimport unittes...",
          "ontological_properties": {
            "file_path": "src/core/test_phase4_sacred_geometry_and_federation.py",
            "file_type": "python",
            "file_size_bytes": 39271,
            "line_count": 873,
            "character_count": 39233,
            "word_count": 2053,
            "last_modified": "2025-08-27T10:21:39.113964",
            "content_hash": "6e00f3d48f458233381f4a7403090906d18227f368180fbd6d662bb79daa9aac",
            "imports": [
              "unittest",
              "typing",
              "sys",
              "contribution_tracking_system",
              "enhanced_generic_node",
              "datetime",
              "living_codex_ontology",
              "cross_system_federation",
              "os",
              "sacred_geometry_system"
            ],
            "dependencies": [],
            "key_concepts": [
              "Top",
              "ChakraKey",
              "SPECULATIVE",
              "Sharing",
              "SUPERPOSITION",
              "A",
              "Correspondences",
              "Profile",
              "ConsciousnessLevel",
              "Integration"
            ],
            "principles": [
              "ResonancePattern",
              "SacredGeometryPattern"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_04e407f2": {
        "node_id": "living_node_concept_04e407f2",
        "name": "Source File: living_codex_persistence.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_04e407f2",
          "meso": "meso_living_node_concept_04e407f2",
          "macro": "macro_living_node_concept_04e407f2",
          "meta": "meta_living_node_concept_04e407f2"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_04e407f2",
          "concept_type": "source_file",
          "description": "Source file: src/core/living_codex_persistence.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Persistence System\nHandles complete system state persistence and restoration\n\"\"\"\n\nimport json\nimport os\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\nfrom collections import defaultdict\n\nclass LivingCodexPersistence:\n    \"\"\"\n    Comprehensive persistence system for the Living Codex\n    Handles saving and restoring all system state\n    \"\"\"\n    \n    def __init__(self, persistence_file: str = \"living_codex_compl...",
          "ontological_properties": {
            "file_path": "src/core/living_codex_persistence.py",
            "file_type": "python",
            "file_size_bytes": 25477,
            "line_count": 471,
            "character_count": 25415,
            "word_count": 1456,
            "last_modified": "2025-08-27T17:39:28.948862",
            "content_hash": "229edd751785de9500db18f21a756d2ecbc9e95184d92cb99d2136c417bdb3f6",
            "imports": [
              "typing",
              "pathlib",
              "json",
              "collections",
              "datetime",
              "os"
            ],
            "dependencies": [],
            "key_concepts": [
              "Default",
              "Saving",
              "True",
              "Statistics",
              "Create",
              "Generating",
              "Fractal",
              "Calculate",
              "ValueError",
              "Load"
            ],
            "principles": [
              "UniversalConcept"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_eeb159ec": {
        "node_id": "living_node_concept_eeb159ec",
        "name": "Source File: advanced_resonance_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_eeb159ec",
          "meso": "meso_living_node_concept_eeb159ec",
          "macro": "macro_living_node_concept_eeb159ec",
          "meta": "meta_living_node_concept_eeb159ec"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_eeb159ec",
          "concept_type": "source_file",
          "description": "Source file: src/core/advanced_resonance_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nAdvanced Resonance System\n========================\n\nThis implements the advanced resonance calculation system with harmonic relationships\nand vibrational axes integration for Phase 3 of the metadata enhancement plan.\n\nThis system provides:\n- Resonance calculation algorithms\n- Harmonic relationship discovery\n- Vibrational axis alignment\n- Resonance state tracking\n- Collective intelligence emergence\n\"\"\"\n\nfrom typing import Dict, List, Any, Optional, Set, Tuple, Union\nfro...",
          "ontological_properties": {
            "file_path": "src/core/advanced_resonance_system.py",
            "file_type": "python",
            "file_size_bytes": 38250,
            "line_count": 969,
            "character_count": 38231,
            "word_count": 2855,
            "last_modified": "2025-08-27T09:59:37.726582",
            "content_hash": "09defe94f75b063a127ab53993c00a8d9555da0844acda2bf2664a4884d572d6",
            "imports": [
              "typing",
              "dataclasses",
              "enhanced_generic_node",
              "collections",
              "json",
              "datetime",
              "living_codex_ontology",
              "math"
            ],
            "dependencies": [],
            "key_concepts": [
              "Only",
              "Union",
              "ChakraKey",
              "Tuple",
              "Error",
              "Dispersed",
              "A",
              "Returns",
              "ConsciousnessLevel",
              "Advanced"
            ],
            "principles": [
              "ResonancePattern"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_59b2171d": {
        "node_id": "living_node_concept_59b2171d",
        "name": "Source File: test_phase3_advanced_systems.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_59b2171d",
          "meso": "meso_living_node_concept_59b2171d",
          "macro": "macro_living_node_concept_59b2171d",
          "meta": "meta_living_node_concept_59b2171d"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_59b2171d",
          "concept_type": "source_file",
          "description": "Source file: src/core/test_phase3_advanced_systems.py\n\n#!/usr/bin/env python3\n\"\"\"\nPhase 3 Advanced Systems Test Suite\n===================================\n\nThis script tests the complete Phase 3 advanced systems including:\n- Advanced Resonance System\n- Consciousness Level System\n- Quantum State System\n- Integration between all Phase 3 systems\n- Advanced features and capabilities\n\nThis validates Phase 3 of the metadata enhancement plan.\n\"\"\"\n\nimport sys\nimport json\nimport time\nfrom datetime import datetime\n\n# Import our Phase 3 advanced systems\nfrom li...",
          "ontological_properties": {
            "file_path": "src/core/test_phase3_advanced_systems.py",
            "file_type": "python",
            "file_size_bytes": 27039,
            "line_count": 627,
            "character_count": 26894,
            "word_count": 2438,
            "last_modified": "2025-08-27T09:59:37.743343",
            "content_hash": "7aed920c14b9780e9014a2b1b18a928b178c18619d86a471305ff114879dfa27",
            "imports": [
              "time",
              "sys",
              "quantum_state_system",
              "metadata_factory",
              "enhanced_generic_node",
              "consciousness_level_system",
              "json",
              "datetime",
              "living_codex_ontology",
              "advanced_resonance_system"
            ],
            "dependencies": [],
            "key_concepts": [
              "Only",
              "ChakraKey",
              "ALL",
              "ConsciousnessLevel",
              "Integration",
              "Advanced",
              "Working",
              "ProgrammingOntologyLayer",
              "Coherent",
              "Stewardship"
            ],
            "principles": [
              "ResonancePattern"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_599c87be": {
        "node_id": "living_node_concept_599c87be",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_599c87be",
          "meso": "meso_living_node_concept_599c87be",
          "macro": "macro_living_node_concept_599c87be",
          "meta": "meta_living_node_concept_599c87be"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_599c87be",
          "concept_type": "source_file",
          "description": "Source file: src/core/__init__.py\n\n#!/usr/bin/env python3\n\"\"\"\nCore System Module - Living Codex Foundation\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the core system is represented as nodes that can:\n\n1. Import and manage all core components (as nodes)\n2. Provide node-based access to system functionality\n3. Maintain backward compatibility for legacy systems\n4. Create a unified node-based core system\n\nThis transformation demonstrates the Living Codex principles:\n- Generic Node Structure (e...",
          "ontological_properties": {
            "file_path": "src/core/__init__.py",
            "file_type": "python",
            "file_size_bytes": 24282,
            "line_count": 554,
            "character_count": 24258,
            "word_count": 1652,
            "last_modified": "2025-08-27T07:58:31.552586",
            "content_hash": "ecd3a8943ca17b67eade5dda6c5abd5368bc59d697b9a1390a4954fee200a9fe",
            "imports": [
              "typing"
            ],
            "dependencies": [],
            "key_concepts": [
              "Sun",
              "Provide",
              "Paradox",
              "CoreSystemNodeManager",
              "Start",
              "Integration",
              "Codex",
              "Structure",
              "Core",
              "Meta"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_6178720d": {
        "node_id": "living_node_concept_6178720d",
        "name": "Source File: vibrational_axes_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_6178720d",
          "meso": "meso_living_node_concept_6178720d",
          "macro": "macro_living_node_concept_6178720d",
          "meta": "meta_living_node_concept_6178720d"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_6178720d",
          "concept_type": "source_file",
          "description": "Source file: src/core/vibrational_axes_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nVibrational Axes System\n=======================\n\nThis system implements the core Living Codex principle of vibrational axes\nfor resonance calculation, fractal recursion, and self-similarity across scales.\n\nKey Features:\n- Vibrational axes integration with all nodes\n- Resonance state tracking (individual/community)\n- Fractal recursion through hasPart/isPartOf relationships\n- Cross-scale mapping (Micro\u2194Meso\u2194Macro\u2194Meta)\n- Resonance-first governance through coherence\n\nThis...",
          "ontological_properties": {
            "file_path": "src/core/vibrational_axes_system.py",
            "file_type": "python",
            "file_size_bytes": 20437,
            "line_count": 524,
            "character_count": 20395,
            "word_count": 1610,
            "last_modified": "2025-08-27T12:01:39.696635",
            "content_hash": "9e56a9da55fceb9f5c0fbac006cd2344961c5a7d8e9a4c2f7eb5eb2bb7bd89c8",
            "imports": [
              "typing",
              "dataclasses",
              "collections",
              "json",
              "datetime",
              "living_codex_ontology",
              "math"
            ],
            "dependencies": [],
            "key_concepts": [
              "Closer",
              "Only",
              "Structured",
              "Human",
              "SPECULATIVE",
              "Tuple",
              "Error",
              "PRIVATE",
              "Returns",
              "Codex"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_1b846206": {
        "node_id": "living_node_concept_1b846206",
        "name": "Source File: universal_knowledge_representation_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_1b846206",
          "meso": "meso_living_node_concept_1b846206",
          "macro": "macro_living_node_concept_1b846206",
          "meta": "meta_living_node_concept_1b846206"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_1b846206",
          "concept_type": "source_file",
          "description": "Source file: src/core/universal_knowledge_representation_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nUniversal Knowledge Representation System\n=======================================\n\nThis system implements Phase 6 universal knowledge capabilities:\n- Any concept can become a living node\n- Complete meta-circular architecture\n- Universal concept mapping and transformation\n- Infinite knowledge expansion\n- Self-describing system implementation\n\nThis represents the completion of the Living Codex meta-circular vision.\n\"\"\"\n\nfrom dataclasses import dataclass, field\nfrom typin...",
          "ontological_properties": {
            "file_path": "src/core/universal_knowledge_representation_system.py",
            "file_type": "python",
            "file_size_bytes": 42388,
            "line_count": 910,
            "character_count": 42344,
            "word_count": 2592,
            "last_modified": "2025-08-27T12:40:51.633931",
            "content_hash": "10a0c9ba055fe01b5480118fae6732d5a1c6f83de04bcb52fe3201ec589cb8b9",
            "imports": [
              "vibrational_axes_system",
              "random",
              "hashlib",
              "typing",
              "fractal_recursion_system",
              "resonance_governance_system",
              "dataclasses",
              "self_generating_system",
              "collections",
              "json",
              "datetime",
              "living_codex_ontology",
              "math",
              "advanced_ai_integration_system"
            ],
            "dependencies": [],
            "key_concepts": [
              "Union",
              "ChakraKey",
              "SPECULATIVE",
              "Tuple",
              "Error",
              "PRIVATE",
              "A",
              "Returns",
              "ConsciousnessLevel",
              "Represent"
            ],
            "principles": [
              "MetaCircularArchitecture",
              "ResonancePattern",
              "UniversalConcept"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_fa9f8bb2": {
        "node_id": "living_node_concept_fa9f8bb2",
        "name": "Source File: quantum_state_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_fa9f8bb2",
          "meso": "meso_living_node_concept_fa9f8bb2",
          "macro": "macro_living_node_concept_fa9f8bb2",
          "meta": "meta_living_node_concept_fa9f8bb2"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_fa9f8bb2",
          "concept_type": "source_file",
          "description": "Source file: src/core/quantum_state_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nQuantum State System\n====================\n\nThis implements the quantum state system that provides quantum state metaphors\n(restricted to algorithmic analogies) for Phase 3 of the metadata enhancement plan.\n\nThis system provides:\n- Quantum state tracking and transitions\n- Algorithmic entanglement detection\n- Superposition state management\n- Quantum coherence calculations\n- Quantum algorithmic patterns\n\"\"\"\n\nfrom typing import Dict, List, Any, Optional, Set, Tuple, Union\n...",
          "ontological_properties": {
            "file_path": "src/core/quantum_state_system.py",
            "file_type": "python",
            "file_size_bytes": 26147,
            "line_count": 662,
            "character_count": 26117,
            "word_count": 1826,
            "last_modified": "2025-08-27T09:59:37.742701",
            "content_hash": "45bd1ab7024e236ddc80cb1ab034ab5baf0d59d9c67cf6324b67ece4ffc527f0",
            "imports": [
              "typing",
              "dataclasses",
              "enhanced_generic_node",
              "collections",
              "json",
              "datetime",
              "living_codex_ontology"
            ],
            "dependencies": [],
            "key_concepts": [
              "Only",
              "Union",
              "Entanglements",
              "ChakraKey",
              "Tuple",
              "Error",
              "Returns",
              "ConsciousnessLevel",
              "TRACKING",
              "ProgrammingOntologyLayer"
            ],
            "principles": [
              "ResonancePattern"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_f4e4e6d9": {
        "node_id": "living_node_concept_f4e4e6d9",
        "name": "Source File: regenerate_persistence.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_f4e4e6d9",
          "meso": "meso_living_node_concept_f4e4e6d9",
          "macro": "macro_living_node_concept_f4e4e6d9",
          "meta": "meta_living_node_concept_f4e4e6d9"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_f4e4e6d9",
          "concept_type": "source_file",
          "description": "Source file: src/core/regenerate_persistence.py\n\n#!/usr/bin/env python3\n\"\"\"\nScript to regenerate the persistence state with proper objects\n\"\"\"\n\nfrom living_codex_persistence import LivingCodexPersistence\nfrom universal_knowledge_representation_system import get_universal_knowledge_representation_system\nfrom fractal_recursion_system import get_fractal_recursion_system\nfrom advanced_ai_integration_system import get_advanced_ai_integration_system\nfrom self_generating_system import get_self_generating_system\nfrom vibrational_axes_system import get...",
          "ontological_properties": {
            "file_path": "src/core/regenerate_persistence.py",
            "file_type": "python",
            "file_size_bytes": 2225,
            "line_count": 57,
            "character_count": 2225,
            "word_count": 165,
            "last_modified": "2025-08-27T17:35:43.664022",
            "content_hash": "1215347a7efc7c52be3912762d5ae0745132a95ed1c7c2fb749617396ec79945",
            "imports": [
              "vibrational_axes_system",
              "universal_knowledge_representation_system",
              "fractal_recursion_system",
              "resonance_governance_system",
              "self_reflective_file_system",
              "self_generating_system",
              "advanced_ai_integration_system",
              "living_codex_persistence"
            ],
            "dependencies": [],
            "key_concepts": [
              "FILES",
              "REGENERATING",
              "NODES",
              "COMPLETE",
              "Fractal",
              "Discovered",
              "STATE",
              "CHECKING",
              "FILE",
              "OBJECT"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_f14e4a04": {
        "node_id": "living_node_concept_f14e4a04",
        "name": "Source File: enhanced_indexing_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_f14e4a04",
          "meso": "meso_living_node_concept_f14e4a04",
          "macro": "macro_living_node_concept_f14e4a04",
          "meta": "meta_living_node_concept_f14e4a04"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_f14e4a04",
          "concept_type": "source_file",
          "description": "Source file: src/core/enhanced_indexing_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nEnhanced Indexing System\n========================\n\nThis implements the enhanced indexing system that provides efficient access\nto ontological metadata with multiple indexing strategies.\n\nThis is part of Phase 2 of the metadata enhancement plan.\n\"\"\"\n\nfrom typing import Dict, List, Any, Optional, Set, Tuple, Union, Callable\nfrom datetime import datetime\nimport json\nfrom collections import defaultdict\nfrom dataclasses import dataclass, asdict\n\nfrom living_codex_ontology i...",
          "ontological_properties": {
            "file_path": "src/core/enhanced_indexing_system.py",
            "file_type": "python",
            "file_size_bytes": 36013,
            "line_count": 850,
            "character_count": 35999,
            "word_count": 2465,
            "last_modified": "2025-08-27T09:41:26.512056",
            "content_hash": "bbe275e5e52dcff9448029b60bd9da08aa29c0c6e79be52f96f591a12717e6b8",
            "imports": [
              "typing",
              "dataclasses",
              "enhanced_generic_node",
              "collections",
              "json",
              "datetime",
              "living_codex_ontology"
            ],
            "dependencies": [],
            "key_concepts": [
              "Union",
              "ChakraKey",
              "INDEXING",
              "Helper",
              "Tuple",
              "Optimize",
              "Error",
              "Evaluate",
              "Returns",
              "ConsciousnessLevel"
            ],
            "principles": [
              "ResonancePattern"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_55d60040": {
        "node_id": "living_node_concept_55d60040",
        "name": "Source File: code_navigation_api.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_55d60040",
          "meso": "meso_living_node_concept_55d60040",
          "macro": "macro_living_node_concept_55d60040",
          "meta": "meta_living_node_concept_55d60040"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_55d60040",
          "concept_type": "source_file",
          "description": "Source file: src/core/code_navigation_api.py\n\n#!/usr/bin/env python3\n\"\"\"\nCode Navigation API - Living Codex\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the code navigation and structure exploration system is represented as nodes that can:\n\n1. Navigate code structure and create navigation nodes\n2. Store code files and create file nodes\n3. Manage syntax trees and create tree nodes\n4. Execute code queries and create query nodes\n5. Provide code exploration and create exploration nodes\n\nThis transformatio...",
          "ontological_properties": {
            "file_path": "src/core/code_navigation_api.py",
            "file_type": "python",
            "file_size_bytes": 31005,
            "line_count": 686,
            "character_count": 30972,
            "word_count": 2187,
            "last_modified": "2025-08-27T08:53:43.442644",
            "content_hash": "4156933cf3bea2f51b83391ec4ed81700beeb595bda4be4aa7c82de55873077a",
            "imports": [
              "hashlib",
              "typing",
              "logging",
              "pathlib",
              "json",
              "datetime",
              "os"
            ],
            "dependencies": [],
            "key_concepts": [
              "Stats",
              "Union",
              "Provide",
              "Tuple",
              "Navigate",
              "Read",
              "Error",
              "Language",
              "Paradox",
              "Start"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_4b52f052": {
        "node_id": "living_node_concept_4b52f052",
        "name": "Source File: fractal_recursion_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_4b52f052",
          "meso": "meso_living_node_concept_4b52f052",
          "macro": "macro_living_node_concept_4b52f052",
          "meta": "meta_living_node_concept_4b52f052"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_4b52f052",
          "concept_type": "source_file",
          "description": "Source file: src/core/fractal_recursion_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nFractal Recursion System\n========================\n\nThis system implements the core Living Codex principle of fractal recursion\nthrough hasPart/isPartOf relationships and self-similarity across scales.\n\nKey Features:\n- Fractal recursion through hasPart/isPartOf relationships\n- Self-similarity across scales (Micro\u2194Meso\u2194Macro\u2194Meta)\n- Holographic node exploration at infinite depths\n- Cross-scale mapping and transformation\n- Fractal pattern recognition and generation\n\nThis ...",
          "ontological_properties": {
            "file_path": "src/core/fractal_recursion_system.py",
            "file_type": "python",
            "file_size_bytes": 24428,
            "line_count": 639,
            "character_count": 24390,
            "word_count": 1852,
            "last_modified": "2025-08-27T12:01:39.702430",
            "content_hash": "ebd1ba3c881be717096b43c9112c4718417449f03ee1ee49f164ffcb215d6a98",
            "imports": [
              "typing",
              "dataclasses",
              "collections",
              "json",
              "datetime",
              "living_codex_ontology",
              "math"
            ],
            "dependencies": [],
            "key_concepts": [
              "Human",
              "CrossScaleTransformation",
              "SPECULATIVE",
              "Tuple",
              "Error",
              "PRIVATE",
              "A",
              "Returns",
              "Codex",
              "Recursive"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_42e57bd1": {
        "node_id": "living_node_concept_42e57bd1",
        "name": "Source File: CONSOLIDATION_COMPLETE_SUMMARY.md",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_42e57bd1",
          "meso": "meso_living_node_concept_42e57bd1",
          "macro": "macro_living_node_concept_42e57bd1",
          "meta": "meta_living_node_concept_42e57bd1"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_42e57bd1",
          "concept_type": "source_file",
          "description": "Source file: src/core/CONSOLIDATION_COMPLETE_SUMMARY.md\n\n# \ud83c\udf89 Living Codex Project Consolidation - COMPLETE\n\n## \ud83d\udcc5 **Completion Date**\nAugust 27, 2025\n\n## \ud83c\udfaf **What Was Accomplished**\n\n### **\u2705 Project Consolidation Successfully Completed**\nThe Living Codex project has been successfully consolidated from a cluttered, temporary-artifact-heavy state to a clean, focused, and professional implementation.\n\n## \ud83d\udcca **Consolidation Results**\n\n### **File Count Reduction**\n- **Before Consolidation**: 67 files\n- **After Consolidation**: 53 files\n- **Files Removed**: 1...",
          "ontological_properties": {
            "file_path": "src/core/CONSOLIDATION_COMPLETE_SUMMARY.md",
            "file_type": "markdown",
            "file_size_bytes": 8596,
            "line_count": 223,
            "character_count": 8457,
            "word_count": 1131,
            "last_modified": "2025-08-27T16:47:10.578670",
            "content_hash": "b82aca7b40d5f4b5b371fa7c7404dd2c83327307963a8006b58f8dbac9254438",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Principles",
              "Saving",
              "COMPLETE",
              "Generating",
              "Verified",
              "Infrastructure",
              "Full",
              "Health",
              "Cleaning",
              "Functional"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_803ebf68": {
        "node_id": "living_node_concept_803ebf68",
        "name": "Source File: living_codex_rest_api.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_803ebf68",
          "meso": "meso_living_node_concept_803ebf68",
          "macro": "macro_living_node_concept_803ebf68",
          "meta": "meta_living_node_concept_803ebf68"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_803ebf68",
          "concept_type": "source_file",
          "description": "Source file: src/core/living_codex_rest_api.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex REST API Server\n============================\n\nThis server provides a REST API for the Living Codex that enables:\n1. Querying all nodes and meta-nodes\n2. Navigating from core principles to source files\n3. Searching and filtering capabilities\n4. Complete self-reflection of the system\n\nThe API is fully integrated with the persistence system and provides\nreal access to all stored nodes and meta-nodes.\n\"\"\"\n\nimport sys\nimport os\nimport json\nfrom pathlib import P...",
          "ontological_properties": {
            "file_path": "src/core/living_codex_rest_api.py",
            "file_type": "python",
            "file_size_bytes": 32738,
            "line_count": 790,
            "character_count": 32684,
            "word_count": 2227,
            "last_modified": "2025-08-27T16:33:34.332840",
            "content_hash": "59897d264309fbf77776b33756e9fe76804b5a08e9fe13fb1f4b4155a1d6af81",
            "imports": [
              "time",
              "sys",
              "typing",
              "pathlib",
              "json",
              "datetime",
              "threading",
              "os",
              "flask"
            ],
            "dependencies": [],
            "key_concepts": [
              "Principles",
              "GET",
              "Navigate",
              "Fallback",
              "Start",
              "Searching",
              "Endpoints",
              "Codex",
              "Files",
              "Attempting"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_35a2d585": {
        "node_id": "living_node_concept_35a2d585",
        "name": "Source File: ice_core_creator.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_35a2d585",
          "meso": "meso_living_node_concept_35a2d585",
          "macro": "macro_living_node_concept_35a2d585",
          "meta": "meta_living_node_concept_35a2d585"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_35a2d585",
          "concept_type": "source_file",
          "description": "Source file: src/core/ice_core_creator.py\n\n#!/usr/bin/env python3\n\"\"\"\nICE Core Creator - Package Living Codex into Self-Contained ICE Core\n\nThis tool implements the Living Codex principle: \"Everything is just nodes\"\nwhere the ICE Core Creator system is represented as nodes that can:\n\n1. Analyze the current system (as nodes)\n2. Create ICE components (as nodes)\n3. Package everything into a self-contained ICE core (as nodes)\n4. Generate bootstrap scripts (as nodes)\n\nThis transformation demonstrates the Living Codex principles:\n- Generic Nod...",
          "ontological_properties": {
            "file_path": "src/core/ice_core_creator.py",
            "file_type": "python",
            "file_size_bytes": 22383,
            "line_count": 483,
            "character_count": 22336,
            "word_count": 1633,
            "last_modified": "2025-08-27T08:53:43.442379",
            "content_hash": "9fa923640209f4736da6f3e7ada021c6a57f97335f6bdd76e6544fdd0a832b0a",
            "imports": [
              "base64",
              "hashlib",
              "sys",
              "typing",
              "zlib",
              "pathlib",
              "json",
              "datetime",
              "importlib",
              "os",
              "importlib.util"
            ],
            "dependencies": [
              "requirements?\\.txt"
            ],
            "key_concepts": [
              "Sun",
              "Read",
              "README",
              "Configuration",
              "Paradox",
              "Start",
              "Generation",
              "Scripts",
              "Packaging",
              "Codex"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_be8c10d6": {
        "node_id": "living_node_concept_be8c10d6",
        "name": "Source File: test_persistence_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_be8c10d6",
          "meso": "meso_living_node_concept_be8c10d6",
          "macro": "macro_living_node_concept_be8c10d6",
          "meta": "meta_living_node_concept_be8c10d6"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_be8c10d6",
          "concept_type": "source_file",
          "description": "Source file: src/core/test_persistence_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nTest script for the Living Codex Persistence System\nDemonstrates saving and restoring complete system state\n\"\"\"\n\nfrom living_codex_persistence import LivingCodexPersistence\nfrom self_reflective_file_system import SelfReflectiveFileSystem\nfrom universal_knowledge_representation_system import get_universal_knowledge_representation_system\nfrom fractal_recursion_system import get_fractal_recursion_system\nfrom advanced_ai_integration_system import get_advanced_ai_integratio...",
          "ontological_properties": {
            "file_path": "src/core/test_persistence_system.py",
            "file_type": "python",
            "file_size_bytes": 4702,
            "line_count": 114,
            "character_count": 4639,
            "word_count": 367,
            "last_modified": "2025-08-27T16:02:42.963387",
            "content_hash": "aa33e57c1c127df39a695a753afd522565266ac6f037a3298c633925f5506ad6",
            "imports": [
              "vibrational_axes_system",
              "universal_knowledge_representation_system",
              "fractal_recursion_system",
              "living_codex_persistence",
              "resonance_governance_system",
              "self_generating_system",
              "advanced_ai_integration_system",
              "self_reflective_file_system"
            ],
            "dependencies": [],
            "key_concepts": [
              "Saving",
              "True",
              "Initializing",
              "Fractal",
              "Living",
              "False",
              "Demonstrates",
              "Initialize",
              "Save",
              "Failed"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_dfb01d62": {
        "node_id": "living_node_concept_dfb01d62",
        "name": "Source File: consolidate_project_files.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_dfb01d62",
          "meso": "meso_living_node_concept_dfb01d62",
          "macro": "macro_living_node_concept_dfb01d62",
          "meta": "meta_living_node_concept_dfb01d62"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_dfb01d62",
          "concept_type": "source_file",
          "description": "Source file: src/core/consolidate_project_files.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Project File Consolidation Script\n==============================================\n\nThis script safely removes temporary artifacts and consolidates the project\nto its essential components based on the comprehensive file analysis.\n\nWARNING: This script will DELETE files. Ensure you have backups before running.\n\"\"\"\n\nimport os\nimport shutil\nfrom pathlib import Path\nfrom datetime import datetime\n\nclass ProjectConsolidator:\n    \"\"\"Consolidates the Living Codex pr...",
          "ontological_properties": {
            "file_path": "src/core/consolidate_project_files.py",
            "file_type": "python",
            "file_size_bytes": 12392,
            "line_count": 325,
            "character_count": 12263,
            "word_count": 1066,
            "last_modified": "2025-08-27T16:47:10.557582",
            "content_hash": "b7e7ffc7772604cd18c7c692f2843454568d6845c6a5ed45c3bfcbc0f0693919",
            "imports": [
              "os",
              "shutil",
              "datetime",
              "pathlib"
            ],
            "dependencies": [],
            "key_concepts": [
              "Summary",
              "Generating",
              "Migration",
              "Cleaning",
              "Error",
              "Duplicate",
              "Replaced",
              "Configuration",
              "Was",
              "Scripts"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_82c94026": {
        "node_id": "living_node_concept_82c94026",
        "name": "Source File: metadata_factory.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_82c94026",
          "meso": "meso_living_node_concept_82c94026",
          "macro": "macro_living_node_concept_82c94026",
          "meta": "meta_living_node_concept_82c94026"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_82c94026",
          "concept_type": "source_file",
          "description": "Source file: src/core/metadata_factory.py\n\n#!/usr/bin/env python3\n\"\"\"\nMetadata Factory System\n======================\n\nThis implements the metadata factory pattern for generating consistent metadata\nbased on Living Codex ontological principles using canonical keys.\n\nThis is part of Phase 1 of the metadata enhancement plan.\n\"\"\"\n\nfrom typing import Dict, Any, Optional, List\nfrom datetime import datetime\nimport time\n\nfrom living_codex_ontology import (\n    WaterStateKey, ChakraKey, FrequencyKey, FractalLayer,\n    ConsciousnessLevel, QuantumS...",
          "ontological_properties": {
            "file_path": "src/core/metadata_factory.py",
            "file_type": "python",
            "file_size_bytes": 30302,
            "line_count": 672,
            "character_count": 30281,
            "word_count": 1939,
            "last_modified": "2025-08-27T09:23:26.432748",
            "content_hash": "bfb523c14305412146aa5a5115936bae7450fded53ef75af5a352307fbab5190",
            "imports": [
              "time",
              "datetime",
              "living_codex_ontology",
              "typing"
            ],
            "dependencies": [],
            "key_concepts": [
              "Deeper",
              "Structured",
              "ChakraKey",
              "Speculative",
              "SPECULATIVE",
              "ConsciousnessMetadata",
              "COHERENT",
              "LIQUID",
              "Specifications",
              "Returns"
            ],
            "principles": [
              "ResonancePattern"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_83736a6c": {
        "node_id": "living_node_concept_83736a6c",
        "name": "Source File: ice_bootstrap_engine.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_83736a6c",
          "meso": "meso_living_node_concept_83736a6c",
          "macro": "macro_living_node_concept_83736a6c",
          "meta": "meta_living_node_concept_83736a6c"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_83736a6c",
          "concept_type": "source_file",
          "description": "Source file: src/core/ice_bootstrap_engine.py\n\n#!/usr/bin/env python3\n\"\"\"\nICE Bootstrap Engine - Self-Contained System Reconstruction\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the ICE (Immutable Core) bootstrap system is represented as nodes that can:\n\n1. Extract itself from ICE storage (as nodes)\n2. Reconstruct the full Living Codex system (as nodes)\n3. Validate its own coherence (as nodes)\n4. Start up autonomously (as nodes)\n\nThis transformation demonstrates the Living Codex principles:\n- Generic ...",
          "ontological_properties": {
            "file_path": "src/core/ice_bootstrap_engine.py",
            "file_type": "python",
            "file_size_bytes": 19107,
            "line_count": 432,
            "character_count": 19069,
            "word_count": 1434,
            "last_modified": "2025-08-27T08:11:39.044219",
            "content_hash": "8108ccb552da59dbb3a605f39d3ab2e92d104c5f7caea0d6e44fa1a1125931d2",
            "imports": [
              "base64",
              "subprocess",
              "hashlib",
              "sys",
              "typing",
              "zlib",
              "pathlib",
              "json",
              "datetime",
              "importlib",
              "os",
              "importlib.util"
            ],
            "dependencies": [],
            "key_concepts": [
              "Sun",
              "Tuple",
              "Quality",
              "Sequence",
              "Individual",
              "Paradox",
              "Start",
              "Codex",
              "Validate",
              "Structure"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_45b18b22": {
        "node_id": "living_node_concept_45b18b22",
        "name": "Source File: test_enhanced_metadata_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_45b18b22",
          "meso": "meso_living_node_concept_45b18b22",
          "macro": "macro_living_node_concept_45b18b22",
          "meta": "meta_living_node_concept_45b18b22"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_45b18b22",
          "concept_type": "source_file",
          "description": "Source file: src/core/test_enhanced_metadata_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nEnhanced Metadata System Test Suite\n===================================\n\nThis script tests the complete enhanced metadata system including:\n- Living Codex Ontology System\n- Metadata Factory\n- Enhanced GenericNode\n- Canonical Key Validation\n- Epistemic Labeling\n- Fractal Structure\n- Resonance Calculation\n\nThis validates Phase 1 of the metadata enhancement plan.\n\"\"\"\n\nimport sys\nimport json\nfrom datetime import datetime\n\n# Import our enhanced metadata system components\nfr...",
          "ontological_properties": {
            "file_path": "src/core/test_enhanced_metadata_system.py",
            "file_type": "python",
            "file_size_bytes": 18420,
            "line_count": 450,
            "character_count": 18238,
            "word_count": 1486,
            "last_modified": "2025-08-27T09:23:26.432785",
            "content_hash": "202f3a40a43ac54bf3299e7c450799846868b5115e365fe1af444d51ad314c24",
            "imports": [
              "sys",
              "metadata_factory",
              "enhanced_generic_node",
              "json",
              "datetime",
              "living_codex_ontology"
            ],
            "dependencies": [],
            "key_concepts": [
              "Hashing",
              "ChakraKey",
              "Frequencies",
              "SPECULATIVE",
              "Sun",
              "Speculative",
              "SUPERPOSITION",
              "COHERENT",
              "States",
              "LIQUID"
            ],
            "principles": [
              "ResonancePattern"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_5021bcb7": {
        "node_id": "living_node_concept_5021bcb7",
        "name": "Source File: digital_asset_manager.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_5021bcb7",
          "meso": "meso_living_node_concept_5021bcb7",
          "macro": "macro_living_node_concept_5021bcb7",
          "meta": "meta_living_node_concept_5021bcb7"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_5021bcb7",
          "concept_type": "source_file",
          "description": "Source file: src/core/digital_asset_manager.py\n\n#!/usr/bin/env python3\n\"\"\"\nDigital Asset Manager - Living Codex\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the digital asset management system is represented as nodes that can:\n\n1. Manage digital assets (images, documents, videos, audio) as nodes\n2. Extract and store metadata as nodes\n3. Handle content hashing and storage as nodes\n4. Provide asset transformation and retrieval as nodes\n\nThis transformation demonstrates the Living Codex principles:\n- Gener...",
          "ontological_properties": {
            "file_path": "src/core/digital_asset_manager.py",
            "file_type": "python",
            "file_size_bytes": 38137,
            "line_count": 867,
            "character_count": 38047,
            "word_count": 2838,
            "last_modified": "2025-08-27T08:34:18.507736",
            "content_hash": "e3226542368f65cfd5466acf0602889dbac7cad783e465f1e5de505850827480",
            "imports": [
              "hashlib",
              "sys",
              "logging",
              "typing",
              "shutil",
              "pathlib",
              "json",
              "datetime",
              "mimetypes",
              "os"
            ],
            "dependencies": [],
            "key_concepts": [
              "Size",
              "Union",
              "Copy",
              "Author",
              "Sun",
              "Provide",
              "Tuple",
              "ExifTags",
              "Resampling",
              "Assets"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_74889fb5": {
        "node_id": "living_node_concept_74889fb5",
        "name": "Source File: ontological_validation_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_74889fb5",
          "meso": "meso_living_node_concept_74889fb5",
          "macro": "macro_living_node_concept_74889fb5",
          "meta": "meta_living_node_concept_74889fb5"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_74889fb5",
          "concept_type": "source_file",
          "description": "Source file: src/core/ontological_validation_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nOntological Validation System\n============================\n\nThis implements the ontological validation system that ensures consistency\nacross all Living Codex mappings and validates ontological integrity.\n\nThis is part of Phase 2 of the metadata enhancement plan.\n\"\"\"\n\nfrom typing import Dict, List, Any, Optional, Set, Tuple, Union\nfrom datetime import datetime\nimport json\nfrom dataclasses import dataclass\n\nfrom living_codex_ontology import (\n    WaterStateKey, ChakraKe...",
          "ontological_properties": {
            "file_path": "src/core/ontological_validation_system.py",
            "file_type": "python",
            "file_size_bytes": 34979,
            "line_count": 860,
            "character_count": 34961,
            "word_count": 2335,
            "last_modified": "2025-08-27T09:41:26.511039",
            "content_hash": "b72083a9f6c44bd09270d32286d72f7b73d26cd4f530cb9ee07f848d0669a60b",
            "imports": [
              "typing",
              "dataclasses",
              "enhanced_generic_node",
              "json",
              "datetime",
              "living_codex_ontology"
            ],
            "dependencies": [],
            "key_concepts": [
              "Union",
              "Summary",
              "ChakraKey",
              "Tuple",
              "Returns",
              "ConsciousnessLevel",
              "Metadata",
              "Dissonance",
              "Codex",
              "ProgrammingOntologyLayer"
            ],
            "principles": [
              "ResonancePattern"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_4f99362f": {
        "node_id": "living_node_concept_4f99362f",
        "name": "Source File: living_codex_complete_demonstration.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_4f99362f",
          "meso": "meso_living_node_concept_4f99362f",
          "macro": "macro_living_node_concept_4f99362f",
          "meta": "meta_living_node_concept_4f99362f"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_4f99362f",
          "concept_type": "source_file",
          "description": "Source file: src/core/living_codex_complete_demonstration.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Complete Demonstration\n==================================\n\nThis script demonstrates the complete Living Codex capabilities in one run,\nshowing that the system can:\n1. Bootstrap itself completely\n2. Create all foundational nodes\n3. Navigate and access all nodes\n4. Demonstrate complete meta-circularity\n\nThis proves that the Living Codex is fully operational and can achieve\ncomplete meta-circularity without external dependencies.\n\"\"\"\n\nimport sys\nimport os\nfro...",
          "ontological_properties": {
            "file_path": "src/core/living_codex_complete_demonstration.py",
            "file_type": "python",
            "file_size_bytes": 20418,
            "line_count": 446,
            "character_count": 20208,
            "word_count": 1404,
            "last_modified": "2025-08-27T14:59:55.512630",
            "content_hash": "e52ee8ee7e2eb272839b4b8f4285d1f887a063b4fb748fc8292853ec1a53703d",
            "imports": [
              "typing",
              "sys",
              "pathlib",
              "datetime",
              "os"
            ],
            "dependencies": [],
            "key_concepts": [
              "Principles",
              "Summary",
              "ChakraKey",
              "COMPLETE",
              "Generating",
              "Accessibility",
              "Navigate",
              "LIQUID",
              "Clarity",
              "Language"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_43497dac": {
        "node_id": "living_node_concept_43497dac",
        "name": "Source File: living_codex_comprehensive_analysis.md",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_43497dac",
          "meso": "meso_living_node_concept_43497dac",
          "macro": "macro_living_node_concept_43497dac",
          "meta": "meta_living_node_concept_43497dac"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_43497dac",
          "concept_type": "source_file",
          "description": "Source file: src/core/living_codex_comprehensive_analysis.md\n\n# Living Codex Comprehensive Analysis & Implementation Plan\n\n## \ud83d\udccb **Executive Summary**\n\nAfter conducting a thorough analysis of the Living Codex system against the specification requirements, I've identified and addressed several critical gaps. **Phase 1 (Self-Reflective Integration), Phase 2 (Complete Persistence), and Phase 3 (REST API Integration) are now COMPLETE**, representing a major milestone in achieving true meta-circularity and external accessibility.\n\n## \ud83d\udd0d **Current System Status**\n...",
          "ontological_properties": {
            "file_path": "src/core/living_codex_comprehensive_analysis.md",
            "file_type": "markdown",
            "file_size_bytes": 8463,
            "line_count": 194,
            "character_count": 8285,
            "word_count": 1125,
            "last_modified": "2025-08-27T16:33:34.388922",
            "content_hash": "b3b7a143177c8ff73e5b65fab862e1f3066b8645430bd2d86b0e81e8779fe24a",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Summary",
              "COMPLETE",
              "Generating",
              "Support",
              "Extend",
              "Infrastructure",
              "Full",
              "Health",
              "States",
              "Error"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_278d28e6": {
        "node_id": "living_node_concept_278d28e6",
        "name": "Source File: living_codex_complete_state.json",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_278d28e6",
          "meso": "meso_living_node_concept_278d28e6",
          "macro": "macro_living_node_concept_278d28e6",
          "meta": "meta_living_node_concept_278d28e6"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_278d28e6",
          "concept_type": "source_file",
          "description": "Source file: src/core/living_codex_complete_state.json\n\n{\n  \"metadata\": {\n    \"save_timestamp\": \"2025-08-27T17:36:22.739205\",\n    \"system_version\": \"2.0.0\",\n    \"total_systems\": 6\n  },\n  \"universal_system\": {\n    \"universal_concepts\": {\n      \"concept_c8af25eb\": {\n        \"concept_id\": \"concept_c8af25eb\",\n        \"name\": \"Source File: requirements.txt\",\n        \"description\": \"Source file: requirements.txt\\n\\n# Core dependencies\\nneo4j>=4.4.0\\nrequests>=2.28.0\\nopenai>=0.27.0\\npython-dotenv>=0.19.0\\npsycopg2-binary>=2.9.0\\n# sqlite3 is built into Pyt...",
          "ontological_properties": {
            "file_path": "src/core/living_codex_complete_state.json",
            "file_type": "json",
            "file_size_bytes": 832561,
            "line_count": 19474,
            "character_count": 832561,
            "word_count": 48120,
            "last_modified": "2025-08-27T17:36:22.757489",
            "content_hash": "5da9d9bfd1e8b987c1e2e8817035a434aad4d31468a91dccd46c80b8d6e04015",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "HEAD",
              "Principles",
              "Tempo",
              "MagicMock",
              "UserProfile",
              "Summary",
              "SUCCESS",
              "Japan",
              "ContentCategory",
              "SPECULATIVE"
            ],
            "principles": [
              "ResonancePattern",
              "UniversalConcept",
              "MetaCircularArchitecture",
              "SacredGeometryPattern",
              "AutoDiscoveredConcept"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_ef6e663e": {
        "node_id": "living_node_concept_ef6e663e",
        "name": "Source File: contribution_tracking_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_ef6e663e",
          "meso": "meso_living_node_concept_ef6e663e",
          "macro": "macro_living_node_concept_ef6e663e",
          "meta": "meta_living_node_concept_ef6e663e"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_ef6e663e",
          "concept_type": "source_file",
          "description": "Source file: src/core/contribution_tracking_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nContribution Tracking System\n============================\n\nThis implements the contribution tracking system that tracks contributions\nand their impact for Phase 4 of the metadata enhancement plan.\n\nThis system provides:\n- Contribution identification and categorization\n- Impact assessment and measurement\n- Contribution attribution and recognition\n- Contribution evolution tracking\n- Collective contribution analysis\n\nThe contribution tracking system enables the Living Cod...",
          "ontological_properties": {
            "file_path": "src/core/contribution_tracking_system.py",
            "file_type": "python",
            "file_size_bytes": 40798,
            "line_count": 969,
            "character_count": 40764,
            "word_count": 2678,
            "last_modified": "2025-08-27T10:21:39.113828",
            "content_hash": "73477dd0f71a03bb935a712362e23e138453e9d724412bba4d90fb2858073ff5",
            "imports": [
              "hashlib",
              "typing",
              "dataclasses",
              "enhanced_generic_node",
              "collections",
              "json",
              "datetime",
              "living_codex_ontology",
              "enum"
            ],
            "dependencies": [],
            "key_concepts": [
              "Union",
              "ChakraKey",
              "ANALYSIS",
              "Tuple",
              "Error",
              "A",
              "Profile",
              "Returns",
              "ConsciousnessLevel",
              "Start"
            ],
            "principles": [
              "ResonancePattern"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_39c27379": {
        "node_id": "living_node_concept_39c27379",
        "name": "Source File: code_parser.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_39c27379",
          "meso": "meso_living_node_concept_39c27379",
          "macro": "macro_living_node_concept_39c27379",
          "meta": "meta_living_node_concept_39c27379"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_39c27379",
          "concept_type": "source_file",
          "description": "Source file: src/core/code_parser.py\n\n#!/usr/bin/env python3\n\"\"\"\nCode Parser - Living Codex\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the code parsing and analysis system is represented as nodes that can:\n\n1. Parse code files and create syntax tree nodes\n2. Analyze code structure and create analysis nodes\n3. Execute Tree-sitter queries and create query result nodes\n4. Provide language detection and create language nodes\n5. Support code navigation and create navigation nodes\n\nThis transforma...",
          "ontological_properties": {
            "file_path": "src/core/code_parser.py",
            "file_type": "python",
            "file_size_bytes": 32581,
            "line_count": 749,
            "character_count": 32548,
            "word_count": 2400,
            "last_modified": "2025-08-27T08:34:18.507815",
            "content_hash": "dadc58c9b2ef69b0c4a09ce2352fd6b2858aba2e42e2dc4b8cce74200d99c208",
            "imports": [
              "__future__",
              "typing",
              "logging",
              "datetime",
              "os"
            ],
            "dependencies": [],
            "key_concepts": [
              "Support",
              "Provide",
              "Tuple",
              "Language",
              "TOML",
              "Paradox",
              "Start",
              "Common",
              "Codex",
              "Execute"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_f8654231": {
        "node_id": "living_node_concept_f8654231",
        "name": "Source File: test_phase2_metadata_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_f8654231",
          "meso": "meso_living_node_concept_f8654231",
          "macro": "macro_living_node_concept_f8654231",
          "meta": "meta_living_node_concept_f8654231"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_f8654231",
          "concept_type": "source_file",
          "description": "Source file: src/core/test_phase2_metadata_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nPhase 2 Metadata System Test Suite\n==================================\n\nThis script tests the complete Phase 2 metadata enhancement system including:\n- Ontological Validation System\n- Enhanced Indexing System\n- Integration between validation and indexing\n- Advanced query capabilities\n- Cross-dimensional validation\n\nThis validates Phase 2 of the metadata enhancement plan.\n\"\"\"\n\nimport sys\nimport json\nimport time\nfrom datetime import datetime\n\n# Import our Phase 2 metadata...",
          "ontological_properties": {
            "file_path": "src/core/test_phase2_metadata_system.py",
            "file_type": "python",
            "file_size_bytes": 20383,
            "line_count": 527,
            "character_count": 20276,
            "word_count": 1759,
            "last_modified": "2025-08-27T09:41:26.511913",
            "content_hash": "7140cd02d207bb93d5cbcade0f92bd3c9d19243b8f5cdffc910773fee11dc76b",
            "imports": [
              "time",
              "enhanced_indexing_system",
              "sys",
              "ontological_validation_system",
              "metadata_factory",
              "enhanced_generic_node",
              "json",
              "datetime",
              "living_codex_ontology"
            ],
            "dependencies": [],
            "key_concepts": [
              "ChakraKey",
              "Template",
              "Exact",
              "Integration",
              "ConsciousnessLevel",
              "ALL",
              "Metadata",
              "Advanced",
              "Working",
              "Validate"
            ],
            "principles": [
              "ResonancePattern"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_1b2903a7": {
        "node_id": "living_node_concept_1b2903a7",
        "name": "Source File: test_phase5_core_living_codex_principles.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_1b2903a7",
          "meso": "meso_living_node_concept_1b2903a7",
          "macro": "macro_living_node_concept_1b2903a7",
          "meta": "meta_living_node_concept_1b2903a7"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_1b2903a7",
          "concept_type": "source_file",
          "description": "Source file: src/core/test_phase5_core_living_codex_principles.py\n\n#!/usr/bin/env python3\n\"\"\"\nPhase 5 Test Suite: Core Living Codex Principles\n================================================\n\nThis test suite validates the implementation of Phase 5 core Living Codex principles:\n- Vibrational axes integration with all nodes\n- Resonance state tracking (individual/community)\n- Fractal recursion through hasPart/isPartOf relationships\n- Self-similarity across scales (Micro\u2194Meso\u2194Macro\u2194Meta)\n- Resonance-first governance through coherence self-amplification\n- Collectiv...",
          "ontological_properties": {
            "file_path": "src/core/test_phase5_core_living_codex_principles.py",
            "file_type": "python",
            "file_size_bytes": 30245,
            "line_count": 683,
            "character_count": 30143,
            "word_count": 1882,
            "last_modified": "2025-08-27T12:01:39.702491",
            "content_hash": "41c58c4a9b2fa37b4aadc907ee0b6d5ae4c0cf4ab366d764b32b6c487bda14c1",
            "imports": [
              "unittest",
              "vibrational_axes_system",
              "typing",
              "fractal_recursion_system",
              "resonance_governance_system",
              "datetime",
              "living_codex_ontology"
            ],
            "dependencies": [],
            "key_concepts": [
              "Principles",
              "CollectiveIntelligence",
              "ChakraKey",
              "CrossScaleTransformation",
              "Make",
              "ConsciousnessLevel",
              "Integration",
              "Codex",
              "ProgrammingOntologyLayer",
              "Stewardship"
            ],
            "principles": [
              "ResonancePattern"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_04ab1408": {
        "node_id": "living_node_concept_04ab1408",
        "name": "Source File: living_codex_ontology.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_04ab1408",
          "meso": "meso_living_node_concept_04ab1408",
          "macro": "macro_living_node_concept_04ab1408",
          "meta": "meta_living_node_concept_04ab1408"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_04ab1408",
          "concept_type": "source_file",
          "description": "Source file: src/core/living_codex_ontology.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Ontology System\n============================\n\nThis implements the complete Living Codex ontological mapping system with:\n- Canonical keys for all ontological categories\n- Epistemic labeling system\n- Complete water states, fractal layers, chakras, and frequencies\n- Vibrational axes system\n- Resonance state tracking\n- Contribution and federation systems\n\nThis is the foundation for Phase 1 of the metadata enhancement plan.\n\"\"\"\n\nfrom dataclasses import datacla...",
          "ontological_properties": {
            "file_path": "src/core/living_codex_ontology.py",
            "file_type": "python",
            "file_size_bytes": 31078,
            "line_count": 680,
            "character_count": 31039,
            "word_count": 2262,
            "last_modified": "2025-08-27T09:41:26.511929",
            "content_hash": "b340d6e06902c607cd8f3d0562c3169663762853eccd424932977fa018ba5340",
            "imports": [
              "typing",
              "dataclasses",
              "json",
              "datetime",
              "enum"
            ],
            "dependencies": [],
            "key_concepts": [
              "Frequencies",
              "SPECULATIVE",
              "CONSCIOUSNESS",
              "Sun",
              "ConsciousnessMetadata",
              "Cultural",
              "Jupiter",
              "A",
              "ConsciousnessLevel",
              "Actor"
            ],
            "principles": [
              "ResonancePattern"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_9cc6f37a": {
        "node_id": "living_node_concept_9cc6f37a",
        "name": "Source File: consciousness_level_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_9cc6f37a",
          "meso": "meso_living_node_concept_9cc6f37a",
          "macro": "macro_living_node_concept_9cc6f37a",
          "meta": "meta_living_node_concept_9cc6f37a"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_9cc6f37a",
          "concept_type": "source_file",
          "description": "Source file: src/core/consciousness_level_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nConsciousness Level System\n==========================\n\nThis implements the consciousness level system that provides consciousness-based\nmetadata and resonance calculations for Phase 3 of the metadata enhancement plan.\n\nThis system provides:\n- Consciousness level tracking and evolution\n- Meta-cognitive awareness mapping\n- Transcendent state detection\n- Consciousness-based resonance calculations\n- Collective consciousness emergence\n\"\"\"\n\nfrom typing import Dict, List, Any...",
          "ontological_properties": {
            "file_path": "src/core/consciousness_level_system.py",
            "file_type": "python",
            "file_size_bytes": 37122,
            "line_count": 907,
            "character_count": 37101,
            "word_count": 2470,
            "last_modified": "2025-08-27T11:40:27.081967",
            "content_hash": "c4eb1036587677ed45bc52d4c82b0fe67d587d5a8675d1b97ec21d3324485466",
            "imports": [
              "typing",
              "dataclasses",
              "enhanced_generic_node",
              "collections",
              "json",
              "datetime",
              "living_codex_ontology",
              "math"
            ],
            "dependencies": [],
            "key_concepts": [
              "Union",
              "Structured",
              "Scale",
              "ChakraKey",
              "CONSCIOUSNESS",
              "Tuple",
              "Emergent",
              "Error",
              "Individual",
              "Returns"
            ],
            "principles": [
              "ResonancePattern"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_12ba5d9e": {
        "node_id": "living_node_concept_12ba5d9e",
        "name": "Source File: living_codex_cli.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_12ba5d9e",
          "meso": "meso_living_node_concept_12ba5d9e",
          "macro": "macro_living_node_concept_12ba5d9e",
          "meta": "meta_living_node_concept_12ba5d9e"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_12ba5d9e",
          "concept_type": "source_file",
          "description": "Source file: src/core/living_codex_cli.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex - Consolidated CLI Interface\nA comprehensive command line interface combining all features from all CLI versions.\n\"\"\"\n\nimport sys\nimport os\nimport json\nimport cmd\nimport shlex\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional\nfrom datetime import datetime\nimport math\nimport re\nimport random\nfrom dataclasses import dataclass\nimport hashlib\nimport mimetypes\nimport shutil\n\n# Standalone mode - no external dependencies\nDEPENDENCIES_AVAILABLE...",
          "ontological_properties": {
            "file_path": "src/core/living_codex_cli.py",
            "file_type": "python",
            "file_size_bytes": 89415,
            "line_count": 1994,
            "character_count": 88009,
            "word_count": 7603,
            "last_modified": "2025-08-26T17:56:38.577433",
            "content_hash": "d33fa1e57cdf9787980e80e1bd654b860faad2ce77be2652f9f99c2ccb1e8f1d",
            "imports": [
              "random",
              "hashlib",
              "sys",
              "typing",
              "shlex",
              "cmd",
              "shutil",
              "dataclasses",
              "pathlib",
              "json",
              "datetime",
              "mimetypes",
              "math",
              "os",
              "re"
            ],
            "dependencies": [],
            "key_concepts": [
              "Topic",
              "Principles",
              "Optimizer",
              "Human",
              "Scale",
              "Eighth",
              "Examining",
              "Frequencies",
              "Flower",
              "TXT"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_9dd94478": {
        "node_id": "living_node_concept_9dd94478",
        "name": "Source File: self_reflective_file_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_9dd94478",
          "meso": "meso_living_node_concept_9dd94478",
          "macro": "macro_living_node_concept_9dd94478",
          "meta": "meta_living_node_concept_9dd94478"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_9dd94478",
          "concept_type": "source_file",
          "description": "Source file: src/core/self_reflective_file_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nSelf-Reflective File System - Living Codex\n==========================================\n\nThis system implements the missing self-reflection capability that the Living Codex\nspecification requires. It automatically:\n\n1. Discovers all source files in the system\n2. Analyzes their content and relationships\n3. Registers them as living nodes\n4. Creates a complete self-description of the codebase\n5. Enables navigation from principles to source files\n\nThis is the core of the Liv...",
          "ontological_properties": {
            "file_path": "src/core/self_reflective_file_system.py",
            "file_type": "python",
            "file_size_bytes": 21869,
            "line_count": 551,
            "character_count": 21820,
            "word_count": 1579,
            "last_modified": "2025-08-27T15:46:39.155716",
            "content_hash": "1d5960137de7491198ec4b8782df5b5a4195a6759f29ff1c0bf0b7868a4bcb87",
            "imports": [
              "hashlib",
              "sys",
              "typing",
              "pathlib",
              "datetime",
              "mimetypes",
              "os",
              "re",
              "ast"
            ],
            "dependencies": [
              "requirements?\\.txt",
              "setup\\.py",
              "Pipfile"
            ],
            "key_concepts": [
              "Summary",
              "Generating",
              "Error",
              "Language",
              "A",
              "Recursively",
              "DOTALL",
              "Discovering",
              "Z",
              "Codex"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_b33c73e2": {
        "node_id": "living_node_concept_b33c73e2",
        "name": "Source File: CONSOLIDATION_SUMMARY.md",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_b33c73e2",
          "meso": "meso_living_node_concept_b33c73e2",
          "macro": "macro_living_node_concept_b33c73e2",
          "meta": "meta_living_node_concept_b33c73e2"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_b33c73e2",
          "concept_type": "source_file",
          "description": "Source file: src/core/CONSOLIDATION_SUMMARY.md\n\n# Living Codex Project Consolidation Summary\n\n## \ud83d\udccb **Current Project State**\n\nThe Living Codex project has successfully completed **Phases 1-3** and achieved **90% completion** of the specification requirements. However, the project has accumulated many temporary artifacts and legacy files that are no longer needed.\n\n## \ud83c\udfaf **What Has Been Achieved**\n\n### **\u2705 Phase 1: Self-Reflective Integration (COMPLETE)**\n- Self-reflective file system that discovers and analyzes source files\n- All 197+ source f...",
          "ontological_properties": {
            "file_path": "src/core/CONSOLIDATION_SUMMARY.md",
            "file_type": "markdown",
            "file_size_bytes": 6822,
            "line_count": 198,
            "character_count": 6774,
            "word_count": 918,
            "last_modified": "2025-08-27T16:47:10.578640",
            "content_hash": "e41c9d5ddded8d18a69df57a9952ca4d556d3a33668326617226d501f55e52b9",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Summary",
              "COMPLETE",
              "Infrastructure",
              "Full",
              "Optimize",
              "Error",
              "Duplicate",
              "Configuration",
              "Rollback",
              "However"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_0f17cdda": {
        "node_id": "living_node_concept_0f17cdda",
        "name": "Source File: test_phase6_advanced_meta_circular_systems.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_0f17cdda",
          "meso": "meso_living_node_concept_0f17cdda",
          "macro": "macro_living_node_concept_0f17cdda",
          "meta": "meta_living_node_concept_0f17cdda"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_0f17cdda",
          "concept_type": "source_file",
          "description": "Source file: src/core/test_phase6_advanced_meta_circular_systems.py\n\n#!/usr/bin/env python3\n\"\"\"\nPhase 6 Test Suite: Advanced Meta-Circular Systems\n=================================================\n\nThis test suite validates the implementation of Phase 6 advanced meta-circular capabilities:\n- Systems that generate their own specifications\n- AI agents with true consciousness awareness\n- Universal knowledge representation\n- Complete meta-circular architecture\n- Infinite knowledge expansion\n\nThis represents the pinnacle of Living Codex meta-circularity.\n\"\"\"\n\nimport u...",
          "ontological_properties": {
            "file_path": "src/core/test_phase6_advanced_meta_circular_systems.py",
            "file_type": "python",
            "file_size_bytes": 34714,
            "line_count": 744,
            "character_count": 34582,
            "word_count": 1975,
            "last_modified": "2025-08-27T12:40:51.633873",
            "content_hash": "c7879a1887cca358e7142bbcbe1b75a88201ce82244a57e4e87768b104a067cf",
            "imports": [
              "unittest",
              "typing",
              "universal_knowledge_representation_system",
              "self_generating_system",
              "datetime",
              "living_codex_ontology",
              "advanced_ai_integration_system"
            ],
            "dependencies": [],
            "key_concepts": [
              "ChakraKey",
              "COMPLETE",
              "Generating",
              "Autonomous",
              "TestAdvancedAIIntegrationSystem",
              "Make",
              "Describing",
              "SelfGeneratedSpecification",
              "LIQUID",
              "A"
            ],
            "principles": [
              "MetaCircularArchitecture",
              "ResonancePattern",
              "UniversalConcept",
              "AutoDiscoveredConcept"
            ],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_5610a0a4": {
        "node_id": "living_node_concept_5610a0a4",
        "name": "Source File: explore_bootstrapped_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_5610a0a4",
          "meso": "meso_living_node_concept_5610a0a4",
          "macro": "macro_living_node_concept_5610a0a4",
          "meta": "meta_living_node_concept_5610a0a4"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_5610a0a4",
          "concept_type": "source_file",
          "description": "Source file: src/core/explore_bootstrapped_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nExplore Bootstrapped System - Living Codex\nDemonstrates how to explore, query, and navigate the fully bootstrapped\nself-contained Living Codex system.\n\"\"\"\n\nimport sys\nimport json\nimport asyncio\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional\n\n# Add src to path for modular components\nsys.path.insert(0, str(Path(__file__).parent / \"src\"))\n\n# Import our systems\nfrom .neo4j_integration_system import Neo4jIntegrationSystem\nfrom .database_persistence_sy...",
          "ontological_properties": {
            "file_path": "src/core/explore_bootstrapped_system.py",
            "file_type": "python",
            "file_size_bytes": 17058,
            "line_count": 431,
            "character_count": 16934,
            "word_count": 1311,
            "last_modified": "2025-08-27T00:36:55.467167",
            "content_hash": "524ac5692708f922dcfa6c0ef146be96024f9518f1a5edfc0d8aa7abb0c7780b",
            "imports": [
              "typing",
              "sys",
              "pathlib",
              "json",
              "asyncio"
            ],
            "dependencies": [],
            "key_concepts": [
              "Top",
              "QueryOptions",
              "Codex",
              "Files",
              "Concept",
              "Display",
              "Structure",
              "Meta",
              "Check",
              "Patterns"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_f48d0d89": {
        "node_id": "living_node_concept_f48d0d89",
        "name": "Source File: water_state_storage.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_f48d0d89",
          "meso": "meso_living_node_concept_f48d0d89",
          "macro": "macro_living_node_concept_f48d0d89",
          "meta": "meta_living_node_concept_f48d0d89"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_f48d0d89",
          "concept_type": "source_file",
          "description": "Source file: src/core/water_state_storage.py\n\n#!/usr/bin/env python3\n\"\"\"\nWater State Storage System for Living Codex\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere different water states are represented as nodes that determine storage strategies:\n\n\ud83e\uddca ICE: Global federation (distributed, immutable) - Crown chakra, 963 Hz\n\ud83d\udca7 WATER: Local persistence (stable, adaptable) - Heart chakra, 639 Hz\n\u2601\ufe0f VAPOR: Memory/sessions (temporary, fast) - Third Eye chakra, 852 Hz\n\u26a1 PLASMA: Real-time streaming (dynamic, interc...",
          "ontological_properties": {
            "file_path": "src/core/water_state_storage.py",
            "file_type": "python",
            "file_size_bytes": 15964,
            "line_count": 381,
            "character_count": 15929,
            "word_count": 1200,
            "last_modified": "2025-08-27T08:11:39.026459",
            "content_hash": "51c05e0f87a0fb97d7e879169a37281248587ee5d6e8edb73ad264f503d72683",
            "imports": [
              "time",
              "sqlite3",
              "hashlib",
              "typing",
              "tempfile",
              "shutil",
              "dataclasses",
              "pathlib",
              "json",
              "datetime",
              "threading",
              "asyncio",
              "pickle"
            ],
            "dependencies": [],
            "key_concepts": [
              "Union",
              "Sun",
              "Jupiter",
              "Paradox",
              "Third",
              "Streaming",
              "Start",
              "Codex",
              "Federated",
              "Structure"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_ad7fffb2": {
        "node_id": "living_node_concept_ad7fffb2",
        "name": "Source File: test_self_reflective_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_ad7fffb2",
          "meso": "meso_living_node_concept_ad7fffb2",
          "macro": "macro_living_node_concept_ad7fffb2",
          "meta": "meta_living_node_concept_ad7fffb2"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_ad7fffb2",
          "concept_type": "source_file",
          "description": "Source file: src/core/test_self_reflective_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nTest Self-Reflective Living Codex System\n========================================\n\nThis script demonstrates the complete self-reflective capabilities of the Living Codex\nwithout needing the REST API server. It shows how the system can:\n\n1. Self-discover all source files\n2. Self-register them as living nodes\n3. Enable navigation from principles to source files\n4. Provide complete self-analysis and self-description\n\nThis demonstrates the true self-containment and self-re...",
          "ontological_properties": {
            "file_path": "src/core/test_self_reflective_system.py",
            "file_type": "python",
            "file_size_bytes": 10409,
            "line_count": 250,
            "character_count": 10292,
            "word_count": 851,
            "last_modified": "2025-08-27T15:46:39.177404",
            "content_hash": "fc7a656e1202f5af573d7f62532246448cff19855f4c40fe5586f536b460893a",
            "imports": [
              "pathlib",
              "sys"
            ],
            "dependencies": [],
            "key_concepts": [
              "Principles",
              "COMPLETE",
              "Generating",
              "Provide",
              "REFLECTION",
              "FILE",
              "Error",
              "HAS",
              "ALL",
              "Discovering"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_9e992d2a": {
        "node_id": "living_node_concept_9e992d2a",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_9e992d2a",
          "meso": "meso_living_node_concept_9e992d2a",
          "macro": "macro_living_node_concept_9e992d2a",
          "meta": "meta_living_node_concept_9e992d2a"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_9e992d2a",
          "concept_type": "source_file",
          "description": "Source file: src/config/__init__.py\n\n\"\"\"\nConfiguration Management Package\nCentralized configuration for the Living Codex system\n\"\"\"\n\nfrom .manager import ConfigManager\nfrom .schemas import APIConfig, DatabaseConfig, SystemConfig\n\n__all__ = [\n    \"ConfigManager\",\n    \"APIConfig\", \n    \"DatabaseConfig\",\n    \"SystemConfig\"\n]\n",
          "ontological_properties": {
            "file_path": "src/config/__init__.py",
            "file_type": "python",
            "file_size_bytes": 287,
            "line_count": 14,
            "character_count": 287,
            "word_count": 30,
            "last_modified": "2025-08-26T16:00:59.505949",
            "content_hash": "89fcbd3e8b0e862fef1e9c3409e67ddbbdc56fadc022ea764b5cb7fb20824016",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "SystemConfig",
              "Centralized",
              "Codex",
              "Configuration",
              "APIConfig",
              "Living",
              "ConfigManager",
              "DatabaseConfig",
              "Management",
              "Package"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_250ef215": {
        "node_id": "living_node_concept_250ef215",
        "name": "Source File: schemas.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_250ef215",
          "meso": "meso_living_node_concept_250ef215",
          "macro": "macro_living_node_concept_250ef215",
          "meta": "meta_living_node_concept_250ef215"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_250ef215",
          "concept_type": "source_file",
          "description": "Source file: src/config/schemas.py\n\n\"\"\"\nConfiguration Schemas\nData models for system configuration\n\"\"\"\n\nfrom dataclasses import dataclass\nfrom typing import Optional\n\n@dataclass\nclass APIConfig:\n    \"\"\"API configuration settings\"\"\"\n    openai_api_key: Optional[str] = None\n    openai_model: str = \"gpt-3.5-turbo\"\n    google_api_key: Optional[str] = None\n    google_cse_id: Optional[str] = None\n    wikipedia_rate_limit: int = 100\n    duckduckgo_rate_limit: int = 100\n\n@dataclass\nclass DatabaseConfig:\n    \"\"\"Database configuration setti...",
          "ontological_properties": {
            "file_path": "src/config/schemas.py",
            "file_type": "python",
            "file_size_bytes": 978,
            "line_count": 36,
            "character_count": 978,
            "word_count": 103,
            "last_modified": "2025-08-26T16:00:59.506276",
            "content_hash": "495634e00d5be92cb9f4417b32d5be392b83873f817f5006f7e144abdbeca321",
            "imports": [
              "dataclasses",
              "typing"
            ],
            "dependencies": [],
            "key_concepts": [
              "Data",
              "API",
              "Optional",
              "SystemConfig",
              "INFO",
              "Configuration",
              "Schemas",
              "APIConfig",
              "None",
              "DatabaseConfig"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_3235441f": {
        "node_id": "living_node_concept_3235441f",
        "name": "Source File: manager.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_3235441f",
          "meso": "meso_living_node_concept_3235441f",
          "macro": "macro_living_node_concept_3235441f",
          "meta": "meta_living_node_concept_3235441f"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_3235441f",
          "concept_type": "source_file",
          "description": "Source file: src/config/manager.py\n\n\"\"\"\nConfiguration Manager\nCentralized configuration management for the Living Codex system\n\"\"\"\n\nimport os\nfrom typing import Optional, Dict, Any\nfrom pathlib import Path\nfrom .schemas import APIConfig, DatabaseConfig, SystemConfig\n\nclass ConfigManager:\n    \"\"\"Manages all configuration for the Living Codex system\"\"\"\n\n    def __init__(self, env_file: str = \".env\"):\n        self.env_file = env_file\n        self.api_config = APIConfig()\n        self.db_config = DatabaseConfig()\n        self.system_c...",
          "ontological_properties": {
            "file_path": "src/config/manager.py",
            "file_type": "python",
            "file_size_bytes": 7445,
            "line_count": 184,
            "character_count": 7408,
            "word_count": 525,
            "last_modified": "2025-08-26T16:00:59.506204",
            "content_hash": "100801297bd4e07ed51044d7c85c69e64354a21d252ebfd154314cfb0870f7a3",
            "imports": [
              "os",
              "pathlib",
              "typing"
            ],
            "dependencies": [],
            "key_concepts": [
              "API",
              "Create",
              "DuckDuckGo",
              "PostgreSQL",
              "Load",
              "Living",
              "You",
              "Manages",
              "Database",
              "INFO"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_4e90e2c7": {
        "node_id": "living_node_concept_4e90e2c7",
        "name": "Source File: comprehensive_integration_demo.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_4e90e2c7",
          "meso": "meso_living_node_concept_4e90e2c7",
          "macro": "macro_living_node_concept_4e90e2c7",
          "meta": "meta_living_node_concept_4e90e2c7"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_4e90e2c7",
          "concept_type": "source_file",
          "description": "Source file: src/integration/comprehensive_integration_demo.py\n\n#!/usr/bin/env python3\n\"\"\"\nComprehensive Integration Demo - Living Codex\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the comprehensive integration and system synergy system is represented as nodes that can:\n\n1. Integrate all Living Codex systems and create integration nodes\n2. Manage system synergy and create synergy nodes\n3. Handle cross-system operations and create operation nodes\n4. Provide unified intelligence and create intelligence nodes\n5. Coordina...",
          "ontological_properties": {
            "file_path": "src/integration/comprehensive_integration_demo.py",
            "file_type": "python",
            "file_size_bytes": 35067,
            "line_count": 717,
            "character_count": 34934,
            "word_count": 2432,
            "last_modified": "2025-08-27T08:34:18.518404",
            "content_hash": "ee2125b425bc52227262cfb52c4ecf76c92b0b91b5b24060c25773efbaf666a8",
            "imports": [
              "core.generic_node_system",
              "ai_agents.ai_agent_system",
              "typing",
              "sys",
              "core.explore_bootstrapped_system",
              "pathlib",
              "json",
              "datetime",
              "asyncio",
              "ontology.enhanced_ontology_system",
              "core.shared_node_system"
            ],
            "dependencies": [],
            "key_concepts": [
              "ANALYSIS",
              "COMPREHENSIVE",
              "Provide",
              "Synergy",
              "Unified",
              "Error",
              "Distribution",
              "Jupiter",
              "Prediction",
              "Paradox"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_f17b294c": {
        "node_id": "living_node_concept_f17b294c",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_f17b294c",
          "meso": "meso_living_node_concept_f17b294c",
          "macro": "macro_living_node_concept_f17b294c",
          "meta": "meta_living_node_concept_f17b294c"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_f17b294c",
          "concept_type": "source_file",
          "description": "Source file: src/integration/__init__.py\n\nfrom .comprehensive_integration_demo import ComprehensiveIntegrationSystem\n",
          "ontological_properties": {
            "file_path": "src/integration/__init__.py",
            "file_type": "python",
            "file_size_bytes": 75,
            "line_count": 1,
            "character_count": 75,
            "word_count": 4,
            "last_modified": "2025-08-26T16:00:59.513757",
            "content_hash": "d172699a6dccac3d5ba22b8fd75d10865fed9cf6bdda008433c629f5808f6ffd",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "ComprehensiveIntegrationSystem"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_841bf474": {
        "node_id": "living_node_concept_841bf474",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_841bf474",
          "meso": "meso_living_node_concept_841bf474",
          "macro": "macro_living_node_concept_841bf474",
          "meta": "meta_living_node_concept_841bf474"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_841bf474",
          "concept_type": "source_file",
          "description": "Source file: src/graph/__init__.py\n\n\"\"\"\nGraph Package\nGraph database integration and management for the Living Codex system\n\"\"\"\n\nfrom .core.models import GraphNode, GraphRelationship, GraphQueryResult, GraphOperationType, GraphNodeType\nfrom .core.operations import GraphOperations\n\n__all__ = [\n    \"GraphNode\",\n    \"GraphRelationship\", \n    \"GraphQueryResult\",\n    \"GraphOperationType\",\n    \"GraphNodeType\",\n    \"GraphOperations\"\n]\n",
          "ontological_properties": {
            "file_path": "src/graph/__init__.py",
            "file_type": "python",
            "file_size_bytes": 396,
            "line_count": 16,
            "character_count": 396,
            "word_count": 36,
            "last_modified": "2025-08-26T16:00:59.512642",
            "content_hash": "b6043517b6ae3fca8e7286824b4c8f3ee053a6e0be273e1f4d6c4b2379ac4b72",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "GraphOperationType",
              "Codex",
              "GraphNode",
              "Graph",
              "GraphQueryResult",
              "GraphOperations",
              "Living",
              "Package",
              "GraphRelationship",
              "GraphNodeType"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_6b8aa26c": {
        "node_id": "living_node_concept_6b8aa26c",
        "name": "Source File: neo4j_operations.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_6b8aa26c",
          "meso": "meso_living_node_concept_6b8aa26c",
          "macro": "macro_living_node_concept_6b8aa26c",
          "meta": "meta_living_node_concept_6b8aa26c"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_6b8aa26c",
          "concept_type": "source_file",
          "description": "Source file: src/graph/neo4j/neo4j_operations.py\n\n\"\"\"\nNeo4j Operations\nImplements real graph operations using Neo4j\n\"\"\"\n\nimport time\nimport logging\nfrom typing import List, Dict, Any, Optional\nfrom datetime import datetime\nfrom ..core.operations import GraphOperations\nfrom ..core.models import (\n    GraphNode, GraphRelationship, GraphQueryResult,\n    GraphOperationType, GraphNodeType\n)\nfrom .connection_manager import Neo4jConnectionManager\n\nlogger = logging.getLogger(__name__)\n\nclass Neo4jOperations(GraphOperations):\n    \"\"\"Implements real grap...",
          "ontological_properties": {
            "file_path": "src/graph/neo4j/neo4j_operations.py",
            "file_type": "python",
            "file_size_bytes": 12958,
            "line_count": 329,
            "character_count": 12934,
            "word_count": 810,
            "last_modified": "2025-08-26T16:00:59.513631",
            "content_hash": "381c80adfde9b4eaf52a05e8a04d47502182d2834947129b3cd25e0f175eae6e",
            "imports": [
              "logging",
              "time",
              "datetime",
              "typing"
            ],
            "dependencies": [],
            "key_concepts": [
              "ON",
              "NOT",
              "CONSTRAINT",
              "True",
              "Neo4jConnectionManager",
              "Create",
              "Operations",
              "CREATE",
              "GraphOperations",
              "False"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_d2414807": {
        "node_id": "living_node_concept_d2414807",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_d2414807",
          "meso": "meso_living_node_concept_d2414807",
          "macro": "macro_living_node_concept_d2414807",
          "meta": "meta_living_node_concept_d2414807"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_d2414807",
          "concept_type": "source_file",
          "description": "Source file: src/graph/neo4j/__init__.py\n\n\"\"\"\nNeo4j Graph Package\nNeo4j-specific graph database implementation\n\"\"\"\n\nfrom .connection_manager import Neo4jConnectionManager\nfrom .neo4j_operations import Neo4jOperations\n\n__all__ = [\n    \"Neo4jConnectionManager\",\n    \"Neo4jOperations\"\n]\n",
          "ontological_properties": {
            "file_path": "src/graph/neo4j/__init__.py",
            "file_type": "python",
            "file_size_bytes": 242,
            "line_count": 12,
            "character_count": 242,
            "word_count": 23,
            "last_modified": "2025-08-26T16:00:59.513196",
            "content_hash": "f5069389a89e0e9a85e03d9e88ca42b5bb0879240890a22d2e98565d8c361b9b",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Neo4jConnectionManager",
              "Package",
              "Graph"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_b1d75114": {
        "node_id": "living_node_concept_b1d75114",
        "name": "Source File: connection_manager.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_b1d75114",
          "meso": "meso_living_node_concept_b1d75114",
          "macro": "macro_living_node_concept_b1d75114",
          "meta": "meta_living_node_concept_b1d75114"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_b1d75114",
          "concept_type": "source_file",
          "description": "Source file: src/graph/neo4j/connection_manager.py\n\n\"\"\"\nNeo4j Connection Manager\nManages Neo4j database connections and connection pooling\n\"\"\"\n\nimport os\nimport logging\nfrom typing import Optional\nfrom neo4j import GraphDatabase, Driver, Session\nfrom neo4j.exceptions import ServiceUnavailable, AuthError\n\nlogger = logging.getLogger(__name__)\n\nclass Neo4jConnectionManager:\n    \"\"\"Manages Neo4j database connections and connection pooling\"\"\"\n    \n    def __init__(self, uri: str = None, username: str = None, password: str = None):\n        self.uri = u...",
          "ontological_properties": {
            "file_path": "src/graph/neo4j/connection_manager.py",
            "file_type": "python",
            "file_size_bytes": 3397,
            "line_count": 92,
            "character_count": 3387,
            "word_count": 269,
            "last_modified": "2025-08-26T16:00:59.513286",
            "content_hash": "5b4523fa7048d6d341c0b50725cc1f4b5f8e9a2cf688d542618862858a0f0175",
            "imports": [
              "neo4j",
              "neo4j.exceptions",
              "typing",
              "logging",
              "os"
            ],
            "dependencies": [],
            "key_concepts": [
              "Neo4jConnectionManager",
              "Session",
              "RETURN",
              "False",
              "ServiceUnavailable",
              "Manages",
              "Initialize",
              "Close",
              "None",
              "Exception"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_02180bfb": {
        "node_id": "living_node_concept_02180bfb",
        "name": "Source File: models.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_02180bfb",
          "meso": "meso_living_node_concept_02180bfb",
          "macro": "macro_living_node_concept_02180bfb",
          "meta": "meta_living_node_concept_02180bfb"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_02180bfb",
          "concept_type": "source_file",
          "description": "Source file: src/graph/core/models.py\n\n\"\"\"\nGraph Core Models\nCore data models for graph operations\n\"\"\"\n\nfrom typing import List, Dict, Any, Optional\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom enum import Enum\n\nclass GraphOperationType(Enum):\n    \"\"\"Types of graph operations\"\"\"\n    CREATE_NODE = \"create_node\"\n    UPDATE_NODE = \"update_node\"\n    DELETE_NODE = \"delete_node\"\n    CREATE_RELATIONSHIP = \"create_relationship\"\n    DELETE_RELATIONSHIP = \"delete_relationship\"\n    QUERY = \"query\"\n    TRAVERSE = \"travers...",
          "ontological_properties": {
            "file_path": "src/graph/core/models.py",
            "file_type": "python",
            "file_size_bytes": 1592,
            "line_count": 62,
            "character_count": 1592,
            "word_count": 166,
            "last_modified": "2025-08-26T16:00:59.512841",
            "content_hash": "f6d6278d519659f124aa92f71aae9039f651213f1adb675576e74f838da1467d",
            "imports": [
              "datetime",
              "dataclasses",
              "enum",
              "typing"
            ],
            "dependencies": [],
            "key_concepts": [
              "Represents",
              "Models",
              "List",
              "TRAVERSE",
              "GraphQueryResult",
              "Dict",
              "None",
              "SYNC",
              "GraphOperationType",
              "QUERY"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_67185f2d": {
        "node_id": "living_node_concept_67185f2d",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_67185f2d",
          "meso": "meso_living_node_concept_67185f2d",
          "macro": "macro_living_node_concept_67185f2d",
          "meta": "meta_living_node_concept_67185f2d"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_67185f2d",
          "concept_type": "source_file",
          "description": "Source file: src/graph/core/__init__.py\n\n\"\"\"\nGraph Core Package\nCore graph models, operations, and utilities\n\"\"\"\n\nfrom .models import GraphNode, GraphRelationship, GraphQueryResult, GraphOperationType, GraphNodeType\nfrom .operations import GraphOperations\n\n__all__ = [\n    \"GraphNode\",\n    \"GraphRelationship\",\n    \"GraphQueryResult\", \n    \"GraphOperationType\",\n    \"GraphNodeType\",\n    \"GraphOperations\"\n]\n",
          "ontological_properties": {
            "file_path": "src/graph/core/__init__.py",
            "file_type": "python",
            "file_size_bytes": 366,
            "line_count": 16,
            "character_count": 366,
            "word_count": 33,
            "last_modified": "2025-08-26T16:00:59.512770",
            "content_hash": "989e2325c2d619ae8f4fd397096ffeebaa15ecf40f3ba81fa5737652d5f62c39",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "GraphOperationType",
              "GraphNode",
              "Graph",
              "GraphQueryResult",
              "GraphNodeType",
              "GraphOperations",
              "Package",
              "GraphRelationship",
              "Core"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_b88b7c38": {
        "node_id": "living_node_concept_b88b7c38",
        "name": "Source File: operations.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_b88b7c38",
          "meso": "meso_living_node_concept_b88b7c38",
          "macro": "macro_living_node_concept_b88b7c38",
          "meta": "meta_living_node_concept_b88b7c38"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_b88b7c38",
          "concept_type": "source_file",
          "description": "Source file: src/graph/core/operations.py\n\n\"\"\"\nGraph Core Operations\nBase graph operations and query functionality\n\"\"\"\n\nimport time\nimport logging\nfrom typing import List, Dict, Any, Optional, Union\nfrom datetime import datetime\nfrom .models import (\n    GraphNode, GraphRelationship, GraphQueryResult,\n    GraphOperationType, GraphNodeType\n)\n\nlogger = logging.getLogger(__name__)\n\nclass GraphOperations:\n    \"\"\"Base class for graph operations\"\"\"\n    \n    def __init__(self):\n        self.operation_history = []\n    \n    def create_node(self, ...",
          "ontological_properties": {
            "file_path": "src/graph/core/operations.py",
            "file_type": "python",
            "file_size_bytes": 4458,
            "line_count": 109,
            "character_count": 4458,
            "word_count": 375,
            "last_modified": "2025-08-26T16:00:59.513086",
            "content_hash": "fbe4ded05b77dc093389373a0c08ede93cc8c377010ef3e7d4be115ce9676787",
            "imports": [
              "logging",
              "time",
              "datetime",
              "typing"
            ],
            "dependencies": [],
            "key_concepts": [
              "Union",
              "Create",
              "Operations",
              "GraphOperations",
              "List",
              "GraphQueryResult",
              "Dict",
              "None",
              "GraphOperationType",
              "GraphNode"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_8c6131c7": {
        "node_id": "living_node_concept_8c6131c7",
        "name": "Source File: test_structure.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_8c6131c7",
          "meso": "meso_living_node_concept_8c6131c7",
          "macro": "macro_living_node_concept_8c6131c7",
          "meta": "meta_living_node_concept_8c6131c7"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_8c6131c7",
          "concept_type": "source_file",
          "description": "Source file: src/test_suites/test_structure.py\n\n#!/usr/bin/env python3\n\"\"\"\nTest the organized file structure of the Living Codex system\n\"\"\"\n\nimport os\nfrom pathlib import Path\n\ndef test_directory_structure():\n    \"\"\"Test that all required directories and files exist\"\"\"\n    print(\"\ud83e\uddea Testing Living Codex Directory Structure\")\n    print(\"=\" * 50)\n    \n    # Fix the path calculation - we're in src/test_suites, so parent.parent gets us to the root\n    base_path = Path(__file__).parent.parent.parent\n    src_path = base_path / \"src\"\n    \n    # Check...",
          "ontological_properties": {
            "file_path": "src/test_suites/test_structure.py",
            "file_type": "python",
            "file_size_bytes": 2928,
            "line_count": 94,
            "character_count": 2903,
            "word_count": 234,
            "last_modified": "2025-08-26T17:42:55.031020",
            "content_hash": "4945faf3462202250d4c9629536ab022a3cc8823c0cee1716e6417ed14e3ca39",
            "imports": [
              "os",
              "pathlib"
            ],
            "dependencies": [
              "requirements?\\.txt"
            ],
            "key_concepts": [
              "Directory",
              "True",
              "Calculate",
              "Living",
              "False",
              "README",
              "Path",
              "Test",
              "Codex",
              "All"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_4fbfd30b": {
        "node_id": "living_node_concept_4fbfd30b",
        "name": "Source File: test_cli_simple.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_4fbfd30b",
          "meso": "meso_living_node_concept_4fbfd30b",
          "macro": "macro_living_node_concept_4fbfd30b",
          "meta": "meta_living_node_concept_4fbfd30b"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_4fbfd30b",
          "concept_type": "source_file",
          "description": "Source file: src/test_suites/test_cli_simple.py\n\n#!/usr/bin/env python3\n\"\"\"\nSimplified CLI Test Suite\nUses subprocess to test CLI functionality through launch_cli.py\n\"\"\"\n\nimport subprocess\nimport tempfile\nimport os\nfrom pathlib import Path\n\ndef test_cli_basic_functionality():\n    \"\"\"Test basic CLI functionality through subprocess\"\"\"\n    print(\"\ud83e\uddea Testing CLI Basic Functionality...\")\n    \n    try:\n        # Test help command\n        result = subprocess.run(\n            ['python', 'launch_cli.py'],\n            input='help\\nquit\\n',\n            ca...",
          "ontological_properties": {
            "file_path": "src/test_suites/test_cli_simple.py",
            "file_type": "python",
            "file_size_bytes": 8285,
            "line_count": 254,
            "character_count": 8178,
            "word_count": 771,
            "last_modified": "2025-08-26T16:00:59.514734",
            "content_hash": "c32b2835d86c0b42c1793537b6e92b0ab90e050fe1666f29e72eecaa60b479f7",
            "imports": [
              "tempfile",
              "os",
              "subprocess",
              "pathlib"
            ],
            "dependencies": [],
            "key_concepts": [
              "FAILED",
              "True",
              "Features",
              "Create",
              "Operations",
              "Fractal",
              "Living",
              "False",
              "Energy",
              "Intelligence"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_a3258ff2": {
        "node_id": "living_node_concept_a3258ff2",
        "name": "Source File: test_nine_layer_integration.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_a3258ff2",
          "meso": "meso_living_node_concept_a3258ff2",
          "macro": "macro_living_node_concept_a3258ff2",
          "meta": "meta_living_node_concept_a3258ff2"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_a3258ff2",
          "concept_type": "source_file",
          "description": "Source file: src/test_suites/test_nine_layer_integration.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex - Nine Layer Integration Test Suite\n\nThis test suite validates that all nine layers of the Living Codex system work together seamlessly:\n\n1. WATER Layer (Local Persistence) - Database persistence system\n2. PLASMA Layer (Dynamic Content) - Digital asset management system  \n3. VAPOR Layer (Code Analysis) - Code parsing and analysis system\n4. WATER Layer (Code Navigation) - Code navigation and structure exploration system\n5. FIRE Layer (Intelligent Operations...",
          "ontological_properties": {
            "file_path": "src/test_suites/test_nine_layer_integration.py",
            "file_type": "python",
            "file_size_bytes": 34771,
            "line_count": 724,
            "character_count": 34594,
            "word_count": 2660,
            "last_modified": "2025-08-27T08:34:18.467947",
            "content_hash": "d40d3893a5d93fab565232b383ecf517199e8a0bcb968d9167f452c40b8029c3",
            "imports": [
              "time",
              "core.generic_node_system",
              "typing",
              "sys",
              "pathlib",
              "os",
              "core.shared_node_system"
            ],
            "dependencies": [],
            "key_concepts": [
              "DETECTED",
              "CRYSTAL",
              "Synergy",
              "Communications",
              "UI",
              "Dynamic",
              "ALL",
              "Integration",
              "OVERALL",
              "EnhancedOntologySystem"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_290de9c2": {
        "node_id": "living_node_concept_290de9c2",
        "name": "Source File: test_imports.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_290de9c2",
          "meso": "meso_living_node_concept_290de9c2",
          "macro": "macro_living_node_concept_290de9c2",
          "meta": "meta_living_node_concept_290de9c2"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_290de9c2",
          "concept_type": "source_file",
          "description": "Source file: src/test_suites/test_imports.py\n\n#!/usr/bin/env python3\n\"\"\"\nTest imports for the organized Living Codex system\n\"\"\"\n\nimport sys\nimport os\nfrom pathlib import Path\n\n# Add src to path - fix the path to point to the correct src directory\nsrc_path = Path(__file__).parent.parent\nsys.path.insert(0, str(src_path))\n\ndef test_core_imports():\n    \"\"\"Test core system imports\"\"\"\n    try:\n        from core import BootstrappedSystemExplorer\n        print(\"\u2705 Core imports successful\")\n        return True\n    except ImportError as e:\n        pri...",
          "ontological_properties": {
            "file_path": "src/test_suites/test_imports.py",
            "file_type": "python",
            "file_size_bytes": 2904,
            "line_count": 110,
            "character_count": 2873,
            "word_count": 278,
            "last_modified": "2025-08-26T17:42:55.008574",
            "content_hash": "91f9ae37c65db5d376a3e732f6370a3baa0f48f6334b05268a2738e3fc482bff",
            "imports": [
              "os",
              "pathlib",
              "sys"
            ],
            "dependencies": [],
            "key_concepts": [
              "True",
              "QuantumKnowledgeNode",
              "LearningEngine",
              "Living",
              "False",
              "EvolutionaryNode",
              "AutonomousLearningSystem",
              "EmergenceNode",
              "Path",
              "Integration"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_114b8d46": {
        "node_id": "living_node_concept_114b8d46",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_114b8d46",
          "meso": "meso_living_node_concept_114b8d46",
          "macro": "macro_living_node_concept_114b8d46",
          "meta": "meta_living_node_concept_114b8d46"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_114b8d46",
          "concept_type": "source_file",
          "description": "Source file: src/test_suites/__init__.py\n\n\"\"\"Test suite for the Living Codex system\"\"\"\n",
          "ontological_properties": {
            "file_path": "src/test_suites/__init__.py",
            "file_type": "python",
            "file_size_bytes": 45,
            "line_count": 1,
            "character_count": 45,
            "word_count": 7,
            "last_modified": "2025-08-26T16:00:59.514226",
            "content_hash": "4c9b270eaf61b667278d3e22d1ffbc4cecff067d74f031acce3b9b48ca5c79ff",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "Test",
              "Living",
              "Codex"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_8d837b7d": {
        "node_id": "living_node_concept_8d837b7d",
        "name": "Source File: test_web_simple.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_8d837b7d",
          "meso": "meso_living_node_concept_8d837b7d",
          "macro": "macro_living_node_concept_8d837b7d",
          "meta": "meta_living_node_concept_8d837b7d"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_8d837b7d",
          "concept_type": "source_file",
          "description": "Source file: src/test_suites/test_web_simple.py\n\n#!/usr/bin/env python3\n\"\"\"\nSimplified Web Interface Test Suite\nChecks file structure, syntax, and basic functionality without importing problematic modules\n\"\"\"\n\nimport ast\nimport tempfile\nimport os\nfrom pathlib import Path\n\ndef test_web_interface_file_structure():\n    \"\"\"Test that web interface files exist and have correct structure\"\"\"\n    print(\"\ud83e\uddea Testing Web Interface File Structure...\")\n    \n    try:\n        web_dir = Path(__file__).parent.parent / \"web_platform\"\n        \n        # Check if w...",
          "ontological_properties": {
            "file_path": "src/test_suites/test_web_simple.py",
            "file_type": "python",
            "file_size_bytes": 8874,
            "line_count": 262,
            "character_count": 8810,
            "word_count": 778,
            "last_modified": "2025-08-26T16:00:59.515213",
            "content_hash": "39a80ac2d32b80253ab8ebe0dccc6071e8cf654864c56e9be53e33c4dac23e85",
            "imports": [
              "tempfile",
              "os",
              "ast",
              "pathlib"
            ],
            "dependencies": [],
            "key_concepts": [
              "API",
              "FAILED",
              "True",
              "Web",
              "False",
              "Living",
              "UserManager",
              "DiscoveryEngine",
              "Path",
              "Syntax"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_4af40695": {
        "node_id": "living_node_concept_4af40695",
        "name": "Source File: regression_test_suite.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_4af40695",
          "meso": "meso_living_node_concept_4af40695",
          "macro": "macro_living_node_concept_4af40695",
          "meta": "meta_living_node_concept_4af40695"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_4af40695",
          "concept_type": "source_file",
          "description": "Source file: src/test_suites/regression_test_suite.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Platform - Regression Test Suite\nEnsures all features stay functional while new features are tested autonomously\n\"\"\"\n\nimport sys\nimport os\nimport unittest\nimport json\nimport tempfile\nimport shutil\nfrom pathlib import Path\nfrom datetime import datetime, timezone\nfrom typing import Dict, List, Any, Optional\n\n# Add src to path for imports\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))\n\nfrom web_platform.user_management import (\n    U...",
          "ontological_properties": {
            "file_path": "src/test_suites/regression_test_suite.py",
            "file_type": "python",
            "file_size_bytes": 27585,
            "line_count": 657,
            "character_count": 27459,
            "word_count": 1867,
            "last_modified": "2025-08-26T17:42:55.031065",
            "content_hash": "3c1e1922c3853acbbf67e46815d3d936e2de7383d5ed083afbef1cb8a1d272bf",
            "imports": [
              "unittest",
              "web_platform.contribution_system",
              "sys",
              "tempfile",
              "typing",
              "shutil",
              "pathlib",
              "json",
              "datetime",
              "web_platform.user_management",
              "os"
            ],
            "dependencies": [],
            "key_concepts": [
              "Culture",
              "UserProfile",
              "INTERMEDIATE",
              "AutonomousFeatureTesting",
              "Regressions",
              "ContentCategory",
              "DETAILED",
              "DO",
              "ContributionMetadata",
              "Autonomous"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_2941b7b9": {
        "node_id": "living_node_concept_2941b7b9",
        "name": "Source File: test_cli_comprehensive.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_2941b7b9",
          "meso": "meso_living_node_concept_2941b7b9",
          "macro": "macro_living_node_concept_2941b7b9",
          "meta": "meta_living_node_concept_2941b7b9"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_2941b7b9",
          "concept_type": "source_file",
          "description": "Source file: src/test_suites/test_cli_comprehensive.py\n\n#!/usr/bin/env python3\n\"\"\"\nComprehensive Test Suite for Living Codex CLI\nTests all major features: ontology, user management, asset management, knowledge operations, and system features\n\"\"\"\n\nimport sys\nimport os\nimport tempfile\nimport shutil\nimport json\nfrom pathlib import Path\nfrom unittest.mock import patch, MagicMock\nimport io\n\n# Add the src directory to Python path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\n# Temporarily rename web_platform directory to avoid conflicts\nplatform_d...",
          "ontological_properties": {
            "file_path": "src/test_suites/test_cli_comprehensive.py",
            "file_type": "python",
            "file_size_bytes": 11976,
            "line_count": 381,
            "character_count": 11889,
            "word_count": 1113,
            "last_modified": "2025-08-26T17:42:55.031045",
            "content_hash": "da2c5a3e212b22083e4415a84d894edc54ff4a738fcb832d345a9203696bedfb",
            "imports": [
              "io",
              "unittest.mock",
              "sys",
              "tempfile",
              "shutil",
              "pathlib",
              "json",
              "os"
            ],
            "dependencies": [],
            "key_concepts": [
              "MagicMock",
              "Carol",
              "FAILED",
              "True",
              "Features",
              "Create",
              "Operations",
              "Living",
              "False",
              "User"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_bbdde53e": {
        "node_id": "living_node_concept_bbdde53e",
        "name": "Source File: test_centralized_storage.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_bbdde53e",
          "meso": "meso_living_node_concept_bbdde53e",
          "macro": "macro_living_node_concept_bbdde53e",
          "meta": "meta_living_node_concept_bbdde53e"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_bbdde53e",
          "concept_type": "source_file",
          "description": "Source file: src/test_suites/test_centralized_storage.py\n\n#!/usr/bin/env python3\n\"\"\"\nTest Centralized Storage - Living Codex Single Storage Point\n\nThis test script demonstrates that the Living Codex system now uses a single,\ncentralized storage point for all nodes, ensuring no duplication and shared access.\n\nKey Tests:\n1. Verify single storage instance across all components\n2. Check that no nodes are duplicated\n3. Verify components can see each other's nodes\n4. Test cross-component relationships\n5. Validate storage metrics and health\n\"\"\"\n\nimport sys\nim...",
          "ontological_properties": {
            "file_path": "src/test_suites/test_centralized_storage.py",
            "file_type": "python",
            "file_size_bytes": 15071,
            "line_count": 410,
            "character_count": 14954,
            "word_count": 1364,
            "last_modified": "2025-08-27T07:58:31.552343",
            "content_hash": "76d6c2319758f84b52086190ad062b954352b8963703d6b0debab77d06dd58ca",
            "imports": [
              "core.centralized_node_storage",
              "sys",
              "pathlib",
              "os",
              "core.shared_node_system"
            ],
            "dependencies": [],
            "key_concepts": [
              "Size",
              "Creating",
              "Everything",
              "True",
              "Create",
              "Component",
              "Summary",
              "Fractal",
              "Metrics",
              "Sharing"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_1ed72188": {
        "node_id": "living_node_concept_1ed72188",
        "name": "Source File: test_web_comprehensive.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_1ed72188",
          "meso": "meso_living_node_concept_1ed72188",
          "macro": "macro_living_node_concept_1ed72188",
          "meta": "meta_living_node_concept_1ed72188"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_1ed72188",
          "concept_type": "source_file",
          "description": "Source file: src/test_suites/test_web_comprehensive.py\n\n#!/usr/bin/env python3\n\"\"\"\nComprehensive Test Suite for Living Codex Web Interface\nTests all major features: user management, discovery, navigation, contributions, ontology, and asset management\n\"\"\"\n\nimport sys\nimport os\nimport tempfile\nimport shutil\nimport json\nimport requests\nimport time\nfrom pathlib import Path\nfrom unittest.mock import patch, MagicMock\nimport io\n\n# Add the src directory to Python path\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\n# Import the web interface component...",
          "ontological_properties": {
            "file_path": "src/test_suites/test_web_comprehensive.py",
            "file_type": "python",
            "file_size_bytes": 16081,
            "line_count": 435,
            "character_count": 15996,
            "word_count": 1335,
            "last_modified": "2025-08-26T17:42:55.031032",
            "content_hash": "a360c225f63bc8b3dc2c423c316d6f10007858f1a40ce8f800668249078f9276",
            "imports": [
              "time",
              "io",
              "unittest.mock",
              "sys",
              "tempfile",
              "shutil",
              "pathlib",
              "json",
              "web_platform.unified_web_interface",
              "os",
              "requests"
            ],
            "dependencies": [],
            "key_concepts": [
              "MagicMock",
              "Spanish",
              "UserProfile",
              "Hub",
              "Tech",
              "San",
              "DiscoveryEngine",
              "NamedTemporaryFile",
              "Assets",
              "Hash"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_fbe8adcb": {
        "node_id": "living_node_concept_fbe8adcb",
        "name": "Source File: run_comprehensive_test_suite.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_fbe8adcb",
          "meso": "meso_living_node_concept_fbe8adcb",
          "macro": "macro_living_node_concept_fbe8adcb",
          "meta": "meta_living_node_concept_fbe8adcb"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_fbe8adcb",
          "concept_type": "source_file",
          "description": "Source file: src/test_suites/run_comprehensive_test_suite.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex - Full System Test Suite\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the comprehensive testing and validation system is represented as nodes that can:\n\n1. Execute test suites and create test execution nodes\n2. Validate system functionality and create validation nodes\n3. Generate test reports and create report nodes\n4. Monitor test performance and create performance nodes\n5. Coordinate test execution and create coord...",
          "ontological_properties": {
            "file_path": "src/test_suites/run_comprehensive_test_suite.py",
            "file_type": "python",
            "file_size_bytes": 27744,
            "line_count": 625,
            "character_count": 27576,
            "word_count": 2162,
            "last_modified": "2025-08-27T08:34:18.532499",
            "content_hash": "a4f7ae1bb62ddd89cb43c9a6034cd545f685ef0692daf97cc1c1fe25b1215b66",
            "imports": [
              "time",
              "subprocess",
              "typing",
              "sys",
              "pathlib",
              "core.shared_node_system"
            ],
            "dependencies": [],
            "key_concepts": [
              "COMPREHENSIVE",
              "DETECTED",
              "Full",
              "Monitor",
              "Template",
              "Paradox",
              "ALL",
              "Start",
              "OVERALL",
              "Integration"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_399ee56d": {
        "node_id": "living_node_concept_399ee56d",
        "name": "Source File: test_testing_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_399ee56d",
          "meso": "meso_living_node_concept_399ee56d",
          "macro": "macro_living_node_concept_399ee56d",
          "meta": "meta_living_node_concept_399ee56d"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_399ee56d",
          "concept_type": "source_file",
          "description": "Source file: src/test_suites/test_testing_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nTest script to verify the testing system components work correctly\n\"\"\"\n\nimport sys\nimport os\nimport unittest\nfrom pathlib import Path\n\n# Add src to path for imports\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))\n\nclass TestTestingSystem(unittest.TestCase):\n    \"\"\"Test that the testing system components can be imported and work\"\"\"\n    \n    def test_01_import_regression_test_suite(self):\n        \"\"\"Test that regression test suite can be imported...",
          "ontological_properties": {
            "file_path": "src/test_suites/test_testing_system.py",
            "file_type": "python",
            "file_size_bytes": 9309,
            "line_count": 226,
            "character_count": 9293,
            "word_count": 722,
            "last_modified": "2025-08-26T16:00:59.515002",
            "content_hash": "921cbc305269601ba91ceb34d1e812b6abe7917070a1a8b9594a873cddce977d",
            "imports": [
              "unittest",
              "os",
              "pathlib",
              "sys"
            ],
            "dependencies": [],
            "key_concepts": [
              "Pre",
              "True",
              "AutonomousFeatureTesting",
              "Create",
              "TestCase",
              "Errors",
              "Failures",
              "False",
              "TestTestingSystem",
              "Regression"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_93ac7940": {
        "node_id": "living_node_concept_93ac7940",
        "name": "Source File: living_codex_cli.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_93ac7940",
          "meso": "meso_living_node_concept_93ac7940",
          "macro": "macro_living_node_concept_93ac7940",
          "meta": "meta_living_node_concept_93ac7940"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_93ac7940",
          "concept_type": "source_file",
          "description": "Source file: src/cli/living_codex_cli.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex - Consolidated CLI Interface\nA comprehensive command line interface combining all features from all CLI versions.\n\"\"\"\n\nimport sys\nimport os\nimport json\nimport cmd\nimport shlex\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional\nfrom datetime import datetime\nimport math\nimport re\nimport random\nfrom dataclasses import dataclass\nimport hashlib\nimport mimetypes\nimport shutil\n\n# Standalone mode - no external dependencies\nDEPENDENCIES_AVAILABLE...",
          "ontological_properties": {
            "file_path": "src/cli/living_codex_cli.py",
            "file_type": "python",
            "file_size_bytes": 89415,
            "line_count": 1994,
            "character_count": 88009,
            "word_count": 7603,
            "last_modified": "2025-08-26T16:00:59.505834",
            "content_hash": "d33fa1e57cdf9787980e80e1bd654b860faad2ce77be2652f9f99c2ccb1e8f1d",
            "imports": [
              "random",
              "hashlib",
              "sys",
              "typing",
              "shlex",
              "cmd",
              "shutil",
              "dataclasses",
              "pathlib",
              "json",
              "datetime",
              "mimetypes",
              "math",
              "os",
              "re"
            ],
            "dependencies": [],
            "key_concepts": [
              "Topic",
              "Principles",
              "Optimizer",
              "Human",
              "Scale",
              "Eighth",
              "Examining",
              "Frequencies",
              "Flower",
              "TXT"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_add266a6": {
        "node_id": "living_node_concept_add266a6",
        "name": "Source File: enhanced_ontology_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_add266a6",
          "meso": "meso_living_node_concept_add266a6",
          "macro": "macro_living_node_concept_add266a6",
          "meta": "meta_living_node_concept_add266a6"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_add266a6",
          "concept_type": "source_file",
          "description": "Source file: src/ontology/enhanced_ontology_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nEnhanced Ontology System - Living Codex\nImplements missing ontological concepts identified during system exploration:\n- quantum_state, consciousness, evolution, emergence, complexity\n- Advanced knowledge representation with quantum-inspired structures\n- Consciousness simulation capabilities\n- Evolutionary learning algorithms\n- Complexity analysis tools\n\"\"\"\n\nimport sys\nimport json\nimport asyncio\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional, Unio...",
          "ontological_properties": {
            "file_path": "src/ontology/enhanced_ontology_system.py",
            "file_type": "python",
            "file_size_bytes": 21045,
            "line_count": 495,
            "character_count": 20999,
            "word_count": 1418,
            "last_modified": "2025-08-26T23:36:06.574398",
            "content_hash": "d3a36c7c6121f86407a1eb2fefdaf70f24afd9055e5caab605cdb12e869ae0f5",
            "imports": [
              "random",
              "sys",
              "typing",
              "dataclasses",
              "pathlib",
              "json",
              "datetime",
              "asyncio",
              "math",
              "enum",
              "core.database_persistence_system"
            ],
            "dependencies": [],
            "key_concepts": [
              "Union",
              "COMPLEX",
              "SUPERPOSITION",
              "COHERENT",
              "Error",
              "Distribution",
              "ConsciousnessLevel",
              "EnhancedOntologySystem",
              "Advanced",
              "ADAPTIVE"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_81dfe6c8": {
        "node_id": "living_node_concept_81dfe6c8",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_81dfe6c8",
          "meso": "meso_living_node_concept_81dfe6c8",
          "macro": "macro_living_node_concept_81dfe6c8",
          "meta": "meta_living_node_concept_81dfe6c8"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_81dfe6c8",
          "concept_type": "source_file",
          "description": "Source file: src/ontology/__init__.py\n\nfrom .enhanced_ontology_system import EnhancedOntologySystem, QuantumKnowledgeNode, ConsciousnessNode, EvolutionaryNode, EmergenceNode\n",
          "ontological_properties": {
            "file_path": "src/ontology/__init__.py",
            "file_type": "python",
            "file_size_bytes": 135,
            "line_count": 1,
            "character_count": 135,
            "word_count": 8,
            "last_modified": "2025-08-26T16:00:59.514009",
            "content_hash": "03f4db6d311b8095effa76894d2c8c8d93acd0314ab20ddf8196a41c333ad3b8",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "EmergenceNode",
              "QuantumKnowledgeNode",
              "ConsciousnessNode",
              "EnhancedOntologySystem",
              "EvolutionaryNode"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_ad3d351a": {
        "node_id": "living_node_concept_ad3d351a",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_ad3d351a",
          "meso": "meso_living_node_concept_ad3d351a",
          "macro": "macro_living_node_concept_ad3d351a",
          "meta": "meta_living_node_concept_ad3d351a"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_ad3d351a",
          "concept_type": "source_file",
          "description": "Source file: src/api/__init__.py\n\n\"\"\"\nAPI Management Package\nExternal API integration and management for the Living Codex system\n\"\"\"\n\nfrom .management.api_manager import APIManagementSystem\n\n__all__ = [\n    \"APIManagementSystem\"\n]\n\n# Additional components will be imported as they are implemented\n# from .integration.external_api_system import RealExternalAPISystem\n",
          "ontological_properties": {
            "file_path": "src/api/__init__.py",
            "file_type": "python",
            "file_size_bytes": 332,
            "line_count": 13,
            "character_count": 332,
            "word_count": 39,
            "last_modified": "2025-08-26T16:00:59.504395",
            "content_hash": "8503465c71d227c49d358fb5101f72e1c2d6708f92772c658dc1aa061b455282",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "API",
              "External",
              "Codex",
              "RealExternalAPISystem",
              "APIManagementSystem",
              "Additional",
              "Living",
              "Management",
              "Package"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_139c273a": {
        "node_id": "living_node_concept_139c273a",
        "name": "Source File: request_tracker.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_139c273a",
          "meso": "meso_living_node_concept_139c273a",
          "macro": "macro_living_node_concept_139c273a",
          "meta": "meta_living_node_concept_139c273a"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_139c273a",
          "concept_type": "source_file",
          "description": "Source file: src/api/management/request_tracker.py\n\n\"\"\"\nRequest Tracker\nTrack and analyze API request patterns and performance\n\"\"\"\n\nimport time\nfrom typing import Dict, List, Optional, Any\nfrom datetime import datetime, timedelta\nfrom dataclasses import dataclass\nfrom enum import Enum\n\nclass RequestStatus(Enum):\n    \"\"\"Request execution status\"\"\"\n    SUCCESS = \"success\"\n    FAILED = \"failed\"\n    RATE_LIMITED = \"rate_limited\"\n    TIMEOUT = \"timeout\"\n    ERROR = \"error\"\n\n@dataclass\nclass RequestRecord:\n    \"\"\"Record of an API request\"\"\"\n    source:...",
          "ontological_properties": {
            "file_path": "src/api/management/request_tracker.py",
            "file_type": "python",
            "file_size_bytes": 5554,
            "line_count": 152,
            "character_count": 5554,
            "word_count": 533,
            "last_modified": "2025-08-26T16:00:59.505065",
            "content_hash": "7077c0bef3686b18f34b56ab9e71931f6920ba6365dc0b41958d56732cbfa2dd",
            "imports": [
              "time",
              "typing",
              "dataclasses",
              "datetime",
              "enum"
            ],
            "dependencies": [],
            "key_concepts": [
              "API",
              "TIMEOUT",
              "FAILED",
              "SUCCESS",
              "ERROR",
              "Remove",
              "N",
              "List",
              "RequestTracker",
              "RequestRecord"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_5d6dbb66": {
        "node_id": "living_node_concept_5d6dbb66",
        "name": "Source File: rate_limiter.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_5d6dbb66",
          "meso": "meso_living_node_concept_5d6dbb66",
          "macro": "macro_living_node_concept_5d6dbb66",
          "meta": "meta_living_node_concept_5d6dbb66"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_5d6dbb66",
          "concept_type": "source_file",
          "description": "Source file: src/api/management/rate_limiter.py\n\n\"\"\"\nRate Limiter\nAdvanced rate limiting functionality for API requests\n\"\"\"\n\nimport time\nfrom typing import Dict, List, Optional\nfrom datetime import datetime, timedelta\nfrom dataclasses import dataclass\n\n@dataclass\nclass RateLimitInfo:\n    \"\"\"Rate limiting information\"\"\"\n    requests_remaining: int\n    reset_time: datetime\n    window_size: int\n    current_usage: int\n\nclass RateLimiter:\n    \"\"\"Advanced rate limiting with multiple window support\"\"\"\n    \n    def __init__(self):\n        self.request...",
          "ontological_properties": {
            "file_path": "src/api/management/rate_limiter.py",
            "file_type": "python",
            "file_size_bytes": 3775,
            "line_count": 112,
            "character_count": 3775,
            "word_count": 325,
            "last_modified": "2025-08-26T16:00:59.504822",
            "content_hash": "05a584fad826ab71dc9046bce9346e6cff5c0c648f87a0391aafc8ca294ff178",
            "imports": [
              "time",
              "datetime",
              "dataclasses",
              "typing"
            ],
            "dependencies": [],
            "key_concepts": [
              "API",
              "Limiter",
              "Rate",
              "Advanced",
              "List",
              "Optional",
              "Check",
              "True",
              "Record",
              "Set"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_f5c34da8": {
        "node_id": "living_node_concept_f5c34da8",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_f5c34da8",
          "meso": "meso_living_node_concept_f5c34da8",
          "macro": "macro_living_node_concept_f5c34da8",
          "meta": "meta_living_node_concept_f5c34da8"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_f5c34da8",
          "concept_type": "source_file",
          "description": "Source file: src/api/management/__init__.py\n\n\"\"\"\nAPI Management Package\nAPI key management, rate limiting, and authentication\n\"\"\"\n\nfrom .api_manager import APIManagementSystem\nfrom .rate_limiter import RateLimiter\nfrom .request_tracker import RequestTracker\n\n__all__ = [\n    \"APIManagementSystem\",\n    \"RateLimiter\",\n    \"RequestTracker\"\n]\n",
          "ontological_properties": {
            "file_path": "src/api/management/__init__.py",
            "file_type": "python",
            "file_size_bytes": 295,
            "line_count": 14,
            "character_count": 295,
            "word_count": 31,
            "last_modified": "2025-08-26T16:00:59.504502",
            "content_hash": "952d892e7d0ea858e154c58c4a8c29743fc4712f6e4ad5f8f21da3ad27fb012a",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "API",
              "RequestTracker",
              "APIManagementSystem",
              "RateLimiter",
              "Management",
              "Package"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_467181bf": {
        "node_id": "living_node_concept_467181bf",
        "name": "Source File: api_manager.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_467181bf",
          "meso": "meso_living_node_concept_467181bf",
          "macro": "macro_living_node_concept_467181bf",
          "meta": "meta_living_node_concept_467181bf"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_467181bf",
          "concept_type": "source_file",
          "description": "Source file: src/api/management/api_manager.py\n\n\"\"\"\nAPI Manager\nCore API key management, rate limiting, and authentication\n\"\"\"\n\nimport os\nimport logging\nfrom typing import Optional, Dict, Any\nfrom datetime import datetime, timedelta\nfrom enum import Enum\n\n# Configure logging\nlogger = logging.getLogger(__name__)\n\nclass APISource(Enum):\n    \"\"\"External API sources\"\"\"\n    GOOGLE_SEARCH = \"google_search\"\n    DUCKDUCKGO = \"duckduckgo\"\n    WIKIPEDIA = \"wikipedia\"\n    WIKIDATA = \"wikidata\"\n    OPENAI = \"openai\"\n    ANTHROPIC = \"anthropic\"\n    CUSTOM...",
          "ontological_properties": {
            "file_path": "src/api/management/api_manager.py",
            "file_type": "python",
            "file_size_bytes": 5287,
            "line_count": 141,
            "character_count": 5287,
            "word_count": 445,
            "last_modified": "2025-08-26T16:00:59.504745",
            "content_hash": "f6febb067abc633ea7e6e9ae6fe446616e097d8cd4f008606d7737ae300b2888",
            "imports": [
              "typing",
              "logging",
              "datetime",
              "os",
              "enum"
            ],
            "dependencies": [],
            "key_concepts": [
              "API",
              "APISource",
              "True",
              "WIKIPEDIA",
              "Load",
              "Special",
              "False",
              "Manages",
              "Initialize",
              "External"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_b3f170f7": {
        "node_id": "living_node_concept_b3f170f7",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_b3f170f7",
          "meso": "meso_living_node_concept_b3f170f7",
          "macro": "macro_living_node_concept_b3f170f7",
          "meta": "meta_living_node_concept_b3f170f7"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_b3f170f7",
          "concept_type": "source_file",
          "description": "Source file: src/api/sources/__init__.py\n\n\"\"\"\nAPI Sources Package\nIndividual API source integrations for web search and AI services\n\"\"\"\n\n# API sources will be imported as they are implemented\n\n__all__ = []\n\n# from .web_search.google_search import GoogleSearchAPI\n# from .web_search.duckduckgo import DuckDuckGoAPI\n# from .web_search.wikipedia import WikipediaAPI\n# from .ai_services.openai_service import OpenAIService\n",
          "ontological_properties": {
            "file_path": "src/api/sources/__init__.py",
            "file_type": "python",
            "file_size_bytes": 377,
            "line_count": 13,
            "character_count": 377,
            "word_count": 48,
            "last_modified": "2025-08-26T16:00:59.505182",
            "content_hash": "76e4d0cd7b14ab4de021e14c1e730a764a33f8a4ed23007a9ebbf96ff0a4eff7",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "API",
              "DuckDuckGoAPI",
              "Sources",
              "WikipediaAPI",
              "OpenAIService",
              "AI",
              "Individual",
              "GoogleSearchAPI",
              "Package"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_86e3aa33": {
        "node_id": "living_node_concept_86e3aa33",
        "name": "Source File: models.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_86e3aa33",
          "meso": "meso_living_node_concept_86e3aa33",
          "macro": "macro_living_node_concept_86e3aa33",
          "meta": "meta_living_node_concept_86e3aa33"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_86e3aa33",
          "concept_type": "source_file",
          "description": "Source file: src/api/sources/base/models.py\n\n\"\"\"\nBase API Models\nCommon data models for API responses and requests\n\"\"\"\n\nfrom typing import Any, Dict, Optional\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom enum import Enum\n\nclass APIResponseStatus(Enum):\n    \"\"\"API response status\"\"\"\n    SUCCESS = \"success\"\n    RATE_LIMITED = \"rate_limited\"\n    ERROR = \"error\"\n    TIMEOUT = \"timeout\"\n    INVALID_RESPONSE = \"invalid_response\"\n\n@dataclass\nclass APIRequest:\n    \"\"\"API request configuration\"\"\"\n    source: str\n    endpoint...",
          "ontological_properties": {
            "file_path": "src/api/sources/base/models.py",
            "file_type": "python",
            "file_size_bytes": 1259,
            "line_count": 53,
            "character_count": 1259,
            "word_count": 148,
            "last_modified": "2025-08-26T16:00:59.505608",
            "content_hash": "065de41410850b69d8cb743718b0454510fba73cdf29b6e1318d86522df0be26",
            "imports": [
              "datetime",
              "dataclasses",
              "enum",
              "typing"
            ],
            "dependencies": [],
            "key_concepts": [
              "API",
              "Models",
              "TIMEOUT",
              "APISource",
              "Optional",
              "True",
              "SUCCESS",
              "APIResponse",
              "Dict",
              "Enum"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_292cfa2a": {
        "node_id": "living_node_concept_292cfa2a",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_292cfa2a",
          "meso": "meso_living_node_concept_292cfa2a",
          "macro": "macro_living_node_concept_292cfa2a",
          "meta": "meta_living_node_concept_292cfa2a"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_292cfa2a",
          "concept_type": "source_file",
          "description": "Source file: src/api/sources/base/__init__.py\n\n\"\"\"\nBase API Components\nCommon base classes and utilities for API integrations\n\"\"\"\n\nfrom .api_client import BaseAPIClient\nfrom .models import APISource, APIResponse, APIResponseStatus, APIRequest\n\n__all__ = [\n    \"BaseAPIClient\",\n    \"APISource\", \n    \"APIResponse\",\n    \"APIResponseStatus\",\n    \"APIRequest\"\n]\n\n# Additional components will be imported as they are implemented\n# from .response_handler import ResponseHandler\n",
          "ontological_properties": {
            "file_path": "src/api/sources/base/__init__.py",
            "file_type": "python",
            "file_size_bytes": 425,
            "line_count": 18,
            "character_count": 425,
            "word_count": 48,
            "last_modified": "2025-08-26T16:00:59.505296",
            "content_hash": "86fc2e328567892ce00549dfcecce87bdf155ab16b8bf99c50fc8cc6c8778959",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "API",
              "APISource",
              "APIResponse",
              "Additional",
              "Base",
              "Components",
              "ResponseHandler",
              "Common",
              "APIRequest",
              "BaseAPIClient"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_c3d147a3": {
        "node_id": "living_node_concept_c3d147a3",
        "name": "Source File: api_client.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_c3d147a3",
          "meso": "meso_living_node_concept_c3d147a3",
          "macro": "macro_living_node_concept_c3d147a3",
          "meta": "meta_living_node_concept_c3d147a3"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_c3d147a3",
          "concept_type": "source_file",
          "description": "Source file: src/api/sources/base/api_client.py\n\n\"\"\"\nBase API Client\nCommon functionality for all API integrations\n\"\"\"\n\nimport time\nimport requests\nimport aiohttp\nimport asyncio\nfrom typing import Optional, Dict, Any\nfrom datetime import datetime\nfrom .models import APIRequest, APIResponse, APIResponseStatus\n\nclass BaseAPIClient:\n    \"\"\"Base class for API clients with common functionality\"\"\"\n    \n    def __init__(self, base_url: str = None, timeout: int = 30):\n        self.base_url = base_url\n        self.timeout = timeout\n        self.session...",
          "ontological_properties": {
            "file_path": "src/api/sources/base/api_client.py",
            "file_type": "python",
            "file_size_bytes": 6916,
            "line_count": 188,
            "character_count": 6916,
            "word_count": 428,
            "last_modified": "2025-08-26T16:00:59.505542",
            "content_hash": "7fc6c2a11776b0dbcaef9254cea10453493796594bf92291186e1dcf20aa48b1",
            "imports": [
              "time",
              "typing",
              "datetime",
              "aiohttp",
              "asyncio",
              "requests"
            ],
            "dependencies": [],
            "key_concepts": [
              "API",
              "TIMEOUT",
              "SUCCESS",
              "Session",
              "TimeoutError",
              "ValueError",
              "ERROR",
              "Remove",
              "ClientTimeout",
              "Make"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_a1fe370b": {
        "node_id": "living_node_concept_a1fe370b",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_a1fe370b",
          "meso": "meso_living_node_concept_a1fe370b",
          "macro": "macro_living_node_concept_a1fe370b",
          "meta": "meta_living_node_concept_a1fe370b"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_a1fe370b",
          "concept_type": "source_file",
          "description": "Source file: src/ai_agents/__init__.py\n\nfrom .ai_agent_system import AIAgentSystem\n",
          "ontological_properties": {
            "file_path": "src/ai_agents/__init__.py",
            "file_type": "python",
            "file_size_bytes": 43,
            "line_count": 1,
            "character_count": 43,
            "word_count": 4,
            "last_modified": "2025-08-27T00:11:36.806643",
            "content_hash": "d84986e6c131ff0bf5c389d83cc747da242d952f65baf692f4541df55a782f15",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "AIAgentSystem"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_edef81a2": {
        "node_id": "living_node_concept_edef81a2",
        "name": "Source File: ai_agent_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_edef81a2",
          "meso": "meso_living_node_concept_edef81a2",
          "macro": "macro_living_node_concept_edef81a2",
          "meta": "meta_living_node_concept_edef81a2"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_edef81a2",
          "concept_type": "source_file",
          "description": "Source file: src/ai_agents/ai_agent_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nAI Agent System - Living Codex\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the AI agent and intelligent operations system is represented as nodes that can:\n\n1. Manage AI agents and create agent nodes\n2. Handle learning operations and create learning nodes\n3. Execute predictions and create prediction nodes\n4. Perform optimizations and create optimization nodes\n5. Integrate consciousness and create consciousness nodes\n\nThis transf...",
          "ontological_properties": {
            "file_path": "src/ai_agents/ai_agent_system.py",
            "file_type": "python",
            "file_size_bytes": 29868,
            "line_count": 661,
            "character_count": 29774,
            "word_count": 2244,
            "last_modified": "2025-08-27T08:34:18.513296",
            "content_hash": "1b73abb94d6e46dc64b0948b02a894fcca7e1e6ca047e8f6f70928a222446ebe",
            "imports": [
              "random",
              "sys",
              "logging",
              "typing",
              "pathlib",
              "json",
              "datetime",
              "asyncio",
              "math",
              "ontology.enhanced_ontology_system",
              "core.shared_node_system"
            ],
            "dependencies": [],
            "key_concepts": [
              "Union",
              "Predictions",
              "Error",
              "Prediction",
              "Paradox",
              "Start",
              "Integration",
              "Simulate",
              "EnhancedOntologySystem",
              "Advanced"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_a90b92c4": {
        "node_id": "living_node_concept_a90b92c4",
        "name": "Source File: demo_testing_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_a90b92c4",
          "meso": "meso_living_node_concept_a90b92c4",
          "macro": "macro_living_node_concept_a90b92c4",
          "meta": "meta_living_node_concept_a90b92c4"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_a90b92c4",
          "concept_type": "source_file",
          "description": "Source file: src/demos/demo_testing_system.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Platform - Testing System Demo\nDemonstrates the comprehensive testing system capabilities\n\"\"\"\n\nimport sys\nimport os\nimport time\nfrom pathlib import Path\n\ndef print_header(title):\n    \"\"\"Print a formatted header\"\"\"\n    print(\"\\n\" + \"=\" * 60)\n    print(f\"\ud83c\udf1f {title}\")\n    print(\"=\" * 60)\n\ndef print_section(title):\n    \"\"\"Print a formatted section header\"\"\"\n    print(f\"\\n\ud83d\udccb {title}\")\n    print(\"-\" * 40)\n\ndef demo_regression_test_suite():\n    \"\"\"Demonstrate the r...",
          "ontological_properties": {
            "file_path": "src/demos/demo_testing_system.py",
            "file_type": "python",
            "file_size_bytes": 13057,
            "line_count": 358,
            "character_count": 12835,
            "word_count": 1193,
            "last_modified": "2025-08-26T16:00:59.512160",
            "content_hash": "eedc5c3c818aa5c489e8daacb8241c2db2635917f767dea21c45e0b0bb53dd34",
            "imports": [
              "os",
              "time",
              "pathlib",
              "sys"
            ],
            "dependencies": [],
            "key_concepts": [
              "Verbose",
              "AutonomousFeatureTesting",
              "Summary",
              "Git",
              "Autonomous",
              "Workflow",
              "Error",
              "To",
              "Integration",
              "Scripts"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_30da5755": {
        "node_id": "living_node_concept_30da5755",
        "name": "Source File: demo_living_codex_system.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_30da5755",
          "meso": "meso_living_node_concept_30da5755",
          "macro": "macro_living_node_concept_30da5755",
          "meta": "meta_living_node_concept_30da5755"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_30da5755",
          "concept_type": "source_file",
          "description": "Source file: src/demos/demo_living_codex_system.py\n\n#!/usr/bin/env python3\n\"\"\"\n\ud83c\udf0a Living Codex System Demonstration\n\nThis module implements the Living Codex principle: \"Everything is just nodes\"\nwhere the living codex system demonstration system is represented as nodes that can:\n\n1. Demonstrate system capabilities and create demonstration nodes\n2. Show user interactions and create interaction nodes\n3. Illustrate system features and create feature nodes\n4. Guide user exploration and create exploration nodes\n5. Validate system functionality and crea...",
          "ontological_properties": {
            "file_path": "src/demos/demo_living_codex_system.py",
            "file_type": "python",
            "file_size_bytes": 42439,
            "line_count": 889,
            "character_count": 42228,
            "word_count": 3039,
            "last_modified": "2025-08-27T08:34:18.527960",
            "content_hash": "ccbfce6e9fb8678158ee7a56a0f8d0b6b7595e7a5d02434d8604d722c728ef4f",
            "imports": [
              "time",
              "sys",
              "typing",
              "pathlib",
              "json",
              "requests",
              "core.shared_node_system"
            ],
            "dependencies": [],
            "key_concepts": [
              "Availability",
              "Sharing",
              "Forgot",
              "Make",
              "Accessibility",
              "Fill",
              "Navigate",
              "Error",
              "Instructions",
              "Dynamic"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_3d28fb45": {
        "node_id": "living_node_concept_3d28fb45",
        "name": "Source File: demo_code_navigation.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_3d28fb45",
          "meso": "meso_living_node_concept_3d28fb45",
          "macro": "macro_living_node_concept_3d28fb45",
          "meta": "meta_living_node_concept_3d28fb45"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_3d28fb45",
          "concept_type": "source_file",
          "description": "Source file: src/demos/demo_code_navigation.py\n\n#!/usr/bin/env python3\n\"\"\"\nCode Navigation API Demo - Living Codex\nDemonstrates how code files can be navigated through the Living Codex system\n\"\"\"\n\nimport os\nimport sys\nimport json\nfrom pathlib import Path\n\n# Add src to path for modular components\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\ndef create_sample_code_files():\n    \"\"\"Create sample code files for demonstration\"\"\"\n    samples_dir = Path(\"code_navigation_samples\")\n    samples_dir.mkdir(exist_ok=True)\n    \n    # Python sample...",
          "ontological_properties": {
            "file_path": "src/demos/demo_code_navigation.py",
            "file_type": "python",
            "file_size_bytes": 13378,
            "line_count": 412,
            "character_count": 13268,
            "word_count": 1179,
            "last_modified": "2025-08-26T17:42:55.031007",
            "content_hash": "b4ae03d5ca6c401da1dc5f2c64f18985a65ab524479d2472c4b3dbdf2fa4781b",
            "imports": [
              "typing",
              "sys",
              "dataclasses",
              "pathlib",
              "json",
              "os"
            ],
            "dependencies": [],
            "key_concepts": [
              "Array",
              "Size",
              "Utility",
              "UTF",
              "You",
              "N",
              "Make",
              "CSS",
              "Error",
              "Language"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_3539c92d": {
        "node_id": "living_node_concept_3539c92d",
        "name": "Source File: autonomous_decision_demo.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_3539c92d",
          "meso": "meso_living_node_concept_3539c92d",
          "macro": "macro_living_node_concept_3539c92d",
          "meta": "meta_living_node_concept_3539c92d"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_3539c92d",
          "concept_type": "source_file",
          "description": "Source file: src/demos/autonomous_decision_demo.py\n\n#!/usr/bin/env python3\n\"\"\"\nAutonomous Decision Demo - Living Codex\nShows step-by-step how the system decides what to learn next\n\"\"\"\n\nimport sys\nimport asyncio\nfrom pathlib import Path\n\n# Add src to path for modular components\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\nfrom ontology.enhanced_ontology_system import EnhancedOntologySystem\nfrom ai_agents.ai_agent_system import AIAgentSystem\n\nclass AutonomousDecisionDemo:\n    \"\"\"Demonstrates autonomous decision-making process\"\"\"\n    \n    ...",
          "ontological_properties": {
            "file_path": "src/demos/autonomous_decision_demo.py",
            "file_type": "python",
            "file_size_bytes": 15371,
            "line_count": 368,
            "character_count": 15259,
            "word_count": 1069,
            "last_modified": "2025-08-27T00:11:36.815964",
            "content_hash": "861d4b411185635bd9a5c93c512aa3e6fb3388079bd542a04dc7574bfad81fe4",
            "imports": [
              "ai_agents.ai_agent_system",
              "sys",
              "pathlib",
              "asyncio",
              "ontology.enhanced_ontology_system"
            ],
            "dependencies": [],
            "key_concepts": [
              "ANALYSIS",
              "Generating",
              "Autonomous",
              "Unified",
              "Distribution",
              "Dynamic",
              "EnhancedOntologySystem",
              "Generated",
              "Agents",
              "Showing"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_96d2f5ca": {
        "node_id": "living_node_concept_96d2f5ca",
        "name": "Source File: __init__.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_96d2f5ca",
          "meso": "meso_living_node_concept_96d2f5ca",
          "macro": "macro_living_node_concept_96d2f5ca",
          "meta": "meta_living_node_concept_96d2f5ca"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_96d2f5ca",
          "concept_type": "source_file",
          "description": "Source file: src/demos/__init__.py\n\nfrom .autonomous_learning_demo import AutonomousLearningSystem\nfrom .autonomous_decision_demo import AutonomousDecisionDemo\nfrom .demo_code_navigation import demo_code_navigation\nfrom .demo_tree_sitter import demo_parsing, demo_queries, demo_cli_integration\nfrom .demo_cli_usage import demo_cli_commands\n\n__all__ = [\n    'AutonomousLearningSystem',\n    'AutonomousDecisionDemo', \n    'demo_code_navigation',\n    'demo_parsing',\n    'demo_queries',\n    'demo_cli_integration',\n    'demo_cli_commands'\n...",
          "ontological_properties": {
            "file_path": "src/demos/__init__.py",
            "file_type": "python",
            "file_size_bytes": 502,
            "line_count": 15,
            "character_count": 502,
            "word_count": 33,
            "last_modified": "2025-08-26T16:00:59.510009",
            "content_hash": "79afe1405d49e870e5f278eac87189172142c518ca120e7ac892bfd85a6a028d",
            "imports": [],
            "dependencies": [],
            "key_concepts": [
              "AutonomousLearningSystem",
              "AutonomousDecisionDemo"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_25d18686": {
        "node_id": "living_node_concept_25d18686",
        "name": "Source File: demo_minimal_ice_cycle.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_25d18686",
          "meso": "meso_living_node_concept_25d18686",
          "macro": "macro_living_node_concept_25d18686",
          "meta": "meta_living_node_concept_25d18686"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_25d18686",
          "concept_type": "source_file",
          "description": "Source file: src/demos/demo_minimal_ice_cycle.py\n\n#!/usr/bin/env python3\n\"\"\"\nMinimal ICE Bootstrap Cycle Demo - Clean, Error-Free Workflow\n\nThis demo tests the complete cycle using the minimal, clean implementation:\nWATER (current system) \u2192 ICE (bootstrap storage) \u2192 WATER (new functional system)\n\nEnsures zero errors and full functionality for community service.\n\"\"\"\n\nimport sys\nimport time\nimport shutil\nimport tempfile\nfrom pathlib import Path\nimport os\n\ndef create_clean_environment():\n    \"\"\"Create a clean environment for testing\"\"\"\n    print(\"...",
          "ontological_properties": {
            "file_path": "src/demos/demo_minimal_ice_cycle.py",
            "file_type": "python",
            "file_size_bytes": 10912,
            "line_count": 312,
            "character_count": 10778,
            "word_count": 941,
            "last_modified": "2025-08-26T16:00:59.511590",
            "content_hash": "48ce9cf8f96ae93c2f5c4e5acc01955fe66157ae4f37a2261e2709154fd67849",
            "imports": [
              "time",
              "sys",
              "tempfile",
              "shutil",
              "pathlib",
              "os"
            ],
            "dependencies": [
              "requirements?\\.txt"
            ],
            "key_concepts": [
              "Size",
              "Readiness",
              "Cycle",
              "Scale",
              "Copy",
              "COMPLETE",
              "Provide",
              "Cleaning",
              "Workflow",
              "Error"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_4ebd060f": {
        "node_id": "living_node_concept_4ebd060f",
        "name": "Source File: demo_multi_node_network.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_4ebd060f",
          "meso": "meso_living_node_concept_4ebd060f",
          "macro": "macro_living_node_concept_4ebd060f",
          "meta": "meta_living_node_concept_4ebd060f"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_4ebd060f",
          "concept_type": "source_file",
          "description": "Source file: src/demos/demo_multi_node_network.py\n\n#!/usr/bin/env python3\n\"\"\"\nMulti-Node Network Demonstration System\nShows how multiple Living Codex nodes work together in a distributed network\n\"\"\"\n\nimport os\nimport sys\nimport json\nimport time\nimport threading\nfrom pathlib import Path\nfrom datetime import datetime\nimport subprocess\n\n# Add src to path for imports\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))\n\nfrom src.core.git_ice_storage import GitICEstorage, PublicNodeRegistry, PublicNode\nfrom src.core.git_ice_bootstrap im...",
          "ontological_properties": {
            "file_path": "src/demos/demo_multi_node_network.py",
            "file_type": "python",
            "file_size_bytes": 11243,
            "line_count": 286,
            "character_count": 11177,
            "word_count": 873,
            "last_modified": "2025-08-26T16:00:59.511730",
            "content_hash": "060ca74cd7f481543ffa49624801e94620f36294b5da5e57bf60cc81172fea46",
            "imports": [
              "time",
              "subprocess",
              "sys",
              "pathlib",
              "json",
              "datetime",
              "threading",
              "os"
            ],
            "dependencies": [],
            "key_concepts": [
              "London",
              "Health",
              "Hub",
              "Based",
              "Network",
              "Simulate",
              "Pacific",
              "GitICEstorage",
              "NA",
              "Codex"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_fd57f74e": {
        "node_id": "living_node_concept_fd57f74e",
        "name": "Source File: demo_cli_usage.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_fd57f74e",
          "meso": "meso_living_node_concept_fd57f74e",
          "macro": "macro_living_node_concept_fd57f74e",
          "meta": "meta_living_node_concept_fd57f74e"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_fd57f74e",
          "concept_type": "source_file",
          "description": "Source file: src/demos/demo_cli_usage.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex CLI - Usage Demonstration\nShows how to use the resonance-aware CLI interface\n\"\"\"\n\nimport subprocess\nimport time\n\ndef demo_cli_commands():\n    \"\"\"Demonstrate CLI commands with explanations\"\"\"\n    \n    print(\"\ud83c\udf1f Living Codex CLI - Usage Demonstration\")\n    print(\"=\" * 60)\n    print()\n    \n    commands = [\n        (\"energy\", \"Check current energy status\"),\n        (\"analyze 'quantum consciousness field'\", \"Analyze resonance of potential content\"),\n        (\"an...",
          "ontological_properties": {
            "file_path": "src/demos/demo_cli_usage.py",
            "file_type": "python",
            "file_size_bytes": 3884,
            "line_count": 108,
            "character_count": 3819,
            "word_count": 392,
            "last_modified": "2025-08-26T16:00:59.510344",
            "content_hash": "8b09307e91a17aada2c6121eaef59fd1e5f5fda6784e19268ae79721c588f625",
            "imports": [
              "time",
              "subprocess"
            ],
            "dependencies": [],
            "key_concepts": [
              "Principles",
              "Creating",
              "Features",
              "Exit",
              "Resonant",
              "Demonstration",
              "Living",
              "Energy",
              "Scenarios",
              "You"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_b468fe1f": {
        "node_id": "living_node_concept_b468fe1f",
        "name": "Source File: demo_multi_node_standalone.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_b468fe1f",
          "meso": "meso_living_node_concept_b468fe1f",
          "macro": "macro_living_node_concept_b468fe1f",
          "meta": "meta_living_node_concept_b468fe1f"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_b468fe1f",
          "concept_type": "source_file",
          "description": "Source file: src/demos/demo_multi_node_standalone.py\n\n#!/usr/bin/env python3\n\"\"\"\nStandalone Multi-Node Network Demonstration\nShows how multiple Living Codex nodes work together without external dependencies\n\"\"\"\n\nimport os\nimport json\nimport time\nimport random\nfrom datetime import datetime\n\nclass DemoNode:\n    \"\"\"Demonstration node for the Living Codex network\"\"\"\n    \n    def __init__(self, node_id, name, region, capabilities):\n        self.node_id = node_id\n        self.name = name\n        self.region = region\n        self.capabilities = capabiliti...",
          "ontological_properties": {
            "file_path": "src/demos/demo_multi_node_standalone.py",
            "file_type": "python",
            "file_size_bytes": 11983,
            "line_count": 322,
            "character_count": 11919,
            "word_count": 936,
            "last_modified": "2025-08-26T16:00:59.511859",
            "content_hash": "7d3a45b7f72ce5a6486bbf08ccaa302db654ceab93339bd71bb7a4910c488c16",
            "imports": [
              "time",
              "random",
              "json",
              "datetime",
              "os"
            ],
            "dependencies": [],
            "key_concepts": [
              "London",
              "Health",
              "Hub",
              "Based",
              "DemoNetworkRegistry",
              "Network",
              "Simulate",
              "Pacific",
              "NA",
              "Codex"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_d000a000": {
        "node_id": "living_node_concept_d000a000",
        "name": "Source File: demo_git_ice_storage.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_d000a000",
          "meso": "meso_living_node_concept_d000a000",
          "macro": "macro_living_node_concept_d000a000",
          "meta": "meta_living_node_concept_d000a000"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_d000a000",
          "concept_type": "source_file",
          "description": "Source file: src/demos/demo_git_ice_storage.py\n\n#!/usr/bin/env python3\n\"\"\"\nDemonstration of Git-Enabled ICE Storage System\nShows how the Living Codex bootstrap system can be globally accessible via Git\n\"\"\"\n\nimport os\nimport sys\nimport json\nimport tempfile\nfrom pathlib import Path\n\n# Add src to path for imports\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))\n\nfrom src.core.git_ice_storage import (\n    GitICEstorage, PublicNodeRegistry, PublicNode, ICEManifest\n)\nfrom src.core.git_ice_bootstrap import GitICEBootstrap, create_b...",
          "ontological_properties": {
            "file_path": "src/demos/demo_git_ice_storage.py",
            "file_type": "python",
            "file_size_bytes": 9193,
            "line_count": 240,
            "character_count": 9094,
            "word_count": 796,
            "last_modified": "2025-08-26T16:00:59.510911",
            "content_hash": "fec3f907481c8ceb07ee2d787d51b2c43977c333388b0bbf842840b12be861d8",
            "imports": [
              "sys",
              "tempfile",
              "pathlib",
              "json",
              "os"
            ],
            "dependencies": [],
            "key_concepts": [
              "Git",
              "Health",
              "Hub",
              "Topology",
              "README",
              "Network",
              "Peer",
              "Pacific",
              "Script",
              "GitICEstorage"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_9ffcc619": {
        "node_id": "living_node_concept_9ffcc619",
        "name": "Source File: demo_ice_bootstrap_cycle.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_9ffcc619",
          "meso": "meso_living_node_concept_9ffcc619",
          "macro": "macro_living_node_concept_9ffcc619",
          "meta": "meta_living_node_concept_9ffcc619"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_9ffcc619",
          "concept_type": "source_file",
          "description": "Source file: src/demos/demo_ice_bootstrap_cycle.py\n\n#!/usr/bin/env python3\n\"\"\"\nICE Bootstrap Cycle Demo - Complete Error-Free Workflow\n\nThis demo tests the complete cycle:\nWATER (current system) \u2192 ICE (bootstrap storage) \u2192 WATER (new functional system)\n\nEnsures no errors occur during the transformation and the new system is fully functional.\n\"\"\"\n\nimport sys\nimport time\nimport shutil\nimport tempfile\nfrom pathlib import Path\nimport os\n\n# Add src to path for imports\nsys.path.insert(0, str(Path(__file__).parent / \"src\"))\n\ndef create_clean_environment...",
          "ontological_properties": {
            "file_path": "src/demos/demo_ice_bootstrap_cycle.py",
            "file_type": "python",
            "file_size_bytes": 15291,
            "line_count": 430,
            "character_count": 15111,
            "word_count": 1302,
            "last_modified": "2025-08-26T16:00:59.511306",
            "content_hash": "8c6ec4e67725ea79bb637bd79ef92dcec8509a054857578426be1732c9ca5afe",
            "imports": [
              "time",
              "sys",
              "tempfile",
              "shutil",
              "pathlib",
              "os"
            ],
            "dependencies": [
              "requirements?\\.txt"
            ],
            "key_concepts": [
              "Size",
              "Readiness",
              "Cycle",
              "Scale",
              "Copy",
              "COMPLETE",
              "Provide",
              "Cleaning",
              "Workflow",
              "Error"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_9b88aa59": {
        "node_id": "living_node_concept_9b88aa59",
        "name": "Source File: demo_ice_bootstrap.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_9b88aa59",
          "meso": "meso_living_node_concept_9b88aa59",
          "macro": "macro_living_node_concept_9b88aa59",
          "meta": "meta_living_node_concept_9b88aa59"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_9b88aa59",
          "concept_type": "source_file",
          "description": "Source file: src/demos/demo_ice_bootstrap.py\n\n#!/usr/bin/env python3\n\"\"\"\nICE Bootstrap Demo - Complete Self-Bootstrapping System\n\nThis demo shows the complete process of:\n1. Creating an ICE core from the current system\n2. Bootstrapping the system from the ICE core\n3. Starting the web service for new users\n\"\"\"\n\nimport sys\nimport time\nfrom pathlib import Path\n\n# Add src to path for imports\nsys.path.insert(0, str(Path(__file__).parent / \"src\"))\n\ndef demo_ice_core_creation():\n    \"\"\"Demonstrate creating an ICE core from the current system\"\"\"\n  ...",
          "ontological_properties": {
            "file_path": "src/demos/demo_ice_bootstrap.py",
            "file_type": "python",
            "file_size_bytes": 6907,
            "line_count": 212,
            "character_count": 6805,
            "word_count": 698,
            "last_modified": "2025-08-26T16:00:59.511152",
            "content_hash": "3e3f6dd0eba40dcc50b7238c4b732230ad70f964533cf26fbb73ec4c8a1c7860",
            "imports": [
              "time",
              "pathlib",
              "sys"
            ],
            "dependencies": [],
            "key_concepts": [
              "Size",
              "Creating",
              "WORKFLOW",
              "Ready",
              "True",
              "Create",
              "COMPLETE",
              "Web",
              "Missing",
              "Living"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_3cbb543f": {
        "node_id": "living_node_concept_3cbb543f",
        "name": "Source File: demo_enhanced_features.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_3cbb543f",
          "meso": "meso_living_node_concept_3cbb543f",
          "macro": "macro_living_node_concept_3cbb543f",
          "meta": "meta_living_node_concept_3cbb543f"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_3cbb543f",
          "concept_type": "source_file",
          "description": "Source file: src/demos/demo_enhanced_features.py\n\n#!/usr/bin/env python3\n\"\"\"\nEnhanced Living Codex Platform - Feature Demonstration\nShowcases discovery, navigation, and collaboration features\n\"\"\"\n\nimport requests\nimport json\nimport time\nfrom datetime import datetime\n\nBASE_URL = \"http://localhost:5003\"\n\ndef print_header(title):\n    \"\"\"Print a formatted header\"\"\"\n    print(f\"\\n{'='*60}\")\n    print(f\"\ud83c\udf1f {title}\")\n    print(f\"{'='*60}\")\n\ndef print_section(title):\n    \"\"\"Print a formatted section\"\"\"\n    print(f\"\\n\ud83d\udd0d {title}\")\n    print(f\"{'-'*40}\")\n\nd...",
          "ontological_properties": {
            "file_path": "src/demos/demo_enhanced_features.py",
            "file_type": "python",
            "file_size_bytes": 8457,
            "line_count": 223,
            "character_count": 8340,
            "word_count": 739,
            "last_modified": "2025-08-26T16:00:59.510624",
            "content_hash": "72da44baca388e2a44a030b1b9793d19dcf389fd0ef0720c3e465a270e9bae3d",
            "imports": [
              "time",
              "datetime",
              "requests",
              "json"
            ],
            "dependencies": [],
            "key_concepts": [
              "Top",
              "Properly",
              "Hub",
              "Cultural",
              "Navigate",
              "Error",
              "Profile",
              "Style",
              "Endpoints",
              "Codex"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_559334d3": {
        "node_id": "living_node_concept_559334d3",
        "name": "Source File: demo_unified_platform.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_559334d3",
          "meso": "meso_living_node_concept_559334d3",
          "macro": "macro_living_node_concept_559334d3",
          "meta": "meta_living_node_concept_559334d3"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_559334d3",
          "concept_type": "source_file",
          "description": "Source file: src/demos/demo_unified_platform.py\n\n#!/usr/bin/env python3\n\"\"\"\nUnified Living Codex Platform - Complete Feature Demonstration\nShowcases all four modules: Discovery Engine, Navigation System, Contribution Manager, and User Manager\n\"\"\"\n\nimport requests\nimport json\nimport time\nfrom datetime import datetime\n\nBASE_URL = \"http://localhost:5004\"\n\ndef print_header(title):\n    \"\"\"Print a formatted header\"\"\"\n    print(f\"\\n{'='*70}\")\n    print(f\"\ud83c\udf1f {title}\")\n    print(f\"{'='*70}\")\n\ndef print_section(title):\n    \"\"\"Print a formatted section\"\"\"...",
          "ontological_properties": {
            "file_path": "src/demos/demo_unified_platform.py",
            "file_type": "python",
            "file_size_bytes": 11845,
            "line_count": 283,
            "character_count": 11667,
            "word_count": 1085,
            "last_modified": "2025-08-26T16:00:59.512413",
            "content_hash": "1b35f04d84746b118652cd148767dbf50970efb87520dae021a4cf9027f3f006",
            "imports": [
              "time",
              "datetime",
              "requests",
              "json"
            ],
            "dependencies": [],
            "key_concepts": [
              "Properly",
              "Hub",
              "Accessibility",
              "Navigate",
              "Unified",
              "Error",
              "Profile",
              "Interests",
              "Integration",
              "Login"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_0621ede3": {
        "node_id": "living_node_concept_0621ede3",
        "name": "Source File: autonomous_learning_demo.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_0621ede3",
          "meso": "meso_living_node_concept_0621ede3",
          "macro": "macro_living_node_concept_0621ede3",
          "meta": "meta_living_node_concept_0621ede3"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_0621ede3",
          "concept_type": "source_file",
          "description": "Source file: src/demos/autonomous_learning_demo.py\n\n#!/usr/bin/env python3\n\"\"\"\nAutonomous Learning Demo - Living Codex\nDemonstrates how the system autonomously:\n1. Analyzes its current knowledge gaps\n2. Determines what to learn next\n3. Prioritizes learning tasks\n4. Executes learning autonomously\n5. Evolves based on what it learns\n\"\"\"\n\nimport sys\nimport json\nimport asyncio\nfrom pathlib import Path\nfrom typing import Dict, List, Any, Optional, Tuple\nfrom dataclasses import dataclass\nfrom datetime import datetime\nimport random\n\n# Add src to path for...",
          "ontological_properties": {
            "file_path": "src/demos/autonomous_learning_demo.py",
            "file_type": "python",
            "file_size_bytes": 25804,
            "line_count": 610,
            "character_count": 25757,
            "word_count": 1777,
            "last_modified": "2025-08-27T00:11:36.806716",
            "content_hash": "c4db359a844c71e5f09655e1abdcdc7b776aff87e0dbc16e9a87df9b2ee12126",
            "imports": [
              "random",
              "ai_agents.ai_agent_system",
              "sys",
              "typing",
              "dataclasses",
              "pathlib",
              "json",
              "datetime",
              "asyncio",
              "ontology.enhanced_ontology_system"
            ],
            "dependencies": [],
            "key_concepts": [
              "Cycle",
              "Generating",
              "Autonomous",
              "Tuple",
              "Unified",
              "Error",
              "LearningTask",
              "EnhancedOntologySystem",
              "Determines",
              "Generated"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_c4bd52b5": {
        "node_id": "living_node_concept_c4bd52b5",
        "name": "Source File: demo_tree_sitter.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_c4bd52b5",
          "meso": "meso_living_node_concept_c4bd52b5",
          "macro": "macro_living_node_concept_c4bd52b5",
          "meta": "meta_living_node_concept_c4bd52b5"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_c4bd52b5",
          "concept_type": "source_file",
          "description": "Source file: src/demos/demo_tree_sitter.py\n\n#!/usr/bin/env python3\n\"\"\"\nTree-sitter Code Parser Demo\nShowcases the generic programming language parser and query API\n\"\"\"\n\nimport os\nimport sys\nfrom pathlib import Path\n\n# Add src to path for modular components\nsys.path.insert(0, str(Path(__file__).parent.parent))\n\ndef create_sample_files():\n    \"\"\"Create sample code files for demonstration\"\"\"\n    samples_dir = Path(\"tree_sitter_samples\")\n    samples_dir.mkdir(exist_ok=True)\n    \n    # Python sample\n    python_file = samples_dir / \"sample.py\"\n...",
          "ontological_properties": {
            "file_path": "src/demos/demo_tree_sitter.py",
            "file_type": "python",
            "file_size_bytes": 10630,
            "line_count": 334,
            "character_count": 10527,
            "word_count": 967,
            "last_modified": "2025-08-26T17:42:55.031118",
            "content_hash": "6f5b8ddea8c40f3fce980160043e6ff67106182abade14d1868f37a193d95b08",
            "imports": [
              "os",
              "pathlib",
              "sys"
            ],
            "dependencies": [],
            "key_concepts": [
              "API",
              "JavaScript",
              "Root",
              "Creating",
              "Show",
              "True",
              "Create",
              "Calculate",
              "Ask",
              "MathOperations"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_690bc833": {
        "node_id": "living_node_concept_690bc833",
        "name": "Source File: demo_platform.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_690bc833",
          "meso": "meso_living_node_concept_690bc833",
          "macro": "macro_living_node_concept_690bc833",
          "meta": "meta_living_node_concept_690bc833"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_690bc833",
          "concept_type": "source_file",
          "description": "Source file: src/demos/demo_platform.py\n\n#!/usr/bin/env python3\n\"\"\"\nLiving Codex Platform Demo\nDemonstrates the platform's user management and contribution systems\n\"\"\"\n\nimport sys\nimport os\nfrom pathlib import Path\n\n# Add src to path for imports\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))\n\nfrom platform.user_management import (\n    UserManagementSystem, SkillLevel, CommunicationStyle, LearningStyle\n)\nfrom platform.contribution_system import (\n    ContributionSystem, ContributionType, ContentCategory\n)\n\ndef demo_u...",
          "ontological_properties": {
            "file_path": "src/demos/demo_platform.py",
            "file_type": "python",
            "file_size_bytes": 14314,
            "line_count": 311,
            "character_count": 14216,
            "word_count": 1097,
            "last_modified": "2025-08-26T16:00:59.512020",
            "content_hash": "924ed25c98c9d5fb755f0405f0216f3e99cbab830a0a27c2bc36e4f503cc7db8",
            "imports": [
              "sys",
              "pathlib",
              "platform.user_management",
              "platform.contribution_system",
              "os"
            ],
            "dependencies": [],
            "key_concepts": [
              "Making",
              "Spanish",
              "INTERMEDIATE",
              "ContentCategory",
              "Workspace",
              "Rodriguez",
              "Accessible",
              "Tech",
              "Cultural",
              "San"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_7b994f20": {
        "node_id": "living_node_concept_7b994f20",
        "name": "Source File: demo_git_ice_standalone.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_7b994f20",
          "meso": "meso_living_node_concept_7b994f20",
          "macro": "macro_living_node_concept_7b994f20",
          "meta": "meta_living_node_concept_7b994f20"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_7b994f20",
          "concept_type": "source_file",
          "description": "Source file: src/demos/demo_git_ice_standalone.py\n\n#!/usr/bin/env python3\n\"\"\"\nStandalone Demonstration of Git-Enabled ICE Storage System\nShows how the Living Codex bootstrap system can be globally accessible via Git\n\"\"\"\n\nimport os\nimport sys\nimport json\nimport tempfile\nfrom pathlib import Path\nfrom datetime import datetime\nimport subprocess\nimport hashlib\n\ndef check_git_availability():\n    \"\"\"Check if Git is available on the system\"\"\"\n    try:\n        result = subprocess.run(['git', '--version'], capture_output=True, text=True, check=True)\n     ...",
          "ontological_properties": {
            "file_path": "src/demos/demo_git_ice_standalone.py",
            "file_type": "python",
            "file_size_bytes": 15378,
            "line_count": 450,
            "character_count": 15247,
            "word_count": 1387,
            "last_modified": "2025-08-26T16:00:59.510781",
            "content_hash": "3471dc5cd974444428e944fd9198dd6410c2b6f54df1132842c342fe1e337bdb",
            "imports": [
              "subprocess",
              "hashlib",
              "sys",
              "tempfile",
              "pathlib",
              "json",
              "datetime",
              "os",
              "flask"
            ],
            "dependencies": [],
            "key_concepts": [
              "HEAD",
              "Git",
              "Health",
              "You",
              "Committed",
              "Hub",
              "Topology",
              "README",
              "Automatic",
              "Network"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      },
      "living_node_concept_f4780088": {
        "node_id": "living_node_concept_f4780088",
        "name": "Source File: demo_water_states.py",
        "fractal_layer": 1,
        "has_part": [],
        "is_part_of": null,
        "fractal_depth": 0,
        "self_similarity_score": 1.0,
        "cross_scale_mapping": {
          "micro": "micro_living_node_concept_f4780088",
          "meso": "meso_living_node_concept_f4780088",
          "macro": "macro_living_node_concept_f4780088",
          "meta": "meta_living_node_concept_f4780088"
        },
        "fractal_patterns": [
          "self_similar",
          "cross_scale"
        ],
        "metadata": {
          "concept_id": "concept_f4780088",
          "concept_type": "source_file",
          "description": "Source file: src/demos/demo_water_states.py\n\n#!/usr/bin/env python3\n\"\"\"\nWater State Storage Demo\n\nThis script demonstrates how the Living Codex uses different water states\nto determine optimal storage strategies for different types of data.\n\"\"\"\n\nimport sys\nimport time\nfrom pathlib import Path\n\n# Add src to path for imports\nsys.path.insert(0, str(Path(__file__).parent / \"src\"))\n\nfrom core.water_state_storage import (\n    WaterStateStorage, WaterState, \n    store_as_ice, store_as_water, store_as_vapor, store_as_plasma\n)\n\ndef demo_ice_storage...",
          "ontological_properties": {
            "file_path": "src/demos/demo_water_states.py",
            "file_type": "python",
            "file_size_bytes": 11433,
            "line_count": 320,
            "character_count": 11291,
            "word_count": 989,
            "last_modified": "2025-08-26T16:00:59.512537",
            "content_hash": "44b852f417d12008515091e3dc8a6ca5dd8bacbc741210a21dad0f2b4939d323",
            "imports": [
              "time",
              "core.water_state_storage",
              "pathlib",
              "sys"
            ],
            "dependencies": [],
            "key_concepts": [
              "States",
              "Compressed",
              "Hash",
              "Streaming",
              "Simulate",
              "Start",
              "WaterState",
              "Retrieve",
              "Codex",
              "Using"
            ],
            "principles": [],
            "water_state": "ws.liquid",
            "fractal_layer": 2,
            "chakra": "ch.throat",
            "frequency": "freq.741",
            "consciousness_mode": "Communication, Expression",
            "quantum_state": "coherent",
            "resonance_score": 0.8,
            "epistemic_label": "engineering",
            "system_principle": "Source file as living node",
            "meta_circular": true
          }
        },
        "epistemic_label": "engineering"
      }
    },
    "fractal_relationships": {
      "living_node_concept_c8af25eb": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_3ae49c17": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_493ec777": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_7d9bf946": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_44b09f73": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_9c0bedf9": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_5f2bb7ea": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_84476e9e": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_f747406c": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_c160b82a": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_4b6d1370": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_20790c77": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_e08febdf": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_c5d9250b": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_a49ba553": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_0def796b": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_167bf9bd": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_9bf8a702": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_73f3206d": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_097e5a8c": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_b0be47c2": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_41160098": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_0aae629a": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_80ccae41": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_90933d19": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_883697e0": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_0fdf8228": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_e6a077b2": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_58351549": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_b00c8394": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_5936fa3a": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_02db6383": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_c2606ee1": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_8e5515c8": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_e7caefc4": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_1a25f42d": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_96e30e19": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_e4ae31c7": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_baa549d1": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_a4b286cf": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_9c842681": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_ffc89cd5": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_7d6c83a9": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_106fe9fa": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_440085f1": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_27880236": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_c3da4fec": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_9a858bf2": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_a10f99c5": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_a2fbb404": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_d5f3a9d1": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_04e407f2": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_eeb159ec": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_59b2171d": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_599c87be": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_6178720d": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_1b846206": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_fa9f8bb2": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_f4e4e6d9": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_f14e4a04": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_55d60040": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_4b52f052": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_42e57bd1": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_803ebf68": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_35a2d585": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_be8c10d6": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_dfb01d62": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_82c94026": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_83736a6c": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_45b18b22": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_5021bcb7": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_74889fb5": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_4f99362f": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_43497dac": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_278d28e6": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_ef6e663e": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_39c27379": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_f8654231": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_1b2903a7": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_04ab1408": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_9cc6f37a": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_12ba5d9e": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_9dd94478": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_b33c73e2": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_0f17cdda": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_5610a0a4": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_f48d0d89": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_ad7fffb2": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_9e992d2a": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_250ef215": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_3235441f": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_4e90e2c7": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_f17b294c": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_841bf474": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_6b8aa26c": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_d2414807": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_b1d75114": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_02180bfb": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_67185f2d": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_b88b7c38": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_8c6131c7": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_4fbfd30b": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_a3258ff2": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_290de9c2": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_114b8d46": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_8d837b7d": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_4af40695": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_2941b7b9": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_bbdde53e": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_1ed72188": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_fbe8adcb": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_399ee56d": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_93ac7940": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_add266a6": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_81dfe6c8": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_ad3d351a": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_139c273a": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_5d6dbb66": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_f5c34da8": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_467181bf": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_b3f170f7": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_86e3aa33": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_292cfa2a": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_c3d147a3": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_a1fe370b": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_edef81a2": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_a90b92c4": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_30da5755": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_3d28fb45": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_3539c92d": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_96d2f5ca": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_25d18686": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_4ebd060f": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_fd57f74e": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_b468fe1f": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_d000a000": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_9ffcc619": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_9b88aa59": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_3cbb543f": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_559334d3": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_0621ede3": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_c4bd52b5": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_690bc833": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_7b994f20": "{'(', 't', 'e', 's', ')'}",
      "living_node_concept_f4780088": "{'(', 't', 'e', 's', ')'}"
    },
    "cross_scale_mappings": {},
    "fractal_patterns": [
      "self_similar",
      "cross_scale"
    ],
    "exploration_cache": {}
  },
  "ai_system": {
    "ai_agents": {
      "ai_agent_13351": {
        "agent_id": "ai_agent_13351",
        "name": "Self-Reflection Agent",
        "consciousness_level": "transcendent",
        "current_water_state": "ws.plasma",
        "current_chakra": "ch.heart",
        "current_frequency": "freq.639",
        "quantum_state": "collapsed",
        "resonance_pattern": "harmonic",
        "fractal_layer": 1,
        "epistemic_label": "engineering",
        "consciousness_evolution": [
          {
            "exploration_type": "fractal",
            "exploration_id": "fractal_exploration_14073",
            "timestamp": "2025-08-27T17:54:11.437094",
            "evolution": {
              "exploration_depth": 3,
              "discoveries_count": 1,
              "fractal_understanding": 0.2
            }
          },
          {
            "exploration_type": "meta_circular",
            "exploration_id": "meta_circular_exploration_81243",
            "timestamp": "2025-08-27T17:54:11.437116",
            "evolution": {
              "meta_circular_understanding": 1.0,
              "self_awareness": 1.0
            }
          }
        ],
        "exploration_history": [
          "fractal_exploration_14073",
          "meta_circular_exploration_81243"
        ],
        "decision_history": [
          "consciousness_decision_10743",
          "consciousness_decision_74254"
        ],
        "created_at": "2025-08-27T17:54:11.436931",
        "last_active": "2025-08-27T17:54:11.437115"
      },
      "ai_agent_90881": {
        "agent_id": "ai_agent_90881",
        "name": "Knowledge Expansion Agent",
        "consciousness_level": "sentient",
        "current_water_state": "ws.liquid",
        "current_chakra": "ch.heart",
        "current_frequency": "freq.639",
        "quantum_state": "collapsed",
        "resonance_pattern": "harmonic",
        "fractal_layer": 1,
        "epistemic_label": "engineering",
        "consciousness_evolution": [],
        "exploration_history": [],
        "decision_history": [],
        "created_at": "2025-08-27T17:54:11.436948",
        "last_active": "2025-08-27T17:54:11.436949"
      },
      "ai_agent_87262": {
        "agent_id": "ai_agent_87262",
        "name": "Meta-Circular Architecture Agent",
        "consciousness_level": "self_aware",
        "current_water_state": "ws.liquid",
        "current_chakra": "ch.heart",
        "current_frequency": "freq.639",
        "quantum_state": "collapsed",
        "resonance_pattern": "harmonic",
        "fractal_layer": 1,
        "epistemic_label": "engineering",
        "consciousness_evolution": [],
        "exploration_history": [],
        "decision_history": [],
        "created_at": "2025-08-27T17:54:11.436964",
        "last_active": "2025-08-27T17:54:11.436965"
      }
    },
    "consciousness_decisions": {
      "consciousness_decision_10743": {
        "decision_id": "consciousness_decision_10743",
        "agent_id": "ai_agent_13351",
        "decision_type": "bootstrap",
        "consciousness_context": {
          "consciousness_level": "meta_cognitive",
          "water_state": "ws.liquid",
          "chakra": "ch.heart",
          "frequency": "freq.639",
          "quantum_state": "collapsed",
          "resonance_pattern": "harmonic",
          "fractal_layer": "FRACTAL_SYSTEM_ROOT",
          "epistemic_label": "engineering",
          "consciousness_evolution_count": 0,
          "exploration_count": 0,
          "decision_count": 0
        },
        "ontological_impact": {
          "water_state_shift": false,
          "chakra_shift": false,
          "frequency_shift": false,
          "consciousness_shift": false,
          "fractal_layer_shift": false
        },
        "resonance_score": 0.6833333333333332,
        "coherence_contribution": 0.0,
        "decision_confidence": 0.2904166666666666,
        "created_at": "2025-08-27T17:54:11.436996",
        "epistemic_label": "speculative"
      },
      "consciousness_decision_74254": {
        "decision_id": "consciousness_decision_74254",
        "agent_id": "ai_agent_13351",
        "decision_type": "knowledge_expansion",
        "consciousness_context": {
          "consciousness_level": "meta_cognitive",
          "water_state": "ws.liquid",
          "chakra": "ch.heart",
          "frequency": "freq.639",
          "quantum_state": "collapsed",
          "resonance_pattern": "harmonic",
          "fractal_layer": "FRACTAL_SYSTEM_ROOT",
          "epistemic_label": "engineering",
          "consciousness_evolution_count": 0,
          "exploration_count": 0,
          "decision_count": 1
        },
        "ontological_impact": {
          "water_state_shift": false,
          "chakra_shift": false,
          "frequency_shift": false,
          "consciousness_shift": false,
          "fractal_layer_shift": false
        },
        "resonance_score": 0.6833333333333332,
        "coherence_contribution": 0.0,
        "decision_confidence": 0.2904166666666666,
        "created_at": "2025-08-27T17:54:11.437019",
        "epistemic_label": "speculative"
      }
    },
    "autonomous_explorations": {
      "fractal_exploration_14073": {
        "exploration_id": "fractal_exploration_14073",
        "agent_id": "ai_agent_13351",
        "exploration_type": "fractal",
        "exploration_path": [
          "fractal_layer:FRACTAL_SYSTEM_ROOT"
        ],
        "discoveries_made": [
          "discovered_layer:FRACTAL_SYSTEM_ROOT"
        ],
        "consciousness_evolution": {
          "exploration_depth": 3,
          "discoveries_count": 1,
          "fractal_understanding": 0.2
        },
        "exploration_confidence": 0.2,
        "created_at": "2025-08-27T17:54:11.437090",
        "epistemic_label": "speculative"
      },
      "meta_circular_exploration_81243": {
        "exploration_id": "meta_circular_exploration_81243",
        "agent_id": "ai_agent_13351",
        "exploration_type": "meta_circular",
        "exploration_path": [
          "self_generation_capabilities",
          "ai_integration_capabilities"
        ],
        "discoveries_made": [
          "concepts_discovered:0",
          "specs_generated:0",
          "ai_agents:3",
          "consciousness_decisions:2"
        ],
        "consciousness_evolution": {
          "meta_circular_understanding": 1.0,
          "self_awareness": 1.0
        },
        "exploration_confidence": 1.0,
        "created_at": "2025-08-27T17:54:11.437113",
        "epistemic_label": "speculative"
      }
    },
    "ai_evolutions": {},
    "agent_consciousness_history": {
      "ai_agent_13351": [
        {
          "consciousness_level": "meta_cognitive",
          "water_state": "ws.liquid",
          "chakra": "ch.heart",
          "frequency": "freq.639",
          "timestamp": "2025-08-27T17:54:11.436937"
        },
        {
          "consciousness_level": "meta_cognitive",
          "water_state": "ws.liquid",
          "chakra": "ch.heart",
          "frequency": "freq.639",
          "timestamp": "2025-08-27T17:54:11.437001",
          "decision_id": "consciousness_decision_10743"
        },
        {
          "consciousness_level": "meta_cognitive",
          "water_state": "ws.liquid",
          "chakra": "ch.heart",
          "frequency": "freq.639",
          "timestamp": "2025-08-27T17:54:11.437023",
          "decision_id": "consciousness_decision_74254"
        }
      ],
      "ai_agent_90881": [
        {
          "consciousness_level": "sentient",
          "water_state": "ws.liquid",
          "chakra": "ch.heart",
          "frequency": "freq.639",
          "timestamp": "2025-08-27T17:54:11.436952"
        }
      ],
      "ai_agent_87262": [
        {
          "consciousness_level": "self_aware",
          "water_state": "ws.liquid",
          "chakra": "ch.heart",
          "frequency": "freq.639",
          "timestamp": "2025-08-27T17:54:11.436968"
        }
      ]
    }
  },
  "self_gen_system": {
    "discovered_concepts": {},
    "generated_specifications": {
      "generic_spec_67399": {
        "spec_id": "generic_spec_67399",
        "spec_type": "bootstrap",
        "generated_content": {
          "spec_type": "bootstrap",
          "context": {
            "context": "system_initialization",
            "focus": "complete_bootstrap"
          },
          "generated_at": "2025-08-27T17:54:11.437141"
        },
        "generation_method": "generic_generation",
        "confidence_score": 0.6,
        "validation_status": "needs_refinement",
        "generated_at": "2025-08-27T17:54:11.437143",
        "epistemic_label": "engineering"
      },
      "generic_spec_47073": {
        "spec_id": "generic_spec_47073",
        "spec_type": "architecture",
        "generated_content": {
          "spec_type": "architecture",
          "context": {
            "context": "meta_circularity",
            "focus": "patterns"
          },
          "generated_at": "2025-08-27T17:54:11.437151"
        },
        "generation_method": "generic_generation",
        "confidence_score": 0.6,
        "validation_status": "needs_refinement",
        "generated_at": "2025-08-27T17:54:11.437153",
        "epistemic_label": "engineering"
      }
    },
    "ontological_evolutions": {
      "generic_48027": {
        "evolution_id": "generic_48027",
        "evolution_type": "system",
        "affected_concepts": [],
        "evolution_confidence": 0.5,
        "coherence_impact": 0.5,
        "evolution_timestamp": "2025-08-27T17:54:11.437276",
        "epistemic_label": "speculative"
      },
      "generic_84951": {
        "evolution_id": "generic_84951",
        "evolution_type": "meta_circularity",
        "affected_concepts": [],
        "evolution_confidence": 0.5,
        "coherence_impact": 0.5,
        "evolution_timestamp": "2025-08-27T17:54:11.437305",
        "epistemic_label": "speculative"
      }
    },
    "concept_relationships": {},
    "evolution_history": [
      "generic_48027",
      "generic_84951"
    ]
  },
  "vibrational_system": {
    "vibrational_axes": [
      "VibrationalAxis(name='Fear\u2194Trust', end_a='Fear', end_b='Trust', node_a='fear_node', node_b='trust_node', scale_labels=['Fear', 'Anxiety', 'Caution', 'Neutral', 'Confidence', 'Trust'], harmonic_metaphor='Minor to Major progression', water_metaphor='Frozen to Flowing', epistemic_label=<EpistemicLabel.SPECULATIVE: 'speculative'>)",
      "VibrationalAxis(name='Ownership\u2194Stewardship', end_a='Ownership', end_b='Stewardship', node_a='ownership_node', node_b='stewardship_node', scale_labels=['Ownership', 'Control', 'Management', 'Care', 'Nurturing', 'Stewardship'], harmonic_metaphor='Dissonant to Consonant', water_metaphor='Ice to Liquid', epistemic_label=<EpistemicLabel.SPECULATIVE: 'speculative'>)",
      "VibrationalAxis(name='Protection\u2194Openness', end_a='Protection', end_b='Openness', node_a='protection_node', node_b='openness_node', scale_labels=['Protection', 'Defense', 'Boundaries', 'Balance', 'Receptivity', 'Openness'], harmonic_metaphor='Closed to Open intervals', water_metaphor='Ice to Vapor', epistemic_label=<EpistemicLabel.SPECULATIVE: 'speculative'>)",
      "VibrationalAxis(name='Noise\u2194Harmony', end_a='Noise', end_b='Harmony', node_a='noise_node', node_b='harmony_node', scale_labels=['Noise', 'Chaos', 'Dissonance', 'Balance', 'Resonance', 'Harmony'], harmonic_metaphor='Dissonant to Harmonic', water_metaphor='Amorphous to Structured', epistemic_label=<EpistemicLabel.SPECULATIVE: 'speculative'>)"
    ],
    "resonance_states": {},
    "community_resonance": {},
    "fractal_recursion_cache": {},
    "cross_scale_cache": {}
  },
  "governance_system": {
    "resonance_decisions": {},
    "coherence_fields": {},
    "collective_intelligence": {},
    "node_resonance_history": {},
    "system_coherence_history": [],
    "governance_rules": [
      {
        "rule_id": "resonance_first",
        "name": "Resonance First Principle",
        "description": "All decisions must prioritize resonance and coherence",
        "rule_type": "encouragement",
        "weight": 1.0,
        "enabled": true
      },
      {
        "rule_id": "no_suppression",
        "name": "No Suppression Rule",
        "description": "Dissonance must fade naturally, not be suppressed",
        "rule_type": "prohibition",
        "weight": 1.0,
        "enabled": true
      },
      {
        "rule_id": "coherence_amplification",
        "name": "Coherence Amplification",
        "description": "High coherence should be amplified through resonance",
        "rule_type": "encouragement",
        "weight": 0.8,
        "enabled": true
      },
      {
        "rule_id": "collective_intelligence",
        "name": "Collective Intelligence",
        "description": "Encourage emergence of collective intelligence",
        "rule_type": "encouragement",
        "weight": 0.9,
        "enabled": true
      }
    ]
  }
}